{"version":3,"file":"795.js","mappings":"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","sources":["./src/app/components/chart-demo/chart-demo.component.ts","./src/app/components/trading-chart/trading-chart.component.ts","./src/app/components/trading-chart/trading-chart.component.html","./src/app/services/chart.service.ts","./src/app/services/realtime.service.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TradingChartComponent } from '../trading-chart/trading-chart.component';\nimport { RealtimeService, TickerData, PriceUpdate } from '../../services/realtime.service';\nimport { ChartService, ChartSymbol } from '../../services/chart.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-chart-demo',\n  standalone: true,\n  imports: [CommonModule, FormsModule, TradingChartComponent],\n  template: `\n    <div class=\"chart-demo-container\">\n      <div class=\"demo-header\">\n        <h2>📈 TradingView Chart with Bybit Integration</h2>\n        <p>Real-time cryptocurrency charts powered by Bybit API</p>\n      </div>\n\n      <!-- Chart Section -->\n      <div class=\"chart-section\">\n        <div class=\"chart-header\">\n          <h3>BTCUSDT Chart</h3>\n          <div class=\"chart-controls\">\n            <button (click)=\"refreshChart()\" class=\"refresh-btn\">🔄 Refresh</button>\n          </div>\n        </div>\n\n        <app-trading-chart\n          [initialSymbol]=\"'BTCUSDT'\"\n          [initialResolution]=\"'60'\"\n          (symbolChange)=\"onSymbolChange($event)\">\n        </app-trading-chart>\n      </div>\n\n      <!-- API Status -->\n      <div class=\"api-status\">\n        <h4>API Status</h4>\n        <div class=\"status-grid\">\n          <div class=\"status-item\">\n            <span class=\"status-label\">Backend Connection:</span>\n            <span class=\"status-value connected\">Connected</span>\n          </div>\n          <div class=\"status-item\">\n            <span class=\"status-label\">Bybit API:</span>\n            <span class=\"status-value connected\">Active</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .chart-demo-container {\n      padding: 20px;\n      max-width: 1400px;\n      margin: 0 auto;\n    }\n\n    .demo-header {\n      text-align: center;\n      margin-bottom: 30px;\n    }\n\n    .demo-header h2 {\n      color: #333;\n      margin-bottom: 10px;\n    }\n\n    .demo-header p {\n      color: #666;\n      font-size: 16px;\n    }\n\n    .chart-section {\n      margin-bottom: 30px;\n      height: 600px;\n    }\n\n    .chart-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 15px;\n    }\n\n    .chart-controls {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .refresh-btn {\n      padding: 8px 16px;\n      background: #007bff;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .refresh-btn:hover {\n      background: #0056b3;\n    }\n\n    .api-status {\n      background: #f8f9fa;\n      padding: 20px;\n      border-radius: 8px;\n      border: 1px solid #e0e0e0;\n    }\n\n    .api-status h4 {\n      margin-bottom: 15px;\n      color: #333;\n    }\n\n    .status-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n    }\n\n    .status-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .status-label {\n      font-weight: 500;\n    }\n\n    .status-value {\n      font-weight: bold;\n    }\n\n    .status-value.connected {\n      color: #28a745;\n    }\n\n    .status-value.disconnected {\n      color: #dc3545;\n    }\n  `]\n})\nexport class ChartDemoComponent implements OnInit, OnDestroy {\n  selectedSymbol: string = 'BTCUSDT';\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private realtimeService: RealtimeService,\n    private chartService: ChartService\n  ) {}\n\n  ngOnInit() {\n    console.log('Chart demo component initialized');\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.realtimeService.closeAllConnections();\n  }\n\n  onSymbolChange(symbol: string) {\n    this.selectedSymbol = symbol;\n    console.log('Symbol changed to:', symbol);\n  }\n\n  refreshChart() {\n    console.log('Refreshing chart...');\n  }\n}","import { Component, OnInit, AfterViewInit, OnDestroy, OnChanges, SimpleChanges, ViewChild, ElementRef, Input, Output, EventEmitter, effect, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ThemeService } from '../../services/theme.service';\nimport { TranslationService } from '../../services/translation.service';\nimport { ButtonComponent } from '../ui/button/button.component';\n\nexport interface TradingViewConfig {\n  allow_symbol_change: boolean;\n  calendar: boolean;\n  details: boolean;\n  hide_side_toolbar: boolean;\n  hide_top_toolbar: boolean;\n  hide_legend: boolean;\n  hide_volume: boolean;\n  hotlist: boolean;\n  interval: string;\n  locale: string;\n  save_image: boolean;\n  style: string;\n  symbol: string;\n  theme: 'light' | 'dark';\n  timezone: string;\n  backgroundColor?: string;\n  gridColor?: string;\n  watchlist: string[];\n  withdateranges: boolean;\n  compareSymbols: string[];\n  studies: string[];\n  autosize: boolean;\n}\n\nexport interface GridConfig {\n  symbol: string;\n  upperBound: number;\n  lowerBound: number;\n  gridCount: number;\n  gridSpacing: number;\n  strategyType: string;\n}\n\n@Component({\n  selector: 'app-trading-chart',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ButtonComponent],\n  templateUrl: './trading-chart.component.html',\n  styleUrl: './trading-chart.component.scss'\n})\nexport class TradingChartComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  @ViewChild('tradingviewWidget', { static: false }) tradingviewWidget!: ElementRef;\n  @Input() symbol: string = 'BINANCE:BTCUSDT';\n  @Input() initialSymbol: string = 'BINANCE:BTCUSDT';\n  @Input() initialResolution: string = 'D';\n  @Input() chartHeight: number = 600;\n  @Output() symbolChange = new EventEmitter<string>();\n\n  private scriptElement: HTMLScriptElement | null = null;\n\n  // Component state\n  loading = false;\n  error: string | null = null;\n\n  // Widget configuration\n  currentSymbol = this.symbol;\n  currentInterval = 'D';\n  showVolume = false;\n  showDetails = false;\n  showCalendar = false;\n  allowSymbolChange = true;\n\n  // Theme integration\n  readonly currentTheme = this.themeService.currentTheme;\n  readonly isDark = computed(() => this.currentTheme() === 'dark');\n  readonly currentLanguage = this.translationService.currentLanguage;\n\n  constructor(\n    private themeService: ThemeService,\n    private translationService: TranslationService\n  ) {\n    // React to theme and language changes\n    effect(() => {\n      this.currentTheme(); // Track theme changes\n      this.currentLanguage(); // Track language changes\n      if (this.tradingviewWidget?.nativeElement && this.scriptElement) {\n        this.reloadWidget();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.currentSymbol = this.initialSymbol || this.symbol;\n    this.currentInterval = this.initialResolution || this.currentInterval;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Detect symbol changes from parent component\n    if (changes['symbol'] && !changes['symbol'].firstChange) {\n      const newSymbol = changes['symbol'].currentValue;\n      if (newSymbol && newSymbol !== this.currentSymbol) {\n        this.currentSymbol = newSymbol;\n        // Only reload if widget is already initialized\n        if (this.tradingviewWidget?.nativeElement && this.scriptElement) {\n          this.reloadWidget();\n        }\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.loadTradingViewWidget();\n    }, 100);\n  }\n\n  ngOnDestroy(): void {\n    if (this.scriptElement) {\n      this.scriptElement.remove();\n      this.scriptElement = null;\n    }\n  }\n\n  updateSymbol(): void {\n    if (this.currentSymbol && this.currentSymbol.trim()) {\n      this.symbol = this.currentSymbol.trim();\n      this.symbolChange.emit(this.symbol);\n      this.reloadWidget();\n    }\n  }\n\n  updateInterval(): void {\n    this.reloadWidget();\n  }\n\n  updateConfig(): void {\n    this.reloadWidget();\n  }\n\n  toggleTheme(): void {\n    this.themeService.toggleTheme();\n  }\n\n  retry(): void {\n    this.error = null;\n    this.loadTradingViewWidget();\n  }\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  private loadTradingViewWidget(): void {\n    if (!this.tradingviewWidget?.nativeElement) {\n      this.error = this.translate('chart.containerNotFound');\n      return;\n    }\n\n    this.loading = true;\n    this.error = null;\n    this.createWidget();\n  }\n\n  private reloadWidget(): void {\n    if (this.scriptElement) {\n      this.scriptElement.remove();\n      this.scriptElement = null;\n    }\n\n    // Clear the container\n    if (this.tradingviewWidget?.nativeElement) {\n      this.tradingviewWidget.nativeElement.innerHTML = '';\n    }\n\n    // Recreate the widget\n    this.createWidget();\n  }\n\n  private createWidget(): void {\n    if (!this.tradingviewWidget?.nativeElement) {\n      this.error = this.translate('chart.widgetNotAvailable');\n      this.loading = false;\n      return;\n    }\n\n    const isDarkTheme = this.isDark();\n    const locale = this.translationService.getTradingViewLocale();\n\n    const config: TradingViewConfig = {\n      allow_symbol_change: this.allowSymbolChange,\n      calendar: this.showCalendar,\n      details: this.showDetails,\n      hide_side_toolbar: true,\n      hide_top_toolbar: false,\n      hide_legend: false,\n      hide_volume: !this.showVolume,\n      hotlist: false,\n      interval: this.currentInterval,\n      locale: locale,\n      save_image: true,\n      style: \"1\", // Candle style\n      symbol: this.currentSymbol,\n      theme: isDarkTheme ? \"dark\" : \"light\",\n      timezone: \"Etc/UTC\",\n      backgroundColor: isDarkTheme ? \"#1E1E1E\" : \"#FFFFFF\",\n      gridColor: isDarkTheme ? \"rgba(242, 242, 242, 0.06)\" : \"rgba(42, 46, 57, 0.06)\",\n      watchlist: [],\n      withdateranges: false,\n      compareSymbols: [],\n      studies: [],\n      autosize: true\n    };\n\n    try {\n      this.scriptElement = document.createElement('script');\n      this.scriptElement.type = 'text/javascript';\n      this.scriptElement.src = 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js';\n      this.scriptElement.async = true;\n\n      this.scriptElement.innerHTML = JSON.stringify(config);\n\n      this.scriptElement.onload = () => {\n        this.loading = false;\n        console.log('TradingView widget loaded successfully');\n      };\n\n      this.scriptElement.onerror = () => {\n        this.loading = false;\n        this.error = this.translate('chart.failedToLoadWidget');\n      };\n\n      this.tradingviewWidget.nativeElement.appendChild(this.scriptElement);\n\n      // Set loading timeout\n      setTimeout(() => {\n        if (this.loading) {\n          this.loading = false;\n        }\n      }, 1000);\n\n    } catch (error) {\n      this.loading = false;\n      this.error = this.translate('chart.errorInitializing');\n      console.error('TradingView widget error:', error);\n    }\n  }\n}\n","<div class=\"trading-chart-container\" [class.dark-theme]=\"isDark()\">\n  <!-- Chart Controls -->\n  <div class=\"chart-controls\">\n    <div class=\"symbol-selector\">\n      <input\n        type=\"text\"\n        class=\"symbol-input\"\n        [(ngModel)]=\"currentSymbol\"\n        [placeholder]=\"translate('chart.enterSymbolExample')\"\n        (keyup.enter)=\"updateSymbol()\"\n      >\n      <ui-button variant=\"primary\" size=\"small\" (clicked)=\"updateSymbol()\">\n        📈 {{ translate('chart.loadSymbol') }}\n      </ui-button>\n    </div>\n\n    <div class=\"timeframe-selector\">\n      <select [(ngModel)]=\"currentInterval\" (change)=\"updateInterval()\">\n        <option value=\"1\">1m</option>\n        <option value=\"5\">5m</option>\n        <option value=\"15\">15m</option>\n        <option value=\"30\">30m</option>\n        <option value=\"60\">1h</option>\n        <option value=\"240\">4h</option>\n        <option value=\"D\">1D</option>\n        <option value=\"W\">1W</option>\n        <option value=\"M\">1M</option>\n      </select>\n    </div>\n\n    <div class=\"chart-options\">\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"showVolume\" (change)=\"updateConfig()\"> {{ translate('chart.volume') }}\n      </label>\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"showDetails\" (change)=\"updateConfig()\"> {{ translate('chart.details') }}\n      </label>\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"showCalendar\" (change)=\"updateConfig()\"> {{ translate('chart.calendar') }}\n      </label>\n      <label>\n        <input type=\"checkbox\" [(ngModel)]=\"allowSymbolChange\" (change)=\"updateConfig()\"> {{ translate('chart.symbolChange') }}\n      </label>\n    </div>\n\n    <ui-button variant=\"ghost\" size=\"small\" (clicked)=\"toggleTheme()\">\n      {{ isDark() ? '☀️' : '🌙' }}\n    </ui-button>\n  </div>\n\n  <!-- TradingView Widget Container -->\n  <div class=\"chart-wrapper\">\n    <div #tradingviewWidget class=\"tradingview-widget-container\">\n      <div class=\"tradingview-widget-container__widget\"></div>\n      <div class=\"tradingview-widget-copyright\">\n        <a href=\"https://www.tradingview.com/\" rel=\"noopener nofollow\" target=\"_blank\">\n          <span class=\"blue-text\">Track all markets on TradingView</span>\n        </a>\n      </div>\n    </div>\n\n    <!-- Loading overlay -->\n    <div *ngIf=\"loading\" class=\"loading-overlay\">\n      <div class=\"loading-spinner\"></div>\n      <span>{{ translate('chart.loadingTradingView') }}</span>\n    </div>\n\n    <!-- Error message -->\n    <div *ngIf=\"error\" class=\"error-overlay\">\n      <span>{{ error }}</span>\n      <ui-button variant=\"primary\" size=\"medium\" (clicked)=\"retry()\">🔄 {{ translate('button.retry') }}</ui-button>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n// TradingView-compatible interfaces based on official documentation\n\n// TradingView LibrarySymbolInfo structure\nexport interface LibrarySymbolInfo {\n  name: string;\n  full_name: string;\n  description: string;\n  exchange: string;\n  type: string;\n  session: string;\n  timezone: string;\n  ticker?: string;\n  minmov: number;\n  pricescale: number;\n  has_intraday: boolean;\n  has_daily: boolean;\n  has_weekly_and_monthly: boolean;\n  supported_resolutions: string[];\n  intraday_multipliers: string[];\n  data_status: string;\n  currency_code?: string;\n}\n\n// Search result symbol structure\nexport interface SearchSymbolResultItem {\n  symbol: string;\n  full_name: string;\n  description: string;\n  exchange: string;\n  type: string;\n}\n\n// Basic symbol info for API responses\nexport interface ChartSymbol {\n  symbol: string;\n  full_name: string;\n  description: string;\n  exchange: string;\n  type: string;\n  currency_code?: string;\n}\n\n// TradingView DatafeedConfiguration structure\nexport interface DatafeedConfiguration {\n  supported_resolutions: string[];\n  supports_group_request?: boolean;\n  supports_marks?: boolean;\n  supports_search?: boolean;\n  supports_timescale_marks?: boolean;\n  supports_time?: boolean;\n  exchanges?: Exchange[];\n  symbols_types?: SymbolType[];\n  currency_codes?: string[];\n}\n\nexport interface Exchange {\n  value: string;\n  name: string;\n  desc: string;\n}\n\nexport interface SymbolType {\n  name: string;\n  value: string;\n}\n\nexport interface ChartDataRequest {\n  symbol: string;\n  resolution: string;\n  from: number;\n  to: number;\n  firstDataRequest?: boolean;\n}\n\n// TradingView Bar structure\nexport interface Bar {\n  time: number; // Unix timestamp in milliseconds\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume?: number;\n}\n\n// TradingView GetBarsResult structure\nexport interface GetBarsResult {\n  bars: Bar[];\n  meta: HistoryMetadata;\n}\n\nexport interface HistoryMetadata {\n  noData?: boolean;\n  nextTime?: number;\n}\n\n// API response structure\nexport interface ChartDataResponse {\n  s: string; // status: 'ok', 'no_data', 'error'\n  t?: number[]; // time\n  o?: number[]; // open\n  h?: number[]; // high\n  l?: number[]; // low\n  c?: number[]; // close\n  v?: number[]; // volume\n  errmsg?: string;\n  nextTime?: number;\n}\n\nexport interface RealtimeData {\n  symbol: string;\n  price: number;\n  volume: number;\n  timestamp: number;\n  change: number;\n  changePercent: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n  private apiUrl = '/api/trading';\n  private realtimeDataSubject = new BehaviorSubject<RealtimeData | null>(null);\n  public realtimeData$ = this.realtimeDataSubject.asObservable();\n  private subscriberMap = new Map<string, any>();\n  private intervalMap = new Map<string, any>();\n\n  constructor(private http: HttpClient) {}\n\n  // Get TradingView datafeed configuration\n  getDatafeedConfiguration(): Observable<DatafeedConfiguration> {\n    return this.http.get<DatafeedConfiguration>(`${this.apiUrl}/config`).pipe(\n      catchError(error => {\n        console.error('Failed to get datafeed configuration:', error);\n        // Return default configuration with proper typing\n        const defaultConfig: DatafeedConfiguration = {\n          supported_resolutions: ['1', '5', '15', '30', '60', '240', '1D', '1W', '1M'],\n          supports_group_request: false,\n          supports_marks: false,\n          supports_search: true,\n          supports_timescale_marks: false,\n          supports_time: false,\n          exchanges: [{\n            value: 'BYBIT',\n            name: 'Bybit',\n            desc: 'Bybit Exchange'\n          }],\n          symbols_types: [{\n            name: 'crypto',\n            value: 'crypto'\n          }],\n          currency_codes: ['USDT', 'BTC', 'ETH']\n        };\n        return new Observable<DatafeedConfiguration>(subscriber => {\n          subscriber.next(defaultConfig);\n          subscriber.complete();\n        });\n      })\n    );\n  }\n\n  // Get TradingView configuration (legacy method)\n  getConfig(): Observable<DatafeedConfiguration> {\n    return this.getDatafeedConfiguration();\n  }\n\n  // Get available symbols\n  getSymbols(): Observable<ChartSymbol[]> {\n    return this.http.get<ChartSymbol[]>(`${this.apiUrl}/symbols`);\n  }\n\n  // Get specific symbol info\n  getSymbolInfo(symbol: string): Observable<ChartSymbol> {\n    return this.http.get<ChartSymbol>(`${this.apiUrl}/symbols?symbol=${symbol}`);\n  }\n\n  // Search symbols (legacy method)\n  searchSymbols(query: string): Observable<ChartSymbol[]> {\n    return this.getSymbols().pipe(\n      map(symbols => symbols.filter(symbol =>\n        symbol.symbol.toLowerCase().includes(query.toLowerCase()) ||\n        symbol.description.toLowerCase().includes(query.toLowerCase())\n      ))\n    );\n  }\n\n  // Search symbols with TradingView filters\n  searchSymbolsWithFilters(query: string, exchange?: string, symbolType?: string): Observable<SearchSymbolResultItem[]> {\n    return this.getSymbols().pipe(\n      map(symbols => {\n        let filtered = symbols.filter(symbol =>\n          symbol.symbol.toLowerCase().includes(query.toLowerCase()) ||\n          symbol.description.toLowerCase().includes(query.toLowerCase())\n        );\n\n        if (exchange && exchange !== '') {\n          filtered = filtered.filter(symbol => symbol.exchange === exchange);\n        }\n\n        if (symbolType && symbolType !== '') {\n          filtered = filtered.filter(symbol => symbol.type === symbolType);\n        }\n\n        return filtered.map(symbol => ({\n          symbol: symbol.symbol,\n          full_name: symbol.full_name,\n          description: symbol.description,\n          exchange: symbol.exchange,\n          type: symbol.type\n        }));\n      }),\n      catchError(error => {\n        console.error('Symbol search failed:', error);\n        return new Observable<SearchSymbolResultItem[]>(subscriber => {\n          subscriber.next([]);\n          subscriber.complete();\n        });\n      })\n    );\n  }\n\n  // Get chart data for TradingView\n  getChartData(request: ChartDataRequest): Observable<ChartDataResponse> {\n    const params = new URLSearchParams({\n      symbol: request.symbol,\n      resolution: request.resolution,\n      from: request.from.toString(),\n      to: request.to.toString()\n    });\n\n    if (request.firstDataRequest) {\n      params.append('firstDataRequest', 'true');\n    }\n\n    return this.http.get<ChartDataResponse>(`${this.apiUrl}/chart?${params.toString()}`);\n  }\n\n  // Convert API response to TradingView bars format\n  private convertToBars(response: ChartDataResponse): GetBarsResult {\n    if (response.s === 'ok' && response.t && response.o && response.h && response.l && response.c) {\n      const bars: Bar[] = response.t.map((time: number, index: number) => ({\n        time: time * 1000, // Convert to milliseconds\n        open: response.o![index],\n        high: response.h![index],\n        low: response.l![index],\n        close: response.c![index],\n        volume: response.v ? response.v[index] : 0\n      }));\n\n      return {\n        bars,\n        meta: {\n          noData: false,\n          nextTime: response.nextTime\n        }\n      };\n    } else if (response.s === 'no_data') {\n      return {\n        bars: [],\n        meta: {\n          noData: true,\n          nextTime: response.nextTime\n        }\n      };\n    } else {\n      throw new Error(response.errmsg || 'Failed to get chart data');\n    }\n  }\n\n  private calculatePricescale(symbol: string): number {\n    // Determine appropriate price scale based on symbol\n    if (symbol.includes('USDT') || symbol.includes('USD')) {\n      return 100; // 2 decimal places\n    } else if (symbol.includes('BTC')) {\n      return 100000000; // 8 decimal places\n    }\n    return 10000; // 4 decimal places default\n  }\n\n  // Resolve symbol to TradingView LibrarySymbolInfo format\n  resolveSymbolInfo(symbolName: string): Observable<LibrarySymbolInfo> {\n    return this.getSymbolInfo(symbolName).pipe(\n      map(symbolInfo => {\n        const pricescale = this.calculatePricescale(symbolInfo.symbol);\n        return {\n          name: symbolInfo.symbol,\n          full_name: symbolInfo.full_name,\n          description: symbolInfo.description,\n          exchange: symbolInfo.exchange,\n          type: symbolInfo.type,\n          session: '24x7',\n          timezone: 'UTC',\n          ticker: symbolInfo.symbol,\n          minmov: 1,\n          pricescale: pricescale,\n          has_intraday: true,\n          has_daily: true,\n          has_weekly_and_monthly: true,\n          supported_resolutions: ['1', '5', '15', '30', '60', '240', '1D', '1W'],\n          intraday_multipliers: ['1', '5', '15', '30', '60', '240'],\n          data_status: 'streaming',\n          currency_code: symbolInfo.currency_code\n        };\n      }),\n      catchError(error => {\n        console.error('Symbol resolve failed:', error);\n        throw new Error(`Unknown symbol: ${symbolName}`);\n      })\n    );\n  }\n\n  // Get bars in TradingView format\n  getChartBars(symbolInfo: LibrarySymbolInfo, resolution: string, from: number, to: number, firstDataRequest: boolean = false): Observable<GetBarsResult> {\n    const request: ChartDataRequest = {\n      symbol: symbolInfo.name,\n      resolution: resolution,\n      from: from,\n      to: to,\n      firstDataRequest: firstDataRequest\n    };\n\n    return this.getChartData(request).pipe(\n      map(response => this.convertToBars(response)),\n      catchError(error => {\n        console.error('Chart data failed:', error);\n        throw error;\n      })\n    );\n  }\n\n  // Create TradingView datafeed with enhanced error handling\n  createDatafeed() {\n    return {\n      onReady: (callback: (config: DatafeedConfiguration) => void) => {\n        this.getDatafeedConfiguration().subscribe({\n          next: (config) => {\n            console.log('Datafeed configuration loaded:', config);\n            callback(config);\n          },\n          error: (error) => {\n            console.error('Failed to get datafeed configuration:', error);\n            // Fallback configuration\n            callback({\n              supported_resolutions: ['1', '5', '15', '30', '60', '240', '1D', '1W'],\n              supports_group_request: false,\n              supports_marks: false,\n              supports_search: true,\n              supports_timescale_marks: false,\n              supports_time: false\n            });\n          }\n        });\n      },\n\n      searchSymbols: (userInput: string, exchange: string, symbolType: string, onResult: (symbols: SearchSymbolResultItem[]) => void) => {\n        this.searchSymbolsWithFilters(userInput, exchange, symbolType).subscribe({\n          next: (symbols) => {\n            console.log(`Search results for \"${userInput}\":`, symbols.length, 'symbols found');\n            onResult(symbols);\n          },\n          error: (error) => {\n            console.error('Symbol search failed:', error);\n            onResult([]);\n          }\n        });\n      },\n\n      resolveSymbol: (symbolName: string, onResolve: (symbolInfo: LibrarySymbolInfo) => void, onError: (error: string) => void) => {\n        console.log('Resolving symbol:', symbolName);\n        this.resolveSymbolInfo(symbolName).subscribe({\n          next: (symbolInfo) => {\n            console.log('Symbol resolved:', symbolInfo);\n            onResolve(symbolInfo);\n          },\n          error: (error) => {\n            console.error('Symbol resolve failed:', error);\n            onError(`Unknown symbol: ${symbolName}`);\n          }\n        });\n      },\n\n      getBars: (symbolInfo: LibrarySymbolInfo, resolution: string, periodParams: any, onResult: (bars: Bar[], meta: HistoryMetadata) => void, onError: (error: string) => void) => {\n        console.log('Getting bars for:', symbolInfo.name, resolution, periodParams);\n        this.getChartBars(symbolInfo, resolution, periodParams.from, periodParams.to, periodParams.firstDataRequest).subscribe({\n          next: (result) => {\n            console.log('Bars loaded:', result.bars.length, 'bars');\n            onResult(result.bars, result.meta);\n          },\n          error: (error) => {\n            console.error('Failed to get bars:', error);\n            onError(error.message || 'Failed to fetch chart data');\n          }\n        });\n      },\n\n      subscribeBars: (symbolInfo: LibrarySymbolInfo, resolution: string, onRealtimeCallback: (bar: Bar) => void, listenerGUID: string, onResetCacheNeededCallback?: () => void) => {\n        console.log('Subscribing to real-time data:', symbolInfo.name, listenerGUID);\n\n        // Store subscriber info for cleanup\n        this.subscriberMap.set(listenerGUID, {\n          symbol: symbolInfo.name,\n          resolution: resolution,\n          callback: onRealtimeCallback\n        });\n\n        // Start polling for real-time data\n        this.startRealtimeSubscription(symbolInfo.name, resolution, onRealtimeCallback, listenerGUID);\n      },\n\n      unsubscribeBars: (listenerGUID: string) => {\n        console.log('Unsubscribing from real-time data:', listenerGUID);\n\n        // Clean up interval if exists\n        const intervalId = this.intervalMap.get(listenerGUID);\n        if (intervalId) {\n          clearInterval(intervalId);\n          this.intervalMap.delete(listenerGUID);\n        }\n\n        // Remove subscriber info\n        this.subscriberMap.delete(listenerGUID);\n      }\n    };\n  }\n\n  // Enhanced real-time subscription management\n  private startRealtimeSubscription(symbol: string, resolution: string, callback: (bar: Bar) => void, listenerGUID: string) {\n    // This is a simplified implementation using polling\n    // In production, you would use WebSocket connections for real-time data\n\n    const interval = setInterval(() => {\n      // Fetch latest price data\n      const request: ChartDataRequest = {\n        symbol: symbol,\n        resolution: resolution,\n        from: Math.floor(Date.now() / 1000) - 300, // Last 5 minutes\n        to: Math.floor(Date.now() / 1000),\n        firstDataRequest: false\n      };\n\n      this.getChartData(request).subscribe({\n        next: (response) => {\n          if (response.s === 'ok' && response.t && response.t.length > 0) {\n            const lastIndex = response.t.length - 1;\n            const bar: Bar = {\n              time: response.t[lastIndex] * 1000, // Convert to milliseconds\n              open: response.o![lastIndex],\n              high: response.h![lastIndex],\n              low: response.l![lastIndex],\n              close: response.c![lastIndex],\n              volume: response.v ? response.v[lastIndex] : 0\n            };\n\n            // Only call callback if subscriber still exists\n            if (this.subscriberMap.has(listenerGUID)) {\n              callback(bar);\n            }\n          }\n        },\n        error: (error) => {\n          console.error('Real-time data error for', symbol, ':', error);\n        }\n      });\n    }, 5000); // Update every 5 seconds\n\n    // Store interval ID for cleanup\n    this.intervalMap.set(listenerGUID, interval);\n  }\n\n  // Cleanup all subscriptions (call on component destroy)\n  cleanupAllSubscriptions() {\n    this.intervalMap.forEach(intervalId => clearInterval(intervalId));\n    this.intervalMap.clear();\n    this.subscriberMap.clear();\n  }\n\n  // Get current market data\n  getCurrentPrice(symbol: string): Observable<number> {\n    return this.getChartData({\n      symbol: symbol,\n      resolution: '1',\n      from: Math.floor(Date.now() / 1000) - 60,\n      to: Math.floor(Date.now() / 1000)\n    }).pipe(\n      map(response => {\n        if (response.s === 'ok' && response.c && response.c.length > 0) {\n          return response.c[response.c.length - 1];\n        }\n        throw new Error('No price data available');\n      }),\n      catchError(error => {\n        console.error('Failed to get current price:', error);\n        throw error;\n      })\n    );\n  }\n\n  // Helper method to format price with appropriate decimal places\n  formatPrice(price: number, symbol: string): string {\n    // Default to 2 decimal places for USDT pairs, adjust as needed\n    const decimals = symbol.includes('USDT') ? 2 : 8;\n    return price.toFixed(decimals);\n  }\n\n  // Helper method to format volume\n  formatVolume(volume: number): string {\n    if (volume >= 1e9) {\n      return (volume / 1e9).toFixed(2) + 'B';\n    } else if (volume >= 1e6) {\n      return (volume / 1e6).toFixed(2) + 'M';\n    } else if (volume >= 1e3) {\n      return (volume / 1e3).toFixed(2) + 'K';\n    }\n    return volume.toFixed(2);\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nexport interface TickerData {\n  type: 'ticker' | 'connected' | 'error';\n  symbol: string;\n  price?: number;\n  volume?: number;\n  change24h?: number;\n  bid?: number;\n  ask?: number;\n  high24h?: number;\n  low24h?: number;\n  timestamp: number;\n  message?: string;\n}\n\nexport interface PriceUpdate {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RealtimeService implements OnDestroy {\n  private eventSources = new Map<string, EventSource>();\n  private destroy$ = new Subject<void>();\n\n  // Subject for all ticker updates\n  private tickerSubject = new BehaviorSubject<TickerData | null>(null);\n  public ticker$ = this.tickerSubject.asObservable().pipe(\n    filter(data => data !== null)\n  ) as Observable<TickerData>;\n\n  // Subject for price updates only\n  private priceSubject = new BehaviorSubject<PriceUpdate | null>(null);\n  public price$ = this.priceSubject.asObservable().pipe(\n    filter(data => data !== null)\n  ) as Observable<PriceUpdate>;\n\n  // Connection status\n  private connectionStatusSubject = new BehaviorSubject<{ [symbol: string]: boolean }>({});\n  public connectionStatus$ = this.connectionStatusSubject.asObservable();\n\n  private baseUrl = '/api/trading';\n\n  constructor() {}\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.closeAllConnections();\n  }\n\n  // Subscribe to real-time data for a symbol\n  subscribeToSymbol(symbol: string): Observable<TickerData> {\n    const normalizedSymbol = symbol.toUpperCase();\n\n    // Close existing connection if any\n    this.unsubscribeFromSymbol(normalizedSymbol);\n\n    // Create new EventSource connection\n    const eventSource = new EventSource(`${this.baseUrl}/stream?symbol=${normalizedSymbol}`);\n    this.eventSources.set(normalizedSymbol, eventSource);\n\n    // Update connection status\n    this.updateConnectionStatus(normalizedSymbol, false);\n\n    return new Observable<TickerData>(observer => {\n      eventSource.onopen = () => {\n        console.log(`Connected to real-time stream for ${normalizedSymbol}`);\n        this.updateConnectionStatus(normalizedSymbol, true);\n      };\n\n      eventSource.onmessage = (event) => {\n        try {\n          const data: TickerData = JSON.parse(event.data);\n\n          // Emit to main ticker subject\n          this.tickerSubject.next(data);\n\n          // Emit to specific symbol observer\n          observer.next(data);\n\n          // If it's ticker data, also emit to price subject\n          if (data.type === 'ticker' && data.price !== undefined) {\n            const priceUpdate: PriceUpdate = {\n              symbol: data.symbol,\n              price: data.price,\n              change: 0, // Calculate based on previous price if needed\n              changePercent: data.change24h || 0,\n              volume: data.volume || 0,\n              timestamp: data.timestamp\n            };\n            this.priceSubject.next(priceUpdate);\n          }\n\n        } catch (error) {\n          console.error('Error parsing stream data:', error);\n          observer.error(error);\n        }\n      };\n\n      eventSource.onerror = (error) => {\n        console.error(`Stream error for ${normalizedSymbol}:`, error);\n        this.updateConnectionStatus(normalizedSymbol, false);\n\n        // Attempt to reconnect after a delay\n        setTimeout(() => {\n          if (this.eventSources.has(normalizedSymbol)) {\n            console.log(`Attempting to reconnect to ${normalizedSymbol}`);\n            this.subscribeToSymbol(normalizedSymbol);\n          }\n        }, 5000);\n\n        observer.error(error);\n      };\n\n      // Cleanup function\n      return () => {\n        this.unsubscribeFromSymbol(normalizedSymbol);\n      };\n    }).pipe(\n      takeUntil(this.destroy$)\n    );\n  }\n\n  // Unsubscribe from a specific symbol\n  unsubscribeFromSymbol(symbol: string): void {\n    const normalizedSymbol = symbol.toUpperCase();\n    const eventSource = this.eventSources.get(normalizedSymbol);\n\n    if (eventSource) {\n      eventSource.close();\n      this.eventSources.delete(normalizedSymbol);\n      this.updateConnectionStatus(normalizedSymbol, false);\n      console.log(`Unsubscribed from ${normalizedSymbol}`);\n    }\n  }\n\n  // Get real-time price for a specific symbol\n  getSymbolPrice$(symbol: string): Observable<PriceUpdate> {\n    return this.price$.pipe(\n      filter(update => update.symbol === symbol.toUpperCase())\n    );\n  }\n\n  // Get connection status for a symbol\n  isConnected(symbol: string): boolean {\n    const status = this.connectionStatusSubject.value;\n    return status[symbol.toUpperCase()] || false;\n  }\n\n  // Get all connected symbols\n  getConnectedSymbols(): string[] {\n    const status = this.connectionStatusSubject.value;\n    return Object.keys(status).filter(symbol => status[symbol]);\n  }\n\n  // Subscribe to multiple symbols\n  subscribeToMultipleSymbols(symbols: string[]): Observable<TickerData> {\n    symbols.forEach(symbol => {\n      this.subscribeToSymbol(symbol);\n    });\n\n    return this.ticker$;\n  }\n\n  // Close all connections\n  closeAllConnections(): void {\n    this.eventSources.forEach((eventSource, symbol) => {\n      eventSource.close();\n      console.log(`Closed connection for ${symbol}`);\n    });\n    this.eventSources.clear();\n    this.connectionStatusSubject.next({});\n  }\n\n  // Get current price from cache (last received price)\n  getCurrentPrice(symbol: string): number | null {\n    const currentTicker = this.tickerSubject.value;\n    if (currentTicker && currentTicker.symbol === symbol.toUpperCase() && currentTicker.price) {\n      return currentTicker.price;\n    }\n    return null;\n  }\n\n  // Get market summary for connected symbols\n  getMarketSummary(): Observable<{ [symbol: string]: PriceUpdate }> {\n    return this.price$.pipe(\n      map(update => {\n        // This is a simplified implementation\n        // In a real app, you'd maintain a map of all symbols\n        return { [update.symbol]: update };\n      })\n    );\n  }\n\n  // Helper method to format price change\n  formatPriceChange(change: number, changePercent: number): string {\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(2)} (${sign}${changePercent.toFixed(2)}%)`;\n  }\n\n  // Helper method to get price change color class\n  getPriceChangeClass(change: number): string {\n    if (change > 0) return 'price-up';\n    if (change < 0) return 'price-down';\n    return 'price-neutral';\n  }\n\n  private updateConnectionStatus(symbol: string, connected: boolean): void {\n    const currentStatus = this.connectionStatusSubject.value;\n    const newStatus = { ...currentStatus, [symbol]: connected };\n    this.connectionStatusSubject.next(newStatus);\n  }\n}"],"names":["CommonModule","FormsModule","TradingChartComponent","ChartDemoComponent","constructor","realtimeService","chartService","selectedSymbol","subscriptions","ngOnInit","console","log","ngOnDestroy","forEach","sub","unsubscribe","closeAllConnections","onSymbolChange","symbol","refreshChart","i0","ɵɵdirectiveInject","i1","RealtimeService","i2","ChartService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ChartDemoComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ChartDemoComponent_Template_button_click_11_listener","ChartDemoComponent_Template_app_trading_chart_symbolChange_13_listener","$event","ɵɵadvance","ɵɵproperty","styles","EventEmitter","effect","computed","ButtonComponent","ɵɵelement","ɵɵtextInterpolate","ctx_r1","translate","TradingChartComponent_div_50_Template_ui_button_clicked_3_listener","ɵɵrestoreView","_r3","ɵɵnextContext","ɵɵresetView","retry","error","ɵɵtextInterpolate1","themeService","translationService","initialSymbol","initialResolution","chartHeight","symbolChange","scriptElement","loading","currentSymbol","currentInterval","showVolume","showDetails","showCalendar","allowSymbolChange","currentTheme","isDark","currentLanguage","tradingviewWidget","nativeElement","reloadWidget","ngOnChanges","changes","firstChange","newSymbol","currentValue","ngAfterViewInit","setTimeout","loadTradingViewWidget","remove","updateSymbol","trim","emit","updateInterval","updateConfig","toggleTheme","key","createWidget","innerHTML","isDarkTheme","locale","getTradingViewLocale","config","allow_symbol_change","calendar","details","hide_side_toolbar","hide_top_toolbar","hide_legend","hide_volume","hotlist","interval","save_image","style","theme","timezone","backgroundColor","gridColor","watchlist","withdateranges","compareSymbols","studies","autosize","document","createElement","type","src","async","JSON","stringify","onload","onerror","appendChild","ThemeService","TranslationService","viewQuery","TradingChartComponent_Query","ɵɵtwoWayListener","TradingChartComponent_Template_input_ngModelChange_3_listener","_r1","ɵɵtwoWayBindingSet","TradingChartComponent_Template_input_keyup_enter_3_listener","TradingChartComponent_Template_ui_button_clicked_4_listener","TradingChartComponent_Template_select_ngModelChange_7_listener","TradingChartComponent_Template_select_change_7_listener","TradingChartComponent_Template_input_ngModelChange_28_listener","TradingChartComponent_Template_input_change_28_listener","TradingChartComponent_Template_input_ngModelChange_31_listener","TradingChartComponent_Template_input_change_31_listener","TradingChartComponent_Template_input_ngModelChange_34_listener","TradingChartComponent_Template_input_change_34_listener","TradingChartComponent_Template_input_ngModelChange_37_listener","TradingChartComponent_Template_input_change_37_listener","TradingChartComponent_Template_ui_button_clicked_39_listener","ɵɵtemplate","TradingChartComponent_div_49_Template","TradingChartComponent_div_50_Template","ɵɵclassProp","ɵɵtwoWayProperty","i3","NgIf","i4","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","NgControlStatus","NgModel","Observable","BehaviorSubject","map","catchError","http","apiUrl","realtimeDataSubject","realtimeData$","asObservable","subscriberMap","Map","intervalMap","getDatafeedConfiguration","get","pipe","defaultConfig","supported_resolutions","supports_group_request","supports_marks","supports_search","supports_timescale_marks","supports_time","exchanges","value","name","desc","symbols_types","currency_codes","subscriber","next","complete","getConfig","getSymbols","getSymbolInfo","searchSymbols","query","symbols","filter","toLowerCase","includes","description","searchSymbolsWithFilters","exchange","symbolType","filtered","full_name","getChartData","request","params","URLSearchParams","resolution","from","toString","to","firstDataRequest","append","convertToBars","response","s","t","o","h","l","c","bars","time","index","open","high","low","close","volume","v","meta","noData","nextTime","Error","errmsg","calculatePricescale","resolveSymbolInfo","symbolName","symbolInfo","pricescale","session","ticker","minmov","has_intraday","has_daily","has_weekly_and_monthly","intraday_multipliers","data_status","currency_code","getChartBars","createDatafeed","onReady","callback","subscribe","userInput","onResult","length","resolveSymbol","onResolve","onError","getBars","periodParams","result","message","subscribeBars","onRealtimeCallback","listenerGUID","onResetCacheNeededCallback","set","startRealtimeSubscription","unsubscribeBars","intervalId","clearInterval","delete","setInterval","Math","floor","Date","now","lastIndex","bar","has","cleanupAllSubscriptions","clear","getCurrentPrice","formatPrice","price","decimals","toFixed","formatVolume","ɵɵinject","HttpClient","factory","ɵfac","providedIn","Subject","takeUntil","eventSources","destroy$","tickerSubject","ticker$","data","priceSubject","price$","connectionStatusSubject","connectionStatus$","baseUrl","subscribeToSymbol","normalizedSymbol","toUpperCase","unsubscribeFromSymbol","eventSource","EventSource","updateConnectionStatus","observer","onopen","onmessage","event","parse","undefined","priceUpdate","change","changePercent","change24h","timestamp","getSymbolPrice$","update","isConnected","status","getConnectedSymbols","Object","keys","subscribeToMultipleSymbols","currentTicker","getMarketSummary","formatPriceChange","sign","getPriceChangeClass","connected","currentStatus","newStatus"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}