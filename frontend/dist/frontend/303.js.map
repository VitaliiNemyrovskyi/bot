{"version":3,"file":"303.js","mappings":"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","sources":["./src/app/components/trading/grid-bot-dashboard/grid-bot-dashboard.component.ts","./src/app/components/trading/grid-bot-dashboard/grid-bot-dashboard.component.html","./src/app/components/ui/table/table.component.ts","./src/app/components/ui/table/table.component.html"],"sourcesContent":["import { Component, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ButtonComponent } from '../../ui/button/button.component';\nimport { CardComponent, CardHeaderComponent, CardTitleComponent, CardSubtitleComponent, CardContentComponent, CardActionsComponent } from '../../ui/card/card.component';\nimport { TableComponent } from '../../ui/table/table.component';\nimport { TabsComponent, TabContentComponent } from '../../ui/tabs/tabs.component';\nimport { TableColumn } from '../../ui/table/table.component';\n\nimport { GridBotService } from '../../../services/grid-bot.service';\nimport { TranslationService } from '../../../services/translation.service';\n\nexport interface GridBot {\n  id: string;\n  name: string;\n  symbol: string;\n  status: 'RUNNING' | 'STOPPED' | 'PAUSED' | 'ERROR';\n  totalPnL: number;\n  totalTrades: number;\n  winRate: number;\n  createdAt: Date;\n  config: any;\n}\n\n\n@Component({\n  selector: 'app-grid-bot-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ButtonComponent,\n    CardComponent,\n    CardHeaderComponent,\n    CardTitleComponent,\n    CardSubtitleComponent,\n    CardContentComponent,\n    CardActionsComponent,\n    TableComponent,\n    TabsComponent,\n    TabContentComponent\n  ],\n  templateUrl: './grid-bot-dashboard.component.html',\n  styleUrls: ['./grid-bot-dashboard.component.css']\n})\nexport class GridBotDashboardComponent implements OnInit {\n  protected translationService = inject(TranslationService);\n  activeBots: GridBot[] = [];\n  strategies: any[] = [];\n  backtests: any[] = [];\n  backtestTableColumns: TableColumn[] = [];\n\n  constructor(\n    private gridBotService: GridBotService,\n    private router: Router\n  ) {}\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  ngOnInit() {\n    this.backtestTableColumns = [\n      { key: 'symbol', label: this.translate('dashboard.symbol'), sortable: true },\n      { key: 'timeframe', label: this.translate('dashboard.timeframe'), sortable: true },\n      { key: 'totalPnL', label: this.translate('dashboard.totalPnl'), sortable: true, type: 'currency' },\n      { key: 'winRate', label: this.translate('dashboard.winRate'), sortable: true, type: 'percentage' },\n      { key: 'maxDrawdown', label: this.translate('dashboard.maxDrawdown'), sortable: true, type: 'percentage' },\n      { key: 'createdAt', label: this.translate('dashboard.date'), sortable: true, type: 'date' },\n      { key: 'actions', label: this.translate('dashboard.actions'), sortable: false }\n    ];\n    this.loadActiveBots();\n    this.loadBacktests();\n  }\n\n  loadActiveBots() {\n    this.gridBotService.getBots().subscribe({\n      next: (bots) => {\n        this.activeBots = bots;\n      },\n      error: (error) => {\n        console.error('Failed to load bots');\n      }\n    });\n  }\n\n\n  loadBacktests() {\n    this.gridBotService.getBacktests().subscribe({\n      next: (backtests) => {\n        this.backtests = backtests;\n      },\n      error: (error) => {\n        console.error('Failed to load backtests');\n      }\n    });\n  }\n\n  openBotConfig() {\n    this.router.navigate(['/trading/bot/create']);\n  }\n\n  viewBot(bot: GridBot) {\n    this.router.navigate(['/trading/bot/view', bot.id]);\n  }\n\n  editBot(bot: GridBot) {\n    this.router.navigate(['/trading/bot/edit', bot.id]);\n  }\n\n  toggleBot(bot: GridBot) {\n    const action = bot.status === 'RUNNING' ? 'stop' : 'start';\n\n    this.gridBotService.updateBot(bot.id, action).subscribe({\n      next: () => {\n        console.log(`Bot ${action}ed successfully`);\n        this.loadActiveBots();\n      },\n      error: (error) => {\n        console.error(`Failed to ${action} bot`);\n      }\n    });\n  }\n\n  deleteBot(bot: GridBot) {\n    if (confirm(`Are you sure you want to delete bot ${bot.name || bot.symbol}?`)) {\n      this.gridBotService.deleteBot(bot.id).subscribe({\n        next: () => {\n          console.log('Bot deleted successfully');\n          this.loadActiveBots();\n        },\n        error: (error) => {\n          console.error('Failed to delete bot');\n        }\n      });\n    }\n  }\n\n  createStrategy() {\n    console.log('Create strategy - not implemented');\n  }\n\n  useStrategy(strategy: any) {\n    // Navigate to create page with strategy data as query parameter\n    this.router.navigate(['/trading/bot/create'], {\n      queryParams: { strategy: JSON.stringify(strategy) }\n    });\n  }\n\n  backtestStrategy(strategy: any) {\n    console.log('Backtest strategy - not implemented');\n  }\n\n  editStrategy(strategy: any) {\n    console.log('Edit strategy - not implemented');\n  }\n\n  deleteStrategy(strategy: any) {\n    console.log('Delete strategy - not implemented');\n  }\n\n  newBacktest() {\n    // Open backtest configuration dialog\n  }\n\n  viewBacktest(backtest: any) {\n    // TODO: Implement custom backtest results dialog\n    console.log('View backtest:', backtest);\n  }\n\n  deleteBacktest(backtest: any) {\n    if (confirm('Are you sure you want to delete this backtest?')) {\n      this.gridBotService.deleteBacktest(backtest.id).subscribe({\n        next: () => {\n          console.log('Backtest deleted successfully');\n          this.loadBacktests();\n        },\n        error: (error) => {\n          console.error('Failed to delete backtest');\n        }\n      });\n    }\n  }\n}","<div class=\"grid-bot-dashboard\">\n  <div class=\"header\">\n    <h1>{{ translate('dashboard.title') }}</h1>\n    <ui-button variant=\"primary\" (clicked)=\"openBotConfig()\">\n      {{ translate('dashboard.createNewBot') }}\n    </ui-button>\n  </div>\n\n  <ui-tabs [tabs]=\"[\n    {id: 'bots', label: translate('dashboard.tabActiveBots')},\n    {id: 'strategies', label: translate('dashboard.tabStrategies')},\n    {id: 'backtests', label: translate('dashboard.tabBacktests')}\n  ]\" activeTabId=\"bots\">\n\n    <!-- Active Bots Tab -->\n    <ui-tab-content tabId=\"bots\" [active]=\"true\">\n      <div class=\"tab-content\">\n        <div class=\"bots-grid\" *ngIf=\"activeBots.length > 0; else noBots\">\n          <ui-card *ngFor=\"let bot of activeBots\" class=\"bot-card\" [hover]=\"true\">\n            <ui-card-header>\n              <ui-card-title>{{ bot.name || bot.symbol }}</ui-card-title>\n              <ui-card-subtitle>\n                <span class=\"status-badge\" [class]=\"'status-' + bot.status.toLowerCase()\">\n                  {{ bot.status }}\n                </span>\n              </ui-card-subtitle>\n            </ui-card-header>\n\n            <ui-card-content>\n              <div class=\"bot-stats\">\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.symbol') }}</span>\n                  <span class=\"value\">{{ bot.symbol }}</span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.totalPnl') }}</span>\n                  <span class=\"value\" [class]=\"bot.totalPnL >= 0 ? 'positive' : 'negative'\">\n                    {{ bot.totalPnL | currency }}\n                  </span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.trades') }}</span>\n                  <span class=\"value\">{{ bot.totalTrades }}</span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.winRate') }}</span>\n                  <span class=\"value\">{{ bot.winRate }}%</span>\n                </div>\n              </div>\n            </ui-card-content>\n\n            <ui-card-actions>\n              <ui-button variant=\"ghost\" size=\"small\" (clicked)=\"viewBot(bot)\">\n                {{ translate('button.view') }}\n              </ui-button>\n              <ui-button variant=\"ghost\" size=\"small\" (clicked)=\"editBot(bot)\">\n                {{ translate('button.edit') }}\n              </ui-button>\n              <ui-button\n                [variant]=\"bot.status === 'RUNNING' ? 'warning' : 'primary'\"\n                size=\"small\"\n                (clicked)=\"toggleBot(bot)\">\n                {{ bot.status === 'RUNNING' ? translate('button.stop') : translate('button.start') }}\n              </ui-button>\n              <ui-button variant=\"danger\" size=\"small\" (clicked)=\"deleteBot(bot)\">\n                {{ translate('button.delete') }}\n              </ui-button>\n            </ui-card-actions>\n          </ui-card>\n        </div>\n\n        <ng-template #noBots>\n          <div class=\"empty-state\">\n            <div class=\"empty-icon\">🤖</div>\n            <h3>{{ translate('dashboard.noActiveBots') }}</h3>\n            <p>{{ translate('dashboard.createFirstBot') }}</p>\n            <ui-button variant=\"primary\" (clicked)=\"openBotConfig()\">\n              {{ translate('dashboard.createBot') }}\n            </ui-button>\n          </div>\n        </ng-template>\n      </div>\n    </ui-tab-content>\n\n    <!-- Strategies Tab -->\n    <ui-tab-content tabId=\"strategies\">\n      <div class=\"tab-content\">\n        <div class=\"strategies-header\">\n          <h2>{{ translate('dashboard.tradingStrategies') }}</h2>\n          <ui-button variant=\"primary\" (clicked)=\"createStrategy()\">\n            {{ translate('dashboard.createStrategy') }}\n          </ui-button>\n        </div>\n\n        <div class=\"strategies-grid\" *ngIf=\"strategies.length > 0; else noStrategies\">\n          <ui-card *ngFor=\"let strategy of strategies\" class=\"strategy-card\" [hover]=\"true\">\n            <ui-card-header>\n              <ui-card-title>{{ strategy.name }}</ui-card-title>\n              <ui-card-subtitle>{{ strategy.description || 'No description' }}</ui-card-subtitle>\n            </ui-card-header>\n\n            <ui-card-content>\n              <div class=\"strategy-stats\">\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.entryFilters') }}</span>\n                  <span class=\"value\">{{ strategy.entryFilters.length }}</span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.exitFilters') }}</span>\n                  <span class=\"value\">{{ strategy.exitFilters.length }}</span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.avgReturn') }}</span>\n                  <span class=\"value\" *ngIf=\"strategy.averageReturn\">\n                    {{ strategy.averageReturn }}%\n                  </span>\n                  <span class=\"value\" *ngIf=\"!strategy.averageReturn\">{{ translate('dashboard.na') }}</span>\n                </div>\n                <div class=\"stat\">\n                  <span class=\"label\">{{ translate('dashboard.timesUsed') }}</span>\n                  <span class=\"value\">{{ strategy.timesUsed }}</span>\n                </div>\n              </div>\n            </ui-card-content>\n\n            <ui-card-actions>\n              <ui-button variant=\"primary\" size=\"small\" (clicked)=\"useStrategy(strategy)\">\n                {{ translate('button.use') }}\n              </ui-button>\n              <ui-button variant=\"secondary\" size=\"small\" (clicked)=\"backtestStrategy(strategy)\">\n                {{ translate('button.backtest') }}\n              </ui-button>\n              <ui-button variant=\"ghost\" size=\"small\" (clicked)=\"editStrategy(strategy)\">\n                {{ translate('button.edit') }}\n              </ui-button>\n              <ui-button variant=\"danger\" size=\"small\" (clicked)=\"deleteStrategy(strategy)\">\n                {{ translate('button.delete') }}\n              </ui-button>\n            </ui-card-actions>\n          </ui-card>\n        </div>\n\n        <ng-template #noStrategies>\n          <div class=\"empty-state\">\n            <div class=\"empty-icon\">🧠</div>\n            <h3>{{ translate('dashboard.noStrategies') }}</h3>\n            <p>{{ translate('dashboard.createFirstStrategy') }}</p>\n            <ui-button variant=\"primary\" (clicked)=\"createStrategy()\">\n              {{ translate('dashboard.createStrategy') }}\n            </ui-button>\n          </div>\n        </ng-template>\n      </div>\n    </ui-tab-content>\n\n    <!-- Backtests Tab -->\n    <ui-tab-content tabId=\"backtests\">\n      <div class=\"tab-content\">\n        <div class=\"backtests-header\">\n          <h2>{{ translate('dashboard.backtestResults') }}</h2>\n          <ui-button variant=\"primary\" (clicked)=\"newBacktest()\">\n            {{ translate('dashboard.newBacktest') }}\n          </ui-button>\n        </div>\n\n        <div class=\"backtests-table\" *ngIf=\"backtests.length > 0; else noBacktests\">\n          <ui-table\n            [columns]=\"backtestTableColumns\"\n            [data]=\"backtests\"\n            [striped]=\"true\"\n            [hoverable]=\"true\"\n            (rowClick)=\"viewBacktest($event)\">\n          </ui-table>\n        </div>\n\n        <ng-template #noBacktests>\n          <div class=\"empty-state\">\n            <div class=\"empty-icon\">📊</div>\n            <h3>{{ translate('dashboard.noBacktests') }}</h3>\n            <p>{{ translate('dashboard.runFirstBacktest') }}</p>\n            <ui-button variant=\"primary\" (clicked)=\"newBacktest()\">\n              {{ translate('dashboard.newBacktest') }}\n            </ui-button>\n          </div>\n        </ng-template>\n      </div>\n    </ui-tab-content>\n  </ui-tabs>\n\n</div>","import { Component, Input, Output, EventEmitter, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslationService } from '../../../services/translation.service';\n\nexport interface TableColumn {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  type?: 'text' | 'number' | 'date' | 'currency' | 'percentage';\n  width?: string;\n  align?: 'left' | 'center' | 'right';\n}\n\nexport interface SortEvent {\n  column: string;\n  direction: 'asc' | 'desc' | null;\n}\n\n@Component({\n  selector: 'ui-table',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent {\n  @Input() columns: TableColumn[] = [];\n  @Input() data: any[] = [];\n  @Input() loading: boolean = false;\n  @Input() striped: boolean = true;\n  @Input() hoverable: boolean = true;\n  @Input() bordered: boolean = false;\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() stickyHeader: boolean = false;\n  @Input() maxHeight?: string;\n\n  @Output() sort = new EventEmitter<SortEvent>();\n  @Output() rowClick = new EventEmitter<any>();\n\n  currentSort: { column: string; direction: 'asc' | 'desc' | null } = { column: '', direction: null };\n\n  // Inject TranslationService\n  protected translationService = inject(TranslationService);\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  onSort(column: TableColumn): void {\n    if (!column.sortable) return;\n\n    let direction: 'asc' | 'desc' | null = 'asc';\n\n    if (this.currentSort.column === column.key) {\n      if (this.currentSort.direction === 'asc') {\n        direction = 'desc';\n      } else if (this.currentSort.direction === 'desc') {\n        direction = null;\n      }\n    }\n\n    this.currentSort = { column: column.key, direction };\n    this.sort.emit({ column: column.key, direction });\n  }\n\n  onRowClick(row: any): void {\n    this.rowClick.emit(row);\n  }\n\n  formatCellValue(value: any, column: TableColumn): string {\n    if (value === null || value === undefined) return '';\n\n    switch (column.type) {\n      case 'currency':\n        return typeof value === 'number' ? `$${value.toFixed(2)}` : value;\n      case 'percentage':\n        return typeof value === 'number' ? `${value.toFixed(2)}%` : value;\n      case 'number':\n        return typeof value === 'number' ? value.toLocaleString() : value;\n      case 'date':\n        return value instanceof Date ? value.toLocaleDateString() : value;\n      default:\n        return String(value);\n    }\n  }\n\n  getTableClasses(): string {\n    const classes = ['table'];\n\n    classes.push(`table-${this.size}`);\n\n    if (this.striped) {\n      classes.push('table-striped');\n    }\n\n    if (this.hoverable) {\n      classes.push('table-hoverable');\n    }\n\n    if (this.bordered) {\n      classes.push('table-bordered');\n    }\n\n    if (this.stickyHeader) {\n      classes.push('table-sticky-header');\n    }\n\n    return classes.join(' ');\n  }\n\n  getColumnHeaderClasses(column: TableColumn): string {\n    const classes = ['table-header'];\n\n    if (column.sortable) {\n      classes.push('table-header-sortable');\n    }\n\n    if (column.align) {\n      classes.push(`table-header-${column.align}`);\n    }\n\n    if (this.currentSort.column === column.key && this.currentSort.direction) {\n      classes.push(`table-header-sorted-${this.currentSort.direction}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  getCellClasses(column: TableColumn): string {\n    const classes = ['table-cell'];\n\n    if (column.align) {\n      classes.push(`table-cell-${column.align}`);\n    }\n\n    return classes.join(' ');\n  }\n\n  getSortIcon(column: TableColumn): string {\n    if (!column.sortable) return '';\n\n    if (this.currentSort.column === column.key) {\n      return this.currentSort.direction === 'asc' ? '↑' :\n             this.currentSort.direction === 'desc' ? '↓' : '↕';\n    }\n\n    return '↕';\n  }\n\n  trackByIndex(index: number, item: any): number {\n    return index;\n  }\n}","<div class=\"table-container\" [style.max-height]=\"maxHeight\">\n  <table [class]=\"getTableClasses()\">\n    <thead>\n      <tr>\n        <th\n          *ngFor=\"let column of columns\"\n          [class]=\"getColumnHeaderClasses(column)\"\n          [style.width]=\"column.width\"\n          (click)=\"onSort(column)\"\n        >\n          <div class=\"table-header-content\">\n            <span>{{ column.label }}</span>\n            <span *ngIf=\"column.sortable\" class=\"sort-icon\">{{ getSortIcon(column) }}</span>\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngIf=\"loading\" class=\"table-loading\">\n        <td [attr.colspan]=\"columns.length\" class=\"table-loading-cell\">\n          <div class=\"loading-content\">\n            <div class=\"loading-spinner\"></div>\n            <span>{{ translate('table.loading') }}</span>\n          </div>\n        </td>\n      </tr>\n      <tr *ngIf=\"!loading && data.length === 0\" class=\"table-empty\">\n        <td [attr.colspan]=\"columns.length\" class=\"table-empty-cell\">\n          {{ translate('table.noData') }}\n        </td>\n      </tr>\n      <tr\n        *ngFor=\"let row of data; trackBy: trackByIndex\"\n        class=\"table-row\"\n        (click)=\"onRowClick(row)\"\n      >\n        <td\n          *ngFor=\"let column of columns\"\n          [class]=\"getCellClasses(column)\"\n        >\n          {{ formatCellValue(row[column.key], column) }}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>"],"names":["inject","CommonModule","FormsModule","ReactiveFormsModule","ButtonComponent","CardComponent","CardHeaderComponent","CardTitleComponent","CardSubtitleComponent","CardContentComponent","CardActionsComponent","TableComponent","TabsComponent","TabContentComponent","TranslationService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","GridBotDashboardComponent_div_9_ui_card_1_Template_ui_button_clicked_31_listener","bot_r3","ɵɵrestoreView","_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","viewBot","GridBotDashboardComponent_div_9_ui_card_1_Template_ui_button_clicked_33_listener","editBot","GridBotDashboardComponent_div_9_ui_card_1_Template_ui_button_clicked_35_listener","toggleBot","GridBotDashboardComponent_div_9_ui_card_1_Template_ui_button_clicked_37_listener","deleteBot","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","name","symbol","ɵɵclassMap","status","toLowerCase","ɵɵtextInterpolate1","translate","totalPnL","ɵɵpipeBind1","totalTrades","winRate","ɵɵtemplate","GridBotDashboardComponent_div_9_ui_card_1_Template","activeBots","GridBotDashboardComponent_ng_template_10_Template_ui_button_clicked_7_listener","_r5","openBotConfig","strategy_r7","averageReturn","GridBotDashboardComponent_div_19_ui_card_1_span_21_Template","GridBotDashboardComponent_div_19_ui_card_1_span_22_Template","GridBotDashboardComponent_div_19_ui_card_1_Template_ui_button_clicked_29_listener","_r6","useStrategy","GridBotDashboardComponent_div_19_ui_card_1_Template_ui_button_clicked_31_listener","backtestStrategy","GridBotDashboardComponent_div_19_ui_card_1_Template_ui_button_clicked_33_listener","editStrategy","GridBotDashboardComponent_div_19_ui_card_1_Template_ui_button_clicked_35_listener","deleteStrategy","description","entryFilters","length","exitFilters","timesUsed","GridBotDashboardComponent_div_19_ui_card_1_Template","strategies","GridBotDashboardComponent_ng_template_20_Template_ui_button_clicked_7_listener","_r8","createStrategy","GridBotDashboardComponent_div_29_Template_ui_table_rowClick_1_listener","$event","_r9","viewBacktest","backtestTableColumns","backtests","GridBotDashboardComponent_ng_template_30_Template_ui_button_clicked_7_listener","_r10","newBacktest","GridBotDashboardComponent","constructor","gridBotService","router","translationService","key","ngOnInit","label","sortable","type","loadActiveBots","loadBacktests","getBots","subscribe","next","bots","error","console","getBacktests","navigate","bot","id","action","updateBot","log","confirm","strategy","queryParams","JSON","stringify","backtest","deleteBacktest","ɵɵdirectiveInject","i1","GridBotService","i2","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","GridBotDashboardComponent_Template","rf","ctx","GridBotDashboardComponent_Template_ui_button_clicked_4_listener","_r1","GridBotDashboardComponent_div_9_Template","GridBotDashboardComponent_ng_template_10_Template","ɵɵtemplateRefExtractor","GridBotDashboardComponent_Template_ui_button_clicked_17_listener","GridBotDashboardComponent_div_19_Template","GridBotDashboardComponent_ng_template_20_Template","GridBotDashboardComponent_Template_ui_button_clicked_27_listener","GridBotDashboardComponent_div_29_Template","GridBotDashboardComponent_ng_template_30_Template","ɵɵpureFunction3","_c3","ɵɵpureFunction1","_c0","_c1","_c2","noBots_r11","noStrategies_r12","noBacktests_r13","i3","NgForOf","NgIf","CurrencyPipe","styles","EventEmitter","ctx_r2","getSortIcon","column_r2","TableComponent_th_4_Template_th_click_0_listener","onSort","TableComponent_th_4_span_4_Template","getColumnHeaderClasses","ɵɵstyleProp","width","ɵɵelement","getCellClasses","column_r6","formatCellValue","row_r5","TableComponent_tr_8_Template_tr_click_0_listener","_r4","onRowClick","TableComponent_tr_8_td_1_Template","columns","data","loading","striped","hoverable","bordered","size","stickyHeader","sort","rowClick","currentSort","column","direction","emit","row","value","undefined","toFixed","toLocaleString","Date","toLocaleDateString","String","getTableClasses","classes","push","join","align","trackByIndex","index","item","inputs","maxHeight","outputs","TableComponent_Template","TableComponent_th_4_Template","TableComponent_tr_6_Template","TableComponent_tr_7_Template","TableComponent_tr_8_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}