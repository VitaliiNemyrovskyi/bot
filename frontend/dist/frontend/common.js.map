{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/services/grid-bot.service.ts","./src/environments/environment.ts","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface GridBotResponse {\n  success: boolean;\n  botId?: string;\n  status?: string;\n  error?: string;\n}\n\nexport interface BacktestRequest {\n  symbol: string;\n  timeframe: string;\n  startDate: string;\n  endDate: string;\n  gridConfig: {\n    upperPrice: number;\n    lowerPrice: number;\n    gridLevels: number;\n    orderSize: number;\n    maxActiveOrders?: number;\n    stopLoss?: number;\n    takeProfit?: number;\n  };\n  filters: {\n    entry: any[];\n    exit: any[];\n  };\n  initialBalance: number;\n}\n\nexport interface BacktestResponse {\n  success: boolean;\n  backtestId: string;\n  results: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GridBotService {\n  private apiUrl = `${environment.apiUrl}/trading`;\n\n  constructor(private http: HttpClient) {}\n\n  // Grid Bot Management\n  createBot(config: any): Observable<GridBotResponse> {\n    return this.http.post<GridBotResponse>(`${this.apiUrl}/grid-bot`, config);\n  }\n\n  getBots(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/grid-bot`);\n  }\n\n  getBot(botId: string): Observable<any> {\n    const params = new HttpParams().set('botId', botId);\n    return this.http.get<any>(`${this.apiUrl}/grid-bot`, { params });\n  }\n\n  updateBot(botId: string, action: string, config?: any): Observable<any> {\n    const payload = { botId, action, config };\n    return this.http.put<any>(`${this.apiUrl}/grid-bot`, payload);\n  }\n\n  deleteBot(botId: string): Observable<any> {\n    const params = new HttpParams().set('botId', botId);\n    return this.http.delete<any>(`${this.apiUrl}/grid-bot`, { params });\n  }\n\n  // Backtesting\n  runBacktest(request: BacktestRequest): Observable<BacktestResponse> {\n    return this.http.post<BacktestResponse>(`${this.apiUrl}/backtest`, request);\n  }\n\n  getBacktests(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/backtest`);\n  }\n\n  getBacktest(backtestId: string): Observable<any> {\n    const params = new HttpParams().set('backtestId', backtestId);\n    return this.http.get<any>(`${this.apiUrl}/backtest`, { params });\n  }\n\n  deleteBacktest(backtestId: string): Observable<any> {\n    const params = new HttpParams().set('backtestId', backtestId);\n    return this.http.delete<any>(`${this.apiUrl}/backtest`, { params });\n  }\n\n  // Market Data\n  getMarketData(symbol: string, timeframe: string = '1h', limit: number = 100): Observable<any[]> {\n    const params = new HttpParams()\n      .set('symbol', symbol)\n      .set('timeframe', timeframe)\n      .set('limit', limit.toString());\n\n    return this.http.get<any[]>(`${this.apiUrl}/market-data`, { params });\n  }\n\n  getCurrentPrice(symbol: string): Observable<{ price: number }> {\n    const params = new HttpParams().set('symbol', symbol);\n    return this.http.get<{ price: number }>(`${this.apiUrl}/market-data/price`, { params });\n  }\n\n  getSymbols(): Observable<string[]> {\n    return this.http.get<string[]>(`${this.apiUrl}/symbols`);\n  }\n\n  // Performance Analytics\n  getBotPerformance(botId: string, period: string = '24h'): Observable<any> {\n    const params = new HttpParams()\n      .set('botId', botId)\n      .set('period', period);\n\n    return this.http.get<any>(`${this.apiUrl}/performance`, { params });\n  }\n\n  getBotTrades(botId: string, limit: number = 100): Observable<any[]> {\n    const params = new HttpParams()\n      .set('botId', botId)\n      .set('limit', limit.toString());\n\n    return this.http.get<any[]>(`${this.apiUrl}/trades`, { params });\n  }\n\n  // Risk Management\n  validateGridConfig(config: any): Observable<{ valid: boolean; warnings?: string[]; errors?: string[] }> {\n    return this.http.post<any>(`${this.apiUrl}/validate-config`, config);\n  }\n\n  calculateGridMetrics(config: any): Observable<{\n    totalInvestment: number;\n    gridSpacing: number;\n    potentialProfit: number;\n    maxDrawdown: number;\n  }> {\n    return this.http.post<any>(`${this.apiUrl}/calculate-metrics`, config);\n  }\n\n  // Real-time Updates\n  subscribeToBot(botId: string): Observable<any> {\n    // This would typically use WebSocket or Server-Sent Events\n    // For now, we'll use polling\n    return this.http.get<any>(`${this.apiUrl}/bot-status/${botId}`);\n  }\n\n  // Portfolio Management\n  getPortfolioSummary(): Observable<{\n    totalValue: number;\n    totalPnL: number;\n    activeBots: number;\n    totalTrades: number;\n    avgWinRate: number;\n  }> {\n    return this.http.get<any>(`${this.apiUrl}/portfolio/summary`);\n  }\n\n  getPortfolioPerformance(period: string = '30d'): Observable<any[]> {\n    const params = new HttpParams().set('period', period);\n    return this.http.get<any[]>(`${this.apiUrl}/portfolio/performance`, { params });\n  }\n\n  // Alerts and Notifications\n  getBotAlerts(botId?: string): Observable<any[]> {\n    const params = botId ? new HttpParams().set('botId', botId) : new HttpParams();\n    return this.http.get<any[]>(`${this.apiUrl}/alerts`, { params });\n  }\n\n  markAlertAsRead(alertId: string): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/alerts/${alertId}/read`, {});\n  }\n\n  // Export/Import\n  exportBotConfig(botId: string): Observable<Blob> {\n    return this.http.get(`${this.apiUrl}/export/${botId}`, {\n      responseType: 'blob'\n    });\n  }\n\n  importBotConfig(file: File): Observable<any> {\n    const formData = new FormData();\n    formData.append('config', file);\n\n    return this.http.post<any>(`${this.apiUrl}/import`, formData);\n  }\n\n  // Advanced Analytics\n  getCorrelationAnalysis(symbols: string[]): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/analytics/correlation`, { symbols });\n  }\n\n  getOptimalGridParameters(symbol: string, period: string = '30d'): Observable<{\n    suggestedUpperPrice: number;\n    suggestedLowerPrice: number;\n    suggestedGridLevels: number;\n    suggestedOrderSize: number;\n    reasoning: string;\n  }> {\n    const params = new HttpParams()\n      .set('symbol', symbol)\n      .set('period', period);\n\n    return this.http.get<any>(`${this.apiUrl}/analytics/optimal-grid`, { params });\n  }\n}","import { appConfig } from '../app/config/app.config';\n\nexport const environment = {\n  production: false,\n  apiUrl: appConfig.api.baseUrl, // This maintains backward compatibility\n  googleClientId: 'your-google-client-id-local',\n  appName: appConfig.app.name + ' - Development'\n};","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"names":["HttpParams","environment","GridBotService","constructor","http","apiUrl","createBot","config","post","getBots","get","getBot","botId","params","set","updateBot","action","payload","put","deleteBot","delete","runBacktest","request","getBacktests","getBacktest","backtestId","deleteBacktest","getMarketData","symbol","timeframe","limit","toString","getCurrentPrice","getSymbols","getBotPerformance","period","getBotTrades","validateGridConfig","calculateGridMetrics","subscribeToBot","getPortfolioSummary","getPortfolioPerformance","getBotAlerts","markAlertAsRead","alertId","exportBotConfig","responseType","importBotConfig","file","formData","FormData","append","getCorrelationAnalysis","symbols","getOptimalGridParameters","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","appConfig","production","api","baseUrl","googleClientId","appName","app","name","asyncScheduler","timer","interval","scheduler"],"sourceRoot":"webpack:///","x_google_ignoreList":[2]}