{"version":3,"file":"968.js","mappings":"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","sources":["./src/app/components/testing/api-tester/api-tester.component.ts","./src/app/components/testing/api-tester/api-tester.component.html","./src/app/services/trading.service.ts"],"sourcesContent":["import { Component, OnInit, signal, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ExchangeCredentialsService } from '../../../services/exchange-credentials.service';\nimport { TradingService } from '../../../services/trading.service';\nimport { ExchangeType, EnvironmentType, ExchangeCredential } from '../../../models/exchange-credentials.model';\n\n/**\n * Order Type enumeration for exchange orders\n */\nexport enum OrderType {\n  MARKET = 'MARKET',\n  LIMIT = 'LIMIT'\n}\n\n/**\n * Order Side enumeration\n */\nexport enum OrderSide {\n  BUY = 'BUY',\n  SELL = 'SELL'\n}\n\n/**\n * Position Side enumeration for futures trading\n */\nexport enum PositionSide {\n  LONG = 'LONG',\n  SHORT = 'SHORT'\n}\n\n/**\n * Exchange Order Request interface\n */\nexport interface ExchangeOrderRequest {\n  exchange: ExchangeType;\n  credentialId: string;\n  symbol: string;\n  side: OrderSide;\n  positionSide: PositionSide;\n  type: OrderType;\n  quantity: number;\n  price?: number;\n}\n\n/**\n * Exchange Order Response interface\n */\nexport interface ExchangeOrderResponse {\n  success: boolean;\n  orderId?: string;\n  clientOrderId?: string;\n  status?: string;\n  message?: string;\n  data?: any;\n  error?: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n}\n\n/**\n * Request/Response Log Entry interface\n */\nexport interface RequestResponseLog {\n  timestamp: Date;\n  method: string;\n  endpoint: string;\n  requestBody: any;\n  requestHeaders?: Record<string, string>;\n  queryString?: string;\n  statusCode?: number;\n  responseBody?: any;\n  responseTime?: number;\n  success: boolean;\n  error?: string;\n}\n\n/**\n * API Tester Component\n *\n * A comprehensive API testing interface for exchange orders that mimics Swagger UI.\n * Allows users to test exchange order placement with detailed request/response inspection.\n *\n * Features:\n * - Exchange and credential selection\n * - Order parameter configuration (symbol, side, type, quantity, price)\n * - Real-time request preview with JSON syntax highlighting\n * - Response display with status codes and timing\n * - Copy-to-clipboard functionality\n * - Form validation and error handling\n * - Dark theme similar to Swagger UI\n */\n@Component({\n  selector: 'app-api-tester',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './api-tester.component.html',\n  styleUrls: ['./api-tester.component.scss']\n})\nexport class ApiTesterComponent implements OnInit {\n  // ============================================================================\n  // SIGNALS - Reactive State Management\n  // ============================================================================\n\n  readonly isLoading = signal<boolean>(false);\n  readonly error = signal<string | null>(null);\n  readonly currentLog = signal<RequestResponseLog | null>(null);\n  readonly logs = signal<RequestResponseLog[]>([]);\n\n  readonly selectedExchange = signal<ExchangeType | null>(null);\n  readonly selectedCredential = signal<ExchangeCredential | null>(null);\n\n  // ============================================================================\n  // COMPUTED SIGNALS - Derived State\n  // ============================================================================\n\n  readonly availableCredentials = computed(() => {\n    const exchange = this.selectedExchange();\n    if (!exchange) return [];\n\n    return this.credentialsService\n      .credentials()\n      .filter(cred => cred.exchange === exchange);\n  });\n\n  readonly canSubmit = computed(() => {\n    return this.orderForm?.valid &&\n           this.selectedExchange() !== null &&\n           this.selectedCredential() !== null &&\n           !this.isLoading();\n  });\n\n  readonly requestPreview = computed(() => {\n    if (!this.orderForm) return null;\n\n    const formValue = this.orderForm.value;\n    return {\n      exchange: this.selectedExchange(),\n      credentialId: this.selectedCredential()?.id,\n      symbol: formValue.symbol,\n      side: formValue.side,\n      positionSide: formValue.positionSide,\n      type: formValue.type,\n      quantity: formValue.quantity,\n      price: formValue.type === OrderType.LIMIT ? formValue.price : undefined\n    };\n  });\n\n  // ============================================================================\n  // ENUM REFERENCES - For Template Access\n  // ============================================================================\n\n  readonly ExchangeType = ExchangeType;\n  readonly OrderType = OrderType;\n  readonly OrderSide = OrderSide;\n  readonly PositionSide = PositionSide;\n\n  // ============================================================================\n  // FORM\n  // ============================================================================\n\n  orderForm!: FormGroup;\n\n  // ============================================================================\n  // CONFIGURATION\n  // ============================================================================\n\n  readonly exchangeOptions = [\n    { value: ExchangeType.BINGX, label: 'BingX', color: '#1E73FA' },\n    { value: ExchangeType.BYBIT, label: 'Bybit', color: '#F7A600' },\n    { value: ExchangeType.BINANCE, label: 'Binance', color: '#F3BA2F' }\n  ];\n\n  readonly orderTypeOptions = [\n    { value: OrderType.MARKET, label: 'Market', description: 'Execute at current market price' },\n    { value: OrderType.LIMIT, label: 'Limit', description: 'Execute at specified price or better' }\n  ];\n\n  readonly orderSideOptions = [\n    { value: OrderSide.BUY, label: 'Buy', color: '#22c55e' },\n    { value: OrderSide.SELL, label: 'Sell', color: '#ef4444' }\n  ];\n\n  readonly positionSideOptions = [\n    { value: PositionSide.LONG, label: 'Long', color: '#22c55e' },\n    { value: PositionSide.SHORT, label: 'Short', color: '#ef4444' }\n  ];\n\n  // ============================================================================\n  // CONSTRUCTOR\n  // ============================================================================\n\n  constructor(\n    private fb: FormBuilder,\n    private tradingService: TradingService,\n    private credentialsService: ExchangeCredentialsService\n  ) {\n    this.initializeForm();\n  }\n\n  // ============================================================================\n  // LIFECYCLE HOOKS\n  // ============================================================================\n\n  ngOnInit(): void {\n    // Load credentials from backend\n    this.credentialsService.fetchCredentials().subscribe({\n      error: (err) => {\n        console.error('Failed to load credentials:', err);\n        this.error.set('Failed to load exchange credentials. Please try again.');\n      }\n    });\n\n    // Watch for form value changes to enable/disable price field\n    this.orderForm.get('type')?.valueChanges.subscribe(type => {\n      const priceControl = this.orderForm.get('price');\n      if (type === OrderType.LIMIT) {\n        priceControl?.setValidators([Validators.required, Validators.min(0.00000001)]);\n        priceControl?.enable();\n      } else {\n        priceControl?.clearValidators();\n        priceControl?.disable();\n      }\n      priceControl?.updateValueAndValidity();\n    });\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS - Initialization\n  // ============================================================================\n\n  private initializeForm(): void {\n    this.orderForm = this.fb.group({\n      symbol: ['BTC-USDT', [Validators.required, Validators.pattern(/^[A-Z0-9]+-[A-Z0-9]+$/)]],\n      side: [OrderSide.BUY, Validators.required],\n      positionSide: [PositionSide.LONG, Validators.required],\n      type: [OrderType.MARKET, Validators.required],\n      quantity: [0.001, [Validators.required, Validators.min(0.00000001)]],\n      price: [{ value: null, disabled: true }]\n    });\n  }\n\n  // ============================================================================\n  // PUBLIC METHODS - User Actions\n  // ============================================================================\n\n  /**\n   * Handle exchange selection change\n   */\n  onExchangeChange(exchange: ExchangeType): void {\n    this.selectedExchange.set(exchange);\n    this.selectedCredential.set(null); // Reset credential when exchange changes\n    this.error.set(null);\n  }\n\n  /**\n   * Handle credential selection change\n   */\n  onCredentialChange(credentialId: string): void {\n    const credential = this.availableCredentials().find(c => c.id === credentialId);\n    this.selectedCredential.set(credential || null);\n    this.error.set(null);\n  }\n\n  /**\n   * Submit order request\n   */\n  async onSubmitRequest(): Promise<void> {\n    if (!this.canSubmit()) {\n      return;\n    }\n\n    this.error.set(null);\n    this.isLoading.set(true);\n\n    const startTime = Date.now();\n    const requestData: ExchangeOrderRequest = {\n      exchange: this.selectedExchange()!,\n      credentialId: this.selectedCredential()!.id,\n      symbol: this.orderForm.value.symbol,\n      side: this.orderForm.value.side,\n      positionSide: this.orderForm.value.positionSide,\n      type: this.orderForm.value.type,\n      quantity: this.orderForm.value.quantity,\n      price: this.orderForm.value.type === OrderType.LIMIT ? this.orderForm.value.price : undefined\n    };\n\n    // Create log entry\n    const logEntry: RequestResponseLog = {\n      timestamp: new Date(),\n      method: 'POST',\n      endpoint: '/api/exchange-orders',\n      requestBody: requestData,\n      success: false\n    };\n\n    try {\n      // Call the trading service to place order\n      const response = await this.tradingService.placeExchangeOrder(requestData).toPromise();\n      const endTime = Date.now();\n\n      logEntry.statusCode = 200;\n      logEntry.responseBody = response;\n      logEntry.responseTime = endTime - startTime;\n      logEntry.success = response?.success ?? false;\n\n      this.currentLog.set(logEntry);\n      this.logs.update(logs => [logEntry, ...logs]);\n\n    } catch (err: any) {\n      const endTime = Date.now();\n      const httpError = err as HttpErrorResponse;\n\n      logEntry.statusCode = httpError.status || 500;\n      logEntry.responseBody = httpError.error || { message: httpError.message };\n      logEntry.responseTime = endTime - startTime;\n      logEntry.error = httpError.error?.error?.message || httpError.message || 'Unknown error occurred';\n      logEntry.success = false;\n\n      this.currentLog.set(logEntry);\n      this.logs.update(logs => [logEntry, ...logs]);\n      this.error.set(logEntry.error || 'Request failed');\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  /**\n   * Clear current request/response\n   */\n  clearCurrentLog(): void {\n    this.currentLog.set(null);\n    this.error.set(null);\n  }\n\n  /**\n   * Clear all logs\n   */\n  clearAllLogs(): void {\n    this.logs.set([]);\n    this.clearCurrentLog();\n  }\n\n  /**\n   * Copy text to clipboard\n   */\n  async copyToClipboard(text: string): Promise<void> {\n    try {\n      await navigator.clipboard.writeText(text);\n      // Could add a toast notification here\n      console.log('Copied to clipboard');\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  }\n\n  /**\n   * Copy request as JSON\n   */\n  async copyRequest(): Promise<void> {\n    const preview = this.requestPreview();\n    if (preview) {\n      await this.copyToClipboard(JSON.stringify(preview, null, 2));\n    }\n  }\n\n  /**\n   * Copy response as JSON\n   */\n  async copyResponse(): Promise<void> {\n    const log = this.currentLog();\n    if (log?.responseBody) {\n      await this.copyToClipboard(JSON.stringify(log.responseBody, null, 2));\n    }\n  }\n\n  /**\n   * Format JSON for display\n   */\n  formatJson(obj: any): string {\n    try {\n      return JSON.stringify(obj, null, 2);\n    } catch (err) {\n      return String(obj);\n    }\n  }\n\n  /**\n   * Get status code color class\n   */\n  getStatusCodeClass(statusCode?: number): string {\n    if (!statusCode) return 'status-unknown';\n    if (statusCode >= 200 && statusCode < 300) return 'status-success';\n    if (statusCode >= 400 && statusCode < 500) return 'status-client-error';\n    if (statusCode >= 500) return 'status-server-error';\n    return 'status-unknown';\n  }\n\n  /**\n   * Get status code label\n   */\n  getStatusCodeLabel(statusCode?: number): string {\n    if (!statusCode) return 'Unknown';\n\n    const labels: Record<number, string> = {\n      200: 'OK',\n      201: 'Created',\n      400: 'Bad Request',\n      401: 'Unauthorized',\n      403: 'Forbidden',\n      404: 'Not Found',\n      422: 'Unprocessable Entity',\n      429: 'Too Many Requests',\n      500: 'Internal Server Error',\n      502: 'Bad Gateway',\n      503: 'Service Unavailable'\n    };\n\n    return labels[statusCode] || statusCode.toString();\n  }\n\n  /**\n   * Get form control error message\n   */\n  getErrorMessage(controlName: string): string {\n    const control = this.orderForm.get(controlName);\n    if (!control || !control.errors || !control.touched) return '';\n\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['pattern']) return 'Invalid format (use format like BTC-USDT)';\n    if (control.errors['min']) return `Value must be greater than ${control.errors['min'].min}`;\n\n    return 'Invalid value';\n  }\n\n  /**\n   * Check if form control has error\n   */\n  hasError(controlName: string): boolean {\n    const control = this.orderForm.get(controlName);\n    return !!(control && control.invalid && control.touched);\n  }\n}\n","<div class=\"api-tester-container\">\n  <!-- Header -->\n  <div class=\"api-tester-header\">\n    <div class=\"header-content\">\n      <h1 class=\"page-title\">Exchange Order API Tester</h1>\n      <p class=\"page-description\">Test exchange order placement with detailed request/response inspection</p>\n    </div>\n    <div class=\"header-actions\">\n      <button\n        type=\"button\"\n        class=\"btn-secondary btn-sm\"\n        (click)=\"clearAllLogs()\"\n        [disabled]=\"logs().length === 0\"\n      >\n        Clear History\n      </button>\n    </div>\n  </div>\n\n  <!-- Configuration Panel -->\n  <div class=\"config-panel\">\n    <h2 class=\"section-title\">Configuration</h2>\n\n    <div class=\"config-grid\">\n      <!-- Exchange Selection -->\n      <div class=\"form-group\">\n        <label for=\"exchange\" class=\"form-label\">\n          Exchange\n          <span class=\"required\">*</span>\n        </label>\n        <select\n          id=\"exchange\"\n          class=\"form-control\"\n          [value]=\"selectedExchange()\"\n          (change)=\"onExchangeChange($any($event.target).value)\"\n        >\n          <option [value]=\"null\">Select Exchange...</option>\n          @for (option of exchangeOptions; track option.value) {\n            <option [value]=\"option.value\">{{ option.label }}</option>\n          }\n        </select>\n      </div>\n\n      <!-- Credential Selection -->\n      <div class=\"form-group\">\n        <label for=\"credential\" class=\"form-label\">\n          API Credential\n          <span class=\"required\">*</span>\n        </label>\n        <select\n          id=\"credential\"\n          class=\"form-control\"\n          [disabled]=\"!selectedExchange() || availableCredentials().length === 0\"\n          [value]=\"selectedCredential()?.id\"\n          (change)=\"onCredentialChange($any($event.target).value)\"\n        >\n          <option [value]=\"null\">Select Credential...</option>\n          @for (cred of availableCredentials(); track cred.id) {\n            <option [value]=\"cred.id\">\n              {{ cred.label || cred.apiKeyPreview }} ({{ cred.environment }})\n            </option>\n          }\n        </select>\n        @if (selectedExchange() && availableCredentials().length === 0) {\n          <p class=\"help-text error\">No credentials configured for this exchange</p>\n        }\n      </div>\n    </div>\n  </div>\n\n  <!-- Order Parameters Form -->\n  <form [formGroup]=\"orderForm\" class=\"parameters-panel\">\n    <h2 class=\"section-title\">Order Parameters</h2>\n\n    <div class=\"parameters-grid\">\n      <!-- Symbol -->\n      <div class=\"form-group\">\n        <label for=\"symbol\" class=\"form-label\">\n          Symbol\n          <span class=\"required\">*</span>\n        </label>\n        <input\n          id=\"symbol\"\n          type=\"text\"\n          formControlName=\"symbol\"\n          class=\"form-control\"\n          placeholder=\"BTC-USDT\"\n          [class.error]=\"hasError('symbol')\"\n        />\n        @if (hasError('symbol')) {\n          <p class=\"help-text error\">{{ getErrorMessage('symbol') }}</p>\n        }\n        <p class=\"help-text\">Format: BASE-QUOTE (e.g., BTC-USDT)</p>\n      </div>\n\n      <!-- Side -->\n      <div class=\"form-group\">\n        <label for=\"side\" class=\"form-label\">\n          Side\n          <span class=\"required\">*</span>\n        </label>\n        <select\n          id=\"side\"\n          formControlName=\"side\"\n          class=\"form-control\"\n        >\n          @for (option of orderSideOptions; track option.value) {\n            <option [value]=\"option.value\">{{ option.label }}</option>\n          }\n        </select>\n      </div>\n\n      <!-- Position Side -->\n      <div class=\"form-group\">\n        <label for=\"positionSide\" class=\"form-label\">\n          Position Side\n          <span class=\"required\">*</span>\n        </label>\n        <select\n          id=\"positionSide\"\n          formControlName=\"positionSide\"\n          class=\"form-control\"\n        >\n          @for (option of positionSideOptions; track option.value) {\n            <option [value]=\"option.value\">{{ option.label }}</option>\n          }\n        </select>\n      </div>\n\n      <!-- Order Type -->\n      <div class=\"form-group\">\n        <label for=\"type\" class=\"form-label\">\n          Order Type\n          <span class=\"required\">*</span>\n        </label>\n        <select\n          id=\"type\"\n          formControlName=\"type\"\n          class=\"form-control\"\n        >\n          @for (option of orderTypeOptions; track option.value) {\n            <option [value]=\"option.value\">{{ option.label }}</option>\n          }\n        </select>\n        <p class=\"help-text\">{{ orderForm.value.type === OrderType.MARKET ? 'Execute at current market price' : 'Execute at specified price or better' }}</p>\n      </div>\n\n      <!-- Quantity -->\n      <div class=\"form-group\">\n        <label for=\"quantity\" class=\"form-label\">\n          Quantity\n          <span class=\"required\">*</span>\n        </label>\n        <input\n          id=\"quantity\"\n          type=\"number\"\n          formControlName=\"quantity\"\n          class=\"form-control\"\n          placeholder=\"0.001\"\n          step=\"0.001\"\n          min=\"0\"\n          [class.error]=\"hasError('quantity')\"\n        />\n        @if (hasError('quantity')) {\n          <p class=\"help-text error\">{{ getErrorMessage('quantity') }}</p>\n        }\n      </div>\n\n      <!-- Price (for LIMIT orders) -->\n      <div class=\"form-group\">\n        <label for=\"price\" class=\"form-label\">\n          Price\n          @if (orderForm.value.type === OrderType.LIMIT) {\n            <span class=\"required\">*</span>\n          }\n        </label>\n        <input\n          id=\"price\"\n          type=\"number\"\n          formControlName=\"price\"\n          class=\"form-control\"\n          placeholder=\"Enter price\"\n          step=\"0.01\"\n          min=\"0\"\n          [class.error]=\"hasError('price')\"\n        />\n        @if (hasError('price')) {\n          <p class=\"help-text error\">{{ getErrorMessage('price') }}</p>\n        }\n        @if (orderForm.value.type !== OrderType.LIMIT) {\n          <p class=\"help-text\">Price is only required for LIMIT orders</p>\n        }\n      </div>\n    </div>\n\n    <!-- Submit Button -->\n    <div class=\"submit-section\">\n      <button\n        type=\"button\"\n        class=\"btn-primary btn-lg\"\n        (click)=\"onSubmitRequest()\"\n        [disabled]=\"!canSubmit()\"\n      >\n        @if (isLoading()) {\n          <span class=\"spinner\"></span>\n          Sending Request...\n        } @else {\n          <svg class=\"icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n          Send Request\n        }\n      </button>\n\n      @if (error()) {\n        <div class=\"error-banner\">\n          <svg class=\"icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"2\"/>\n            <path d=\"M12 8v4M12 16h.01\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n          </svg>\n          {{ error() }}\n        </div>\n      }\n    </div>\n  </form>\n\n  <!-- Request/Response Display -->\n  @if (currentLog()) {\n    <div class=\"log-display\">\n      <!-- Request Section -->\n      <div class=\"log-section request-section\">\n        <div class=\"section-header\">\n          <h3 class=\"section-title\">Request</h3>\n          <button\n            type=\"button\"\n            class=\"btn-icon\"\n            (click)=\"copyRequest()\"\n            title=\"Copy to clipboard\"\n          >\n            <svg class=\"icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\" stroke=\"currentColor\" stroke-width=\"2\"/>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\" stroke=\"currentColor\" stroke-width=\"2\"/>\n            </svg>\n          </button>\n        </div>\n\n        <div class=\"request-info\">\n          <span class=\"http-method\">{{ currentLog()!.method }}</span>\n          <span class=\"endpoint\">{{ currentLog()!.endpoint }}</span>\n        </div>\n\n        <div class=\"code-block\">\n          <pre><code>{{ formatJson(currentLog()!.requestBody) }}</code></pre>\n        </div>\n      </div>\n\n      <!-- Response Section -->\n      <div class=\"log-section response-section\">\n        <div class=\"section-header\">\n          <h3 class=\"section-title\">Response</h3>\n          <div class=\"header-actions\">\n            <span class=\"status-badge\" [ngClass]=\"getStatusCodeClass(currentLog()!.statusCode)\">\n              {{ currentLog()!.statusCode }} {{ getStatusCodeLabel(currentLog()!.statusCode) }}\n            </span>\n            @if (currentLog()!.responseTime) {\n              <span class=\"response-time\">{{ currentLog()!.responseTime }}ms</span>\n            }\n            <button\n              type=\"button\"\n              class=\"btn-icon\"\n              (click)=\"copyResponse()\"\n              title=\"Copy to clipboard\"\n            >\n              <svg class=\"icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\" stroke=\"currentColor\" stroke-width=\"2\"/>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\" stroke=\"currentColor\" stroke-width=\"2\"/>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"code-block\" [ngClass]=\"{'response-error': !currentLog()!.success}\">\n          <pre><code>{{ formatJson(currentLog()!.responseBody) }}</code></pre>\n        </div>\n      </div>\n    </div>\n  }\n\n  <!-- History Section -->\n  @if (logs().length > 1) {\n    <div class=\"history-section\">\n      <h2 class=\"section-title\">Request History</h2>\n\n      <div class=\"history-list\">\n        @for (log of logs(); track log.timestamp) {\n          @if (log !== currentLog()) {\n            <div class=\"history-item\" (click)=\"currentLog.set(log)\">\n              <div class=\"history-item-header\">\n                <span class=\"http-method\">{{ log.method }}</span>\n                <span class=\"endpoint\">{{ log.endpoint }}</span>\n                <span class=\"status-badge\" [ngClass]=\"getStatusCodeClass(log.statusCode)\">\n                  {{ log.statusCode }}\n                </span>\n              </div>\n              <div class=\"history-item-meta\">\n                <span class=\"timestamp\">{{ log.timestamp | date:'short' }}</span>\n                @if (log.responseTime) {\n                  <span class=\"response-time\">{{ log.responseTime }}ms</span>\n                }\n              </div>\n            </div>\n          }\n        }\n      </div>\n    </div>\n  }\n</div>\n","import { Injectable, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap, catchError, throwError } from 'rxjs';\nimport { getEndpointUrl, buildApiUrl } from '../config/app.config';\nimport { ExchangeType } from '../models/exchange-credentials.model';\n\nexport interface TradingPlatform {\n  id: string;\n  name: string;\n  description: string;\n  logo: string;\n  connected: boolean;\n  apiKeyLast4?: string;\n  connectedAt?: Date;\n  lastSync?: Date;\n}\n\nexport interface ApiKeyRequest {\n  platformId: string;\n  apiKey: string;\n  secretKey: string;\n  passphrase?: string;\n}\n\nexport interface BalanceData {\n  totalBalance: number;\n  availableBalance: number;\n  tradingBalance: number;\n  pendingOrders: number;\n  balanceChange: number;\n  platforms: PlatformBalance[];\n}\n\nexport interface PlatformBalance {\n  platformId: string;\n  platformName: string;\n  balance: number;\n  currency: string;\n  lastSync: Date;\n}\n\nexport interface TradeOrder {\n  id: string;\n  platformId: string;\n  symbol: string;\n  side: 'buy' | 'sell';\n  type: 'market' | 'limit';\n  amount: number;\n  price?: number;\n  status: 'pending' | 'filled' | 'cancelled';\n  createdAt: Date;\n  filledAt?: Date;\n}\n\n/**\n * Exchange Order Request for API testing\n */\nexport interface ExchangeOrderRequest {\n  exchange: ExchangeType;\n  credentialId: string;\n  symbol: string;\n  side: 'BUY' | 'SELL';\n  positionSide: 'LONG' | 'SHORT';\n  type: 'MARKET' | 'LIMIT';\n  quantity: number;\n  price?: number;\n}\n\n/**\n * Exchange Order Response\n */\nexport interface ExchangeOrderResponse {\n  success: boolean;\n  orderId?: string;\n  clientOrderId?: string;\n  status?: string;\n  message?: string;\n  data?: any;\n  error?: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TradingService {\n  private isLoadingBalance = signal<boolean>(false);\n  private isConnectingPlatform = signal<boolean>(false);\n\n  readonly isLoadingBalance$ = this.isLoadingBalance.asReadonly();\n  readonly isConnectingPlatform$ = this.isConnectingPlatform.asReadonly();\n\n  constructor(private http: HttpClient) {}\n\n\n  // Get available trading platforms\n  getPlatforms(): Observable<TradingPlatform[]> {\n    return this.http.get<TradingPlatform[]>(\n      getEndpointUrl('trading', 'platforms')\n    ).pipe(\n      catchError(error => {\n        console.error('Error fetching trading platforms:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Connect trading platform with API key\n  connectPlatform(apiKeyData: ApiKeyRequest): Observable<TradingPlatform> {\n    this.isConnectingPlatform.set(true);\n\n    return this.http.post<TradingPlatform>(\n      getEndpointUrl('trading', 'apiKeys'),\n      apiKeyData\n    ).pipe(\n      tap(() => this.isConnectingPlatform.set(false)),\n      catchError(error => {\n        this.isConnectingPlatform.set(false);\n        console.error('Error connecting platform:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Remove API key / disconnect platform\n  disconnectPlatform(platformId: string): Observable<void> {\n    return this.http.delete<void>(\n      `${getEndpointUrl('trading', 'apiKeys')}/${platformId}`\n    ).pipe(\n      catchError(error => {\n        console.error('Error disconnecting platform:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Test API key connection\n  testConnection(platformId: string): Observable<{ success: boolean; message: string }> {\n    return this.http.post<{ success: boolean; message: string }>(\n      `${getEndpointUrl('trading', 'apiKeys')}/${platformId}/test`,\n      {}\n    ).pipe(\n      catchError(error => {\n        console.error('Error testing connection:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Get balance data from all connected platforms\n  getBalance(): Observable<BalanceData> {\n    this.isLoadingBalance.set(true);\n\n    return this.http.get<BalanceData>(\n      getEndpointUrl('trading', 'balance')\n    ).pipe(\n      tap(() => this.isLoadingBalance.set(false)),\n      catchError(error => {\n        this.isLoadingBalance.set(false);\n        console.error('Error fetching balance:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Refresh balance data\n  refreshBalance(): Observable<BalanceData> {\n    return this.http.post<BalanceData>(\n      `${getEndpointUrl('trading', 'balance')}/refresh`,\n      {}\n    ).pipe(\n      catchError(error => {\n        console.error('Error refreshing balance:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Get trading orders\n  getOrders(platformId?: string): Observable<TradeOrder[]> {\n    const params = platformId ? `?platformId=${platformId}` : '';\n\n    return this.http.get<TradeOrder[]>(\n      `${getEndpointUrl('trading', 'orders')}${params}`\n    ).pipe(\n      catchError(error => {\n        console.error('Error fetching orders:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Update API key\n  updateApiKey(platformId: string, apiKeyData: Partial<ApiKeyRequest>): Observable<TradingPlatform> {\n    return this.http.put<TradingPlatform>(\n      `${getEndpointUrl('trading', 'apiKeys')}/${platformId}`,\n      apiKeyData\n    ).pipe(\n      catchError(error => {\n        console.error('Error updating API key:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  /**\n   * Place an exchange order (for API testing)\n   * This endpoint allows testing exchange order placement with detailed request/response logging\n   *\n   * @param orderRequest - The order request parameters\n   * @returns Observable of ExchangeOrderResponse\n   */\n  placeExchangeOrder(orderRequest: ExchangeOrderRequest): Observable<ExchangeOrderResponse> {\n    return this.http.post<ExchangeOrderResponse>(\n      buildApiUrl('/exchange-orders'),\n      orderRequest\n    ).pipe(\n      tap(response => {\n        console.log('Exchange order placed:', response);\n      }),\n      catchError(error => {\n        console.error('Error placing exchange order:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n}"],"names":["signal","computed","CommonModule","ReactiveFormsModule","Validators","ExchangeType","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","option_r1","value","ɵɵadvance","ɵɵtextInterpolate","label","cred_r2","id","ɵɵtextInterpolate2","apiKeyPreview","environment","ctx_r2","getErrorMessage","option_r4","option_r5","option_r6","ɵɵelement","ɵɵtextInterpolate1","error","currentLog","responseTime","ɵɵlistener","ApiTesterComponent_Conditional_93_Template_button_click_5_listener","ɵɵrestoreView","_r7","ɵɵnextContext","ɵɵresetView","copyRequest","ɵɵtemplate","ApiTesterComponent_Conditional_93_Conditional_25_Template","ApiTesterComponent_Conditional_93_Template_button_click_26_listener","copyResponse","method","endpoint","formatJson","requestBody","getStatusCodeClass","statusCode","getStatusCodeLabel","ɵɵconditional","ɵɵpureFunction1","_c0","success","responseBody","log_r9","ApiTesterComponent_Conditional_94_For_5_Conditional_0_Template_div_click_0_listener","_r8","$implicit","set","ApiTesterComponent_Conditional_94_For_5_Conditional_0_Conditional_12_Template","ɵɵpipeBind2","timestamp","ApiTesterComponent_Conditional_94_For_5_Conditional_0_Template","ɵɵrepeaterCreate","ApiTesterComponent_Conditional_94_For_5_Template","_forTrack2","ɵɵrepeater","logs","OrderType","OrderSide","PositionSide","ApiTesterComponent","constructor","fb","tradingService","credentialsService","isLoading","selectedExchange","selectedCredential","availableCredentials","exchange","credentials","filter","cred","canSubmit","orderForm","valid","requestPreview","formValue","credentialId","symbol","side","positionSide","type","quantity","price","LIMIT","undefined","exchangeOptions","BINGX","color","BYBIT","BINANCE","orderTypeOptions","MARKET","description","orderSideOptions","BUY","SELL","positionSideOptions","LONG","SHORT","initializeForm","ngOnInit","fetchCredentials","subscribe","err","console","get","valueChanges","priceControl","setValidators","required","min","enable","clearValidators","disable","updateValueAndValidity","group","pattern","disabled","onExchangeChange","onCredentialChange","credential","find","c","onSubmitRequest","_this","_asyncToGenerator","startTime","Date","now","requestData","logEntry","response","placeExchangeOrder","toPromise","endTime","update","httpError","status","message","clearCurrentLog","clearAllLogs","copyToClipboard","text","navigator","clipboard","writeText","log","_this2","preview","JSON","stringify","_this3","obj","String","labels","toString","controlName","control","errors","touched","hasError","invalid","ɵɵdirectiveInject","i1","FormBuilder","i2","TradingService","i3","ExchangeCredentialsService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ApiTesterComponent_Template","rf","ctx","ApiTesterComponent_Template_button_click_8_listener","ApiTesterComponent_Template_select_change_19_listener","$event","target","ApiTesterComponent_For_23_Template","_forTrack0","ApiTesterComponent_Template_select_change_29_listener","ApiTesterComponent_For_33_Template","_forTrack1","ApiTesterComponent_Conditional_34_Template","ApiTesterComponent_Conditional_45_Template","ApiTesterComponent_For_55_Template","ApiTesterComponent_For_63_Template","ApiTesterComponent_For_71_Template","ApiTesterComponent_Conditional_80_Template","ApiTesterComponent_Conditional_84_Template","ApiTesterComponent_Conditional_86_Template","ApiTesterComponent_Conditional_87_Template","ApiTesterComponent_Template_button_click_89_listener","ApiTesterComponent_Conditional_90_Template","ApiTesterComponent_Conditional_91_Template","ApiTesterComponent_Conditional_92_Template","ApiTesterComponent_Conditional_93_Template","ApiTesterComponent_Conditional_94_Template","length","tmp_5_0","ɵɵclassProp","i4","NgClass","DatePipe","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","NumberValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","FormGroupDirective","FormControlName","styles","tap","catchError","throwError","getEndpointUrl","buildApiUrl","http","isLoadingBalance","isConnectingPlatform","isLoadingBalance$","asReadonly","isConnectingPlatform$","getPlatforms","pipe","connectPlatform","apiKeyData","post","disconnectPlatform","platformId","delete","testConnection","getBalance","refreshBalance","getOrders","params","updateApiKey","put","orderRequest","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}