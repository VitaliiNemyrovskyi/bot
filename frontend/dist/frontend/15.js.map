{"version":3,"file":"15.js","mappings":"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","sources":["./src/app/components/trading/order-form/order-form.component.ts","./src/app/components/trading/order-form/order-form.component.html","./src/app/components/trading/trading-dashboard/trading-dashboard.component.ts","./src/app/components/trading/trading-dashboard/trading-dashboard.component.html","./src/app/services/manual-trading.service.ts","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js"],"sourcesContent":["import { Component, OnInit, OnDestroy, Input, Output, EventEmitter, signal, computed, effect } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\n\n// UI Components\nimport { ButtonComponent } from '../../ui/button/button.component';\nimport { InputComponent } from '../../ui/input/input.component';\nimport { SelectComponent, SelectOption } from '../../ui/select/select.component';\nimport { TabsComponent, Tab } from '../../ui/tabs/tabs.component';\n\n// Services\nimport { ManualTradingService } from '../../../services/manual-trading.service';\nimport { BybitService } from '../../../services/bybit.service';\n\n// Models\nimport { OrderRequest, OrderSide, OrderType, TimeInForce, Balance } from '../../../models/trading.model';\n\n/**\n * Margin mode type\n */\nexport type MarginMode = 'Cross' | 'Isolated';\n\n/**\n * Order type tabs\n */\nexport type OrderTypeTab = 'Limit' | 'Market' | 'Conditional';\n\n/**\n * TP/SL mode\n */\nexport type TPSLMode = 'Basic' | 'Advanced';\n\n/**\n * Quantity unit type\n */\nexport type QuantityUnit = 'BTC' | 'USDT';\n\n/**\n * Order form state interface\n */\nexport interface OrderFormState {\n  marginMode: MarginMode;\n  leverage: number;\n  orderType: OrderTypeTab;\n  price: number | null;\n  quantity: number | null;\n  quantityUnit: QuantityUnit;\n  quantityPercentage: number;\n  tpslEnabled: boolean;\n  tpslMode: TPSLMode;\n  takeProfit: number | null;\n  stopLoss: number | null;\n  postOnly: boolean;\n  reduceOnly: boolean;\n  timeInForce: TimeInForce;\n}\n\n/**\n * Trading Order Form Component\n *\n * Professional trading order form matching Bybit futures trading interface.\n * Features comprehensive order management, TP/SL configuration, margin control,\n * and account balance display.\n *\n * Key Features:\n * - Margin mode & leverage selection (1x-125x)\n * - Order type tabs: Limit, Market, Conditional\n * - Dynamic price input with \"Last\" quick-fill\n * - Quantity input with BTC/USDT unit selector\n * - Visual percentage slider (0-100%)\n * - TP/SL configuration with Basic/Advanced modes\n * - Post-Only & Reduce-Only options\n * - Time-in-Force settings\n * - Long/Short action buttons\n * - Unified Trading Account section with margin info\n * - Full theme support (dark/light modes)\n * - Real-time balance updates\n *\n * @example\n * ```html\n * <app-order-form></app-order-form>\n * ```\n */\n@Component({\n  selector: 'app-order-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ButtonComponent,\n    InputComponent,\n    SelectComponent,\n    TabsComponent\n  ],\n  templateUrl: './order-form.component.html',\n  styleUrls: ['./order-form.component.css']\n})\nexport class OrderFormComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  // Inputs\n  @Input() selectedSymbol: string = 'BTCUSDT';\n  @Input() currentPrice: number = 0;\n  @Input() set balance(value: Balance | null) {\n    this._balance.set(value);\n  }\n  get balance(): Balance | null {\n    return this._balance();\n  }\n\n  // Outputs\n  @Output() orderPlaced = new EventEmitter<any>();\n\n  // Form\n  orderForm: FormGroup;\n\n  // Signals for reactive state management\n  private _marginMode = signal<MarginMode>('Cross');\n  private _leverage = signal<number>(10);\n  private _orderType = signal<OrderTypeTab>('Limit');\n  private _quantityUnit = signal<QuantityUnit>('BTC');\n  private _quantityPercentage = signal<number>(0);\n  private _tpslEnabled = signal<boolean>(false);\n  private _tpslMode = signal<TPSLMode>('Basic');\n\n  // Getters and setters for ngModel binding\n  get marginMode() { return this._marginMode(); }\n  set marginMode(value: MarginMode) { this._marginMode.set(value); }\n\n  get leverage() { return this._leverage(); }\n  set leverage(value: number) { this._leverage.set(value); }\n\n  get orderType() { return this._orderType(); }\n  set orderType(value: OrderTypeTab) { this._orderType.set(value); }\n\n  get quantityUnit() { return this._quantityUnit(); }\n  set quantityUnit(value: QuantityUnit) { this._quantityUnit.set(value); }\n\n  get quantityPercentage() { return this._quantityPercentage(); }\n  set quantityPercentage(value: number) { this._quantityPercentage.set(value); }\n\n  get tpslEnabled() { return this._tpslEnabled(); }\n  set tpslEnabled(value: boolean) { this._tpslEnabled.set(value); }\n\n  get tpslMode() { return this._tpslMode(); }\n  set tpslMode(value: TPSLMode) { this._tpslMode.set(value); }\n\n  // Market data signals\n  lastPrice = signal<number>(99866.7);\n  private _balance = signal<Balance | null>(null);\n\n  // Computed values\n  orderValue = computed(() => {\n    const price = this.orderForm?.get('price')?.value || this.lastPrice();\n    const quantity = this.orderForm?.get('quantity')?.value || 0;\n    return price * quantity;\n  });\n\n  orderCost = computed(() => {\n    const value = this.orderValue();\n    const lev = this._leverage();\n    return value / lev;\n  });\n\n  liquidationPrice = computed(() => {\n    const price = this.orderForm?.get('price')?.value || this.lastPrice();\n    const lev = this._leverage();\n    const marginMode = this._marginMode();\n\n    // Simplified liquidation price calculation\n    // For long: liq = entry - (entry / leverage)\n    // For short: liq = entry + (entry / leverage)\n    const marginRatio = 1 / lev;\n    return {\n      long: price - (price * marginRatio),\n      short: price + (price * marginRatio)\n    };\n  });\n\n  availableBalance = computed(() => {\n    return this._balance()?.availableBalance || 0;\n  });\n\n  marginBalance = computed(() => {\n    return this._balance()?.walletBalance || 0;\n  });\n\n  // Dropdown options\n  marginModeOptions: SelectOption[] = [\n    { value: 'Cross', label: 'Cross' },\n    { value: 'Isolated', label: 'Isolated' }\n  ];\n\n  leverageOptions: SelectOption[] = Array.from({ length: 125 }, (_, i) => ({\n    value: i + 1,\n    label: `${i + 1}x`\n  }));\n\n  quantityUnitOptions: SelectOption[] = [\n    { value: 'BTC', label: 'BTC' },\n    { value: 'USDT', label: 'USDT' }\n  ];\n\n  timeInForceOptions: SelectOption[] = [\n    { value: 'GTC', label: 'Good-Till-Canceled' },\n    { value: 'IOC', label: 'IOC' },\n    { value: 'FOK', label: 'FOK' }\n  ];\n\n  lastPriceOptions: SelectOption[] = [\n    { value: 'last', label: 'Last' },\n    { value: 'mark', label: 'Mark' },\n    { value: 'index', label: 'Index' }\n  ];\n\n  // Order type tabs\n  orderTypeTabs: Tab[] = [\n    { id: 'Limit', label: 'Limit' },\n    { id: 'Market', label: 'Market' },\n    { id: 'Conditional', label: 'Conditional' }\n  ];\n\n  // Loading states from service\n  isPlacingOrder = this.tradingService.isPlacingOrder;\n  isLoadingBalance = this.tradingService.isLoadingBalance;\n\n  constructor(\n    private fb: FormBuilder,\n    private tradingService: ManualTradingService,\n    private bybitService: BybitService\n  ) {\n    // Initialize form\n    this.orderForm = this.fb.group({\n      price: [null, [Validators.required, Validators.min(0)]],\n      quantity: [null, [Validators.required, Validators.min(0)]],\n      takeProfit: [null, [Validators.min(0)]],\n      stopLoss: [null, [Validators.min(0)]],\n      postOnly: [false],\n      reduceOnly: [false],\n      timeInForce: ['GTC']\n    });\n\n    // Effect to update form validators based on order type\n    effect(() => {\n      const type = this._orderType();\n      const priceControl = this.orderForm.get('price');\n\n      if (type === 'Market') {\n        priceControl?.clearValidators();\n        priceControl?.setValue(null);\n      } else {\n        priceControl?.setValidators([Validators.required, Validators.min(0)]);\n      }\n      priceControl?.updateValueAndValidity();\n    });\n  }\n\n  ngOnInit(): void {\n    // Load initial data\n    this.loadBalance();\n    this.subscribeToMarketData();\n\n    // Subscribe to balance updates\n    this.tradingService.balance$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(balance => {\n        if (balance) {\n          this._balance.set(balance);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.bybitService.unsubscribeFromRealtimeTicker('BTCUSDT');\n  }\n\n  /**\n   * Load account balance\n   */\n  private loadBalance(): void {\n    this.tradingService.getAccountBalance('bybit')\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (balance) => {\n          this._balance.set(balance);\n        },\n        error: (error) => {\n          console.error('Failed to load balance:', error);\n        }\n      });\n  }\n\n  /**\n   * Subscribe to real-time market data\n   */\n  private subscribeToMarketData(): void {\n    this.bybitService.subscribeToRealtimeTicker('BTCUSDT')\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (ticker) => {\n          if (ticker?.lastPrice) {\n            this.lastPrice.set(parseFloat(ticker.lastPrice));\n          }\n        },\n        error: (error) => {\n          console.error('Failed to subscribe to ticker:', error);\n        }\n      });\n  }\n\n  /**\n   * Handle margin mode change\n   */\n  onMarginModeChange(mode: MarginMode): void {\n    this._marginMode.set(mode);\n  }\n\n  /**\n   * Handle leverage change\n   */\n  onLeverageChange(lev: number): void {\n    this._leverage.set(lev);\n  }\n\n  /**\n   * Handle order type tab change\n   */\n  onOrderTypeChange(type: string): void {\n    this._orderType.set(type as OrderTypeTab);\n  }\n\n  /**\n   * Handle quantity unit change\n   */\n  onQuantityUnitChange(unit: QuantityUnit): void {\n    this._quantityUnit.set(unit);\n    // Convert quantity when unit changes\n    this.convertQuantity(unit);\n  }\n\n  /**\n   * Fill price with last price\n   */\n  fillLastPrice(): void {\n    this.orderForm.patchValue({\n      price: this.lastPrice()\n    });\n  }\n\n  /**\n   * Handle quantity percentage slider change\n   */\n  onQuantityPercentageChange(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const percentage = parseInt(input.value, 10);\n    this._quantityPercentage.set(percentage);\n\n    // Calculate quantity based on percentage and available balance\n    this.calculateQuantityFromPercentage(percentage);\n  }\n\n  /**\n   * Calculate quantity from percentage\n   */\n  private calculateQuantityFromPercentage(percentage: number): void {\n    const available = this.availableBalance();\n    const price = this.orderForm.get('price')?.value || this.lastPrice();\n    const lev = this._leverage();\n\n    if (available && price) {\n      const totalValue = (available * percentage / 100) * lev;\n      const quantity = totalValue / price;\n\n      this.orderForm.patchValue({\n        quantity: this.roundQuantity(quantity)\n      });\n    }\n  }\n\n  /**\n   * Convert quantity when unit changes\n   */\n  private convertQuantity(newUnit: QuantityUnit): void {\n    const currentQuantity = this.orderForm.get('quantity')?.value;\n    const price = this.orderForm.get('price')?.value || this.lastPrice();\n\n    if (currentQuantity && price) {\n      let newQuantity: number;\n\n      if (newUnit === 'USDT') {\n        // Convert BTC to USDT\n        newQuantity = currentQuantity * price;\n      } else {\n        // Convert USDT to BTC\n        newQuantity = currentQuantity / price;\n      }\n\n      this.orderForm.patchValue({\n        quantity: this.roundQuantity(newQuantity)\n      });\n    }\n  }\n\n  /**\n   * Round quantity to appropriate decimal places\n   */\n  private roundQuantity(value: number): number {\n    const unit = this._quantityUnit();\n    const decimals = unit === 'BTC' ? 6 : 2;\n    return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);\n  }\n\n  /**\n   * Toggle TP/SL enabled state\n   */\n  toggleTPSL(): void {\n    this._tpslEnabled.update(enabled => !enabled);\n\n    if (!this._tpslEnabled()) {\n      this.orderForm.patchValue({\n        takeProfit: null,\n        stopLoss: null\n      });\n    }\n  }\n\n  /**\n   * Toggle TP/SL mode\n   */\n  toggleTPSLMode(): void {\n    this._tpslMode.update(mode => mode === 'Basic' ? 'Advanced' : 'Basic');\n  }\n\n  /**\n   * Fill TP/SL with last price\n   */\n  fillTPSLWithLast(field: 'takeProfit' | 'stopLoss'): void {\n    this.orderForm.patchValue({\n      [field]: this.lastPrice()\n    });\n  }\n\n  /**\n   * Calculate liquidation price\n   */\n  calculateLiquidationPrice(): void {\n    const liq = this.liquidationPrice();\n    alert(`Long Liquidation: ${liq.long.toFixed(2)} USDT\\nShort Liquidation: ${liq.short.toFixed(2)} USDT`);\n  }\n\n  /**\n   * Place long order\n   */\n  placeLongOrder(): void {\n    this.placeOrder('Buy');\n  }\n\n  /**\n   * Place short order\n   */\n  placeShortOrder(): void {\n    this.placeOrder('Sell');\n  }\n\n  /**\n   * Place order\n   */\n  private placeOrder(side: OrderSide): void {\n    if (this.orderForm.invalid) {\n      this.orderForm.markAllAsTouched();\n      return;\n    }\n\n    const formValue = this.orderForm.value;\n    const type = this._orderType();\n    const unit = this._quantityUnit();\n\n    // Calculate actual quantity in base currency (BTC)\n    let quantity = formValue.quantity;\n    if (unit === 'USDT') {\n      const price = formValue.price || this.lastPrice();\n      quantity = formValue.quantity / price;\n    }\n\n    const orderRequest = {\n      symbol: this.selectedSymbol,\n      side,\n      type: type === 'Conditional' ? 'Limit' : type,\n      quantity: this.roundQuantity(quantity),\n      price: type === 'Market' ? undefined : formValue.price,\n      takeProfit: this._tpslEnabled() ? formValue.takeProfit : undefined,\n      stopLoss: this._tpslEnabled() ? formValue.stopLoss : undefined,\n      timeInForce: formValue.timeInForce,\n      postOnly: formValue.postOnly,\n      reduceOnly: formValue.reduceOnly,\n      leverage: this._leverage()\n    };\n\n    // Emit the order request to parent component\n    this.orderPlaced.emit(orderRequest);\n    this.resetForm();\n  }\n\n  /**\n   * Reset form to default values\n   */\n  private resetForm(): void {\n    this.orderForm.reset({\n      price: null,\n      quantity: null,\n      takeProfit: null,\n      stopLoss: null,\n      postOnly: false,\n      reduceOnly: false,\n      timeInForce: 'GTC'\n    });\n    this._quantityPercentage.set(0);\n  }\n\n  /**\n   * Get form control error message\n   */\n  getErrorMessage(controlName: string): string {\n    const control = this.orderForm.get(controlName);\n\n    if (control?.hasError('required')) {\n      return 'This field is required';\n    }\n\n    if (control?.hasError('min')) {\n      return 'Value must be greater than 0';\n    }\n\n    return '';\n  }\n\n  /**\n   * Check if form control has error\n   */\n  hasError(controlName: string): boolean {\n    const control = this.orderForm.get(controlName);\n    return !!(control && control.invalid && (control.dirty || control.touched));\n  }\n\n  /**\n   * Navigate to deposit\n   */\n  navigateToDeposit(): void {\n    console.log('Navigate to deposit');\n    // TODO: Implement navigation\n  }\n\n  /**\n   * Navigate to convert\n   */\n  navigateToConvert(): void {\n    console.log('Navigate to convert');\n    // TODO: Implement navigation\n  }\n\n  /**\n   * Navigate to transfer\n   */\n  navigateToTransfer(): void {\n    console.log('Navigate to transfer');\n    // TODO: Implement navigation\n  }\n\n  /**\n   * Open fee rate dialog\n   */\n  openFeeRateDialog(): void {\n    console.log('Open fee rate dialog');\n    // TODO: Implement dialog\n  }\n\n  /**\n   * Open calculator dialog\n   */\n  openCalculatorDialog(): void {\n    console.log('Open calculator dialog');\n    // TODO: Implement calculator\n  }\n}\n","<div class=\"order-form-container\">\n  <!-- Header -->\n  <div class=\"order-form-header\">\n    <h2 class=\"order-form-title\">Trade</h2>\n    <div class=\"header-actions\">\n      <button class=\"icon-button\" aria-label=\"Grid settings\">\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <rect x=\"2\" y=\"2\" width=\"7\" height=\"7\" rx=\"1\"></rect>\n          <rect x=\"11\" y=\"2\" width=\"7\" height=\"7\" rx=\"1\"></rect>\n          <rect x=\"2\" y=\"11\" width=\"7\" height=\"7\" rx=\"1\"></rect>\n          <rect x=\"11\" y=\"11\" width=\"7\" height=\"7\" rx=\"1\"></rect>\n        </svg>\n      </button>\n      <button class=\"icon-button notification-button\" aria-label=\"Notifications\">\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path d=\"M10 2C6.68629 2 4 4.68629 4 8V11.5858L2.29289 13.2929C1.90237 13.6834 2.19063 14.5 2.70711 14.5H17.2929C17.8094 14.5 18.0976 13.6834 17.7071 13.2929L16 11.5858V8C16 4.68629 13.3137 2 10 2Z\"></path>\n          <path d=\"M8 16C8 17.1046 8.89543 18 10 18C11.1046 18 12 17.1046 12 16H8Z\"></path>\n        </svg>\n        <span class=\"notification-badge\"></span>\n      </button>\n      <button class=\"icon-button\" aria-label=\"Settings\">\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path d=\"M10 6C7.79086 6 6 7.79086 6 10C6 12.2091 7.79086 14 10 14C12.2091 14 14 12.2091 14 10C14 7.79086 12.2091 6 10 6Z\"></path>\n          <circle cx=\"3\" cy=\"10\" r=\"2\"></circle>\n          <circle cx=\"17\" cy=\"10\" r=\"2\"></circle>\n        </svg>\n      </button>\n    </div>\n  </div>\n\n  <!-- Margin Mode & Leverage -->\n  <div class=\"margin-leverage-row\">\n    <div class=\"margin-mode-select\">\n      <ui-select\n        [options]=\"marginModeOptions\"\n        [(ngModel)]=\"marginMode\"\n        (ngModelChange)=\"onMarginModeChange($event)\"\n        [fullWidth]=\"true\"\n        size=\"medium\">\n      </ui-select>\n    </div>\n    <div class=\"leverage-select\">\n      <ui-select\n        [options]=\"leverageOptions\"\n        [(ngModel)]=\"leverage\"\n        (ngModelChange)=\"onLeverageChange($event)\"\n        [fullWidth]=\"true\"\n        size=\"medium\">\n      </ui-select>\n      <span class=\"leverage-label\">{{ leverage }}x</span>\n    </div>\n  </div>\n\n  <!-- Order Type Tabs -->\n  <div class=\"order-type-tabs\">\n    <ui-tabs\n      [tabs]=\"orderTypeTabs\"\n      [activeTabId]=\"orderType\"\n      (tabChange)=\"onOrderTypeChange($event)\"\n      variant=\"underline\"\n      size=\"medium\">\n    </ui-tabs>\n  </div>\n\n  <form [formGroup]=\"orderForm\" class=\"order-form\">\n    <!-- Price Input -->\n    <div class=\"form-group\" *ngIf=\"orderType !== 'Market'\">\n      <label class=\"form-label\">Price</label>\n      <div class=\"input-with-actions\">\n        <input\n          type=\"number\"\n          formControlName=\"price\"\n          class=\"form-input price-input\"\n          [class.error]=\"hasError('price')\"\n          placeholder=\"0.0\"\n          step=\"0.1\"\n        />\n        <button\n          type=\"button\"\n          class=\"input-action-button last-button\"\n          (click)=\"fillLastPrice()\"\n          aria-label=\"Fill last price\">\n          Last\n        </button>\n        <button\n          type=\"button\"\n          class=\"input-action-button transfer-button\"\n          aria-label=\"Transfer\">\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n            <path d=\"M8 1L12 5H9V11H7V5H4L8 1Z\"></path>\n            <path d=\"M8 15L4 11H7V5H9V11H12L8 15Z\"></path>\n          </svg>\n        </button>\n      </div>\n      <div class=\"current-price\">{{ lastPrice() | number:'1.1-1' }}</div>\n    </div>\n\n    <!-- Quantity Input -->\n    <div class=\"form-group\">\n      <label class=\"form-label\">Quantity</label>\n      <div class=\"input-with-unit\">\n        <input\n          type=\"number\"\n          formControlName=\"quantity\"\n          class=\"form-input quantity-input\"\n          [class.error]=\"hasError('quantity')\"\n          placeholder=\"0.0\"\n          step=\"0.001\"\n        />\n        <ui-select\n          [options]=\"quantityUnitOptions\"\n          [(ngModel)]=\"quantityUnit\"\n          [ngModelOptions]=\"{standalone: true}\"\n          (ngModelChange)=\"onQuantityUnitChange($event)\"\n          class=\"unit-select\"\n          size=\"small\">\n        </ui-select>\n      </div>\n    </div>\n\n    <!-- Quantity Slider -->\n    <div class=\"quantity-slider-container\">\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        [value]=\"quantityPercentage\"\n        (input)=\"onQuantityPercentageChange($event)\"\n        class=\"quantity-slider\"\n        aria-label=\"Quantity percentage\"\n      />\n      <div class=\"slider-markers\">\n        <span class=\"slider-marker\">0</span>\n        <span class=\"slider-marker\"\n          [class.active]=\"quantityPercentage >= 100\">100%</span>\n      </div>\n    </div>\n\n    <!-- Value Display -->\n    <div class=\"value-display-section\">\n      <div class=\"value-row\">\n        <span class=\"value-label\">Value</span>\n        <span class=\"value-amount\">\n          <span class=\"value-dash\">--</span>\n          <span class=\"value-separator\">/</span>\n          <span class=\"value-dash\">--</span>\n          <span class=\"value-unit\">USDT</span>\n        </span>\n      </div>\n      <div class=\"value-row\">\n        <span class=\"value-label\">Cost</span>\n        <span class=\"value-amount\">\n          <span class=\"value-dash\">--</span>\n          <span class=\"value-separator\">/</span>\n          <span class=\"value-dash\">--</span>\n          <span class=\"value-unit\">USDT</span>\n        </span>\n      </div>\n      <div class=\"value-row liq-price-row\">\n        <span class=\"value-label\">Liq. Price</span>\n        <button\n          type=\"button\"\n          class=\"calculate-button\"\n          (click)=\"calculateLiquidationPrice()\">\n          Calculate\n        </button>\n      </div>\n    </div>\n\n    <!-- TP/SL Section -->\n    <div class=\"tpsl-section\">\n      <div class=\"tpsl-header\">\n        <label class=\"checkbox-label\">\n          <input\n            type=\"checkbox\"\n            [checked]=\"tpslEnabled\"\n            (change)=\"toggleTPSL()\"\n            class=\"checkbox-input\"\n          />\n          <span class=\"checkbox-custom\"></span>\n          <span class=\"checkbox-text\">TP/SL</span>\n        </label>\n        <button\n          type=\"button\"\n          class=\"tpsl-mode-toggle\"\n          (click)=\"toggleTPSLMode()\">\n          {{ tpslMode }}\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"toggle-icon\">\n            <path d=\"M4 6L8 10L12 6H4Z\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"tpsl-inputs\" *ngIf=\"tpslEnabled\">\n        <div class=\"form-group\">\n          <label class=\"form-label\">Take Profit</label>\n          <div class=\"input-with-dropdown\">\n            <input\n              type=\"number\"\n              formControlName=\"takeProfit\"\n              class=\"form-input\"\n              placeholder=\"0.0\"\n              step=\"0.1\"\n            />\n            <button\n              type=\"button\"\n              class=\"dropdown-button\"\n              (click)=\"fillTPSLWithLast('takeProfit')\">\n              Last\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"currentColor\">\n                <path d=\"M3 5L6 8L9 5H3Z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-label\">Stop Loss</label>\n          <div class=\"input-with-dropdown\">\n            <input\n              type=\"number\"\n              formControlName=\"stopLoss\"\n              class=\"form-input\"\n              placeholder=\"0.0\"\n              step=\"0.1\"\n            />\n            <button\n              type=\"button\"\n              class=\"dropdown-button\"\n              (click)=\"fillTPSLWithLast('stopLoss')\">\n              Last\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"currentColor\">\n                <path d=\"M3 5L6 8L9 5H3Z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Order Options -->\n    <div class=\"order-options\">\n      <label class=\"checkbox-label\">\n        <input\n          type=\"checkbox\"\n          formControlName=\"postOnly\"\n          class=\"checkbox-input\"\n        />\n        <span class=\"checkbox-custom\"></span>\n        <span class=\"checkbox-text\">Post-Only</span>\n      </label>\n\n      <ui-select\n        [options]=\"timeInForceOptions\"\n        formControlName=\"timeInForce\"\n        [fullWidth]=\"true\"\n        size=\"small\">\n      </ui-select>\n    </div>\n\n    <div class=\"order-options\">\n      <label class=\"checkbox-label\">\n        <input\n          type=\"checkbox\"\n          formControlName=\"reduceOnly\"\n          class=\"checkbox-input\"\n        />\n        <span class=\"checkbox-custom\"></span>\n        <span class=\"checkbox-text\">Reduce-Only</span>\n      </label>\n    </div>\n\n    <!-- Action Buttons -->\n    <div class=\"action-buttons\">\n      <ui-button\n        type=\"button\"\n        variant=\"primary\"\n        size=\"large\"\n        className=\"long-button\"\n        (clicked)=\"placeLongOrder()\"\n        [disabled]=\"isPlacingOrder() || orderForm.invalid\">\n        <span *ngIf=\"!isPlacingOrder()\">Long</span>\n        <span *ngIf=\"isPlacingOrder()\" class=\"loading-spinner\"></span>\n      </ui-button>\n      <ui-button\n        type=\"button\"\n        variant=\"danger\"\n        size=\"large\"\n        className=\"short-button\"\n        (clicked)=\"placeShortOrder()\"\n        [disabled]=\"isPlacingOrder() || orderForm.invalid\">\n        <span *ngIf=\"!isPlacingOrder()\">Short</span>\n        <span *ngIf=\"isPlacingOrder()\" class=\"loading-spinner\"></span>\n      </ui-button>\n    </div>\n\n    <!-- Footer Links -->\n    <div class=\"form-footer\">\n      <button type=\"button\" class=\"footer-link\" (click)=\"openFeeRateDialog()\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" stroke=\"currentColor\" fill=\"none\"></circle>\n          <path d=\"M8 4V8L11 11\"></path>\n        </svg>\n        Fee Rate\n        <span class=\"notification-dot\"></span>\n      </button>\n      <button type=\"button\" class=\"footer-link\" (click)=\"openCalculatorDialog()\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n          <rect x=\"3\" y=\"2\" width=\"10\" height=\"12\" rx=\"1\" stroke=\"currentColor\" fill=\"none\"></rect>\n          <line x1=\"5\" y1=\"6\" x2=\"11\" y2=\"6\" stroke=\"currentColor\"></line>\n          <line x1=\"5\" y1=\"9\" x2=\"11\" y2=\"9\" stroke=\"currentColor\"></line>\n        </svg>\n        Calculator\n      </button>\n    </div>\n  </form>\n\n  <!-- Account Info Section -->\n  <div class=\"account-section\">\n    <div class=\"account-header\">\n      <div class=\"account-title\">\n        <span>Unified Trading Account</span>\n        <button class=\"icon-button-small\" aria-label=\"View account\">\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n            <path d=\"M8 3C4.5 3 1.5 5.5 1 8C1.5 10.5 4.5 13 8 13C11.5 13 14.5 10.5 15 8C14.5 5.5 11.5 3 8 3Z\"></path>\n            <circle cx=\"8\" cy=\"8\" r=\"2\"></circle>\n          </svg>\n        </button>\n      </div>\n      <button class=\"pnl-button\" aria-label=\"P&L\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n          <path d=\"M2 3L8 9L14 3\"></path>\n          <path d=\"M2 7L8 13L14 7\"></path>\n        </svg>\n        P&L\n      </button>\n    </div>\n\n    <div class=\"margin-mode-row\">\n      <span class=\"margin-label\">Margin Mode</span>\n      <button class=\"margin-mode-value\">\n        {{ marginMode }} Margin\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"currentColor\">\n          <path d=\"M4 5L6 7L8 5H4Z\"></path>\n        </svg>\n      </button>\n    </div>\n\n    <div class=\"margin-sliders\">\n      <div class=\"margin-slider-row\">\n        <label class=\"slider-label\">Initial Margin</label>\n        <div class=\"slider-container\">\n          <div class=\"slider-track\">\n            <div class=\"slider-fill\" style=\"width: 0%\"></div>\n          </div>\n        </div>\n        <span class=\"slider-value\">0.00%</span>\n      </div>\n\n      <div class=\"margin-slider-row\">\n        <label class=\"slider-label\">Maintenance Margin</label>\n        <div class=\"slider-container\">\n          <div class=\"slider-track\">\n            <div class=\"slider-fill\" style=\"width: 0%\"></div>\n          </div>\n        </div>\n        <span class=\"slider-value\">0.00%</span>\n      </div>\n    </div>\n\n    <div class=\"balance-display\">\n      <div class=\"balance-row\">\n        <span class=\"balance-label\">Margin Balance</span>\n        <span class=\"balance-value\">\n          {{ marginBalance() | number:'1.4-4' }} USDT\n        </span>\n      </div>\n      <div class=\"balance-row\">\n        <span class=\"balance-label\">Available Balance</span>\n        <span class=\"balance-value\">\n          {{ availableBalance() | number:'1.4-4' }} USDT\n        </span>\n      </div>\n    </div>\n\n    <div class=\"account-actions\">\n      <ui-button\n        type=\"button\"\n        variant=\"secondary\"\n        size=\"small\"\n        (clicked)=\"navigateToDeposit()\">\n        Deposit\n      </ui-button>\n      <ui-button\n        type=\"button\"\n        variant=\"secondary\"\n        size=\"small\"\n        (clicked)=\"navigateToConvert()\">\n        Convert\n      </ui-button>\n      <ui-button\n        type=\"button\"\n        variant=\"secondary\"\n        size=\"small\"\n        (clicked)=\"navigateToTransfer()\">\n        Transfer\n      </ui-button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, OnDestroy, signal, computed, inject, effect } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\n\n// UI Components\nimport { CardComponent, CardHeaderComponent, CardTitleComponent, CardContentComponent } from '../../ui/card/card.component';\nimport { ButtonComponent } from '../../ui/button/button.component';\nimport { SelectComponent, SelectOption } from '../../ui/select/select.component';\nimport { DropdownOption } from '../../ui/dropdown/dropdown.component';\nimport { InputComponent } from '../../ui/input/input.component';\nimport { TableComponent, TableColumn } from '../../ui/table/table.component';\nimport { LightweightChartComponent } from '../../lightweight-chart/lightweight-chart.component';\nimport { OrderFormComponent } from '../order-form/order-form.component';\n\n// Services\nimport { ManualTradingService } from '../../../services/manual-trading.service';\nimport { TranslationService } from '../../../services/translation.service';\nimport { ExchangeCredentialsService } from '../../../services/exchange-credentials.service';\nimport { BybitService } from '../../../services/bybit.service';\n\n// Models\nimport {\n  Exchange,\n  OrderRequest,\n  OrderSide,\n  Position,\n  Order,\n  Balance,\n  TradingSymbol\n} from '../../../models/trading.model';\nimport { ExchangeCredential, getExchangeName } from '../../../models/exchange-credentials.model';\n\n/**\n * Trading Dashboard Component\n *\n * Comprehensive manual trading interface for cryptocurrency exchanges.\n * Provides functionality for:\n * - Placing market and limit orders with advanced options\n * - Monitoring open positions with real-time PnL updates\n * - Viewing order history with filtering and pagination\n * - Tracking account balance and margin usage\n *\n * Features:\n * - Reactive forms with real-time validation\n * - Angular Signals for efficient state management\n * - Auto-refresh capability for real-time data\n * - Responsive design for all device sizes\n * - Comprehensive error handling and user feedback\n * - Accessibility support (ARIA labels, keyboard navigation)\n *\n * @example\n * Usage in template:\n * ```html\n * <trading-dashboard></trading-dashboard>\n * ```\n */\n@Component({\n  selector: 'trading-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    CardComponent,\n    CardHeaderComponent,\n    CardTitleComponent,\n    CardContentComponent,\n    ButtonComponent,\n    SelectComponent,\n    InputComponent,\n    TableComponent,\n    LightweightChartComponent,\n    OrderFormComponent\n  ],\n  templateUrl: './trading-dashboard.component.html',\n  styleUrls: ['./trading-dashboard.component.css']\n})\nexport class TradingDashboardComponent implements OnInit, OnDestroy {\n  // Injected services\n  private http = inject(HttpClient);\n  private tradingService = inject(ManualTradingService);\n  protected translationService = inject(TranslationService);\n  private credentialsService = inject(ExchangeCredentialsService);\n  private bybitService = inject(BybitService);\n\n  // Component lifecycle\n  private destroy$ = new Subject<void>();\n  private autoRefreshSubscription?: Subscription;\n\n  // State signals\n  private _selectedCredentialId = signal<string | null>(null);\n  private _selectedSymbol = signal<TradingSymbol>('BTCUSDT');\n  positions = signal<Position[]>([]);\n  orders = signal<Order[]>([]);\n  balance = signal<Balance | null>(null);\n  autoRefreshEnabled = signal<boolean>(false);\n\n  // Symbol options for dropdown\n  symbolOptions = signal<DropdownOption[]>([]);\n  isLoadingSymbols = signal<boolean>(false);\n\n  // Getters and setters for ngModel binding\n  get selectedCredentialId() { return this._selectedCredentialId(); }\n  set selectedCredentialId(value: string | null) { this._selectedCredentialId.set(value); }\n\n  get selectedSymbol() { return this._selectedSymbol(); }\n  set selectedSymbol(value: TradingSymbol) { this._selectedSymbol.set(value); }\n\n  // Credentials from service\n  credentials = this.credentialsService.credentials;\n  isLoadingCredentials = this.credentialsService.loading;\n\n  // Computed signals\n  totalUnrealizedPnl = computed(() => {\n    return this.positions().reduce((sum, pos) => sum + pos.unrealizedPnl, 0);\n  });\n\n  hasOpenPositions = computed(() => this.positions().length > 0);\n  hasPendingOrders = computed(() => this.orders().some(o => o.status === 'New'));\n\n  // Computed signal for credential dropdown options\n  credentialOptions = computed((): DropdownOption[] => {\n    return this.credentials()\n      .filter(cred => cred.isActive)\n      .map(cred => ({\n        value: cred.id,\n        label: this.formatCredentialLabel(cred)\n      }));\n  });\n\n  // Get selected credential object\n  selectedCredential = computed(() => {\n    const credId = this._selectedCredentialId();\n    if (!credId) return null;\n    return this.credentials().find(c => c.id === credId) ?? null;\n  });\n\n  // Get selected exchange from credential\n  selectedExchange = computed(() => {\n    const cred = this.selectedCredential();\n    return cred ? cred.exchange.toLowerCase() as Exchange : null;\n  });\n\n  // Get chart symbol with exchange prefix (computed)\n  private _chartSymbol = computed(() => {\n    const cred = this.selectedCredential();\n    const symbol = this._selectedSymbol();\n\n    if (!cred || !symbol) return '';\n\n    // Map exchange to TradingView exchange code\n    const exchangeMap: Record<string, string> = {\n      'BYBIT': 'BYBIT',\n      'BINANCE': 'BINANCE',\n      'OKX': 'OKX',\n      'COINBASE': 'COINBASE'\n    };\n\n    const exchangeCode = exchangeMap[cred.exchange.toUpperCase()] || 'BYBIT';\n    return `${exchangeCode}:${symbol}`;\n  });\n\n  // Regular property for chart binding (updated via effect)\n  chartSymbol: string = '';\n\n  // Loading and error states from service\n  isPlacingOrder = this.tradingService.isPlacingOrder;\n  isLoadingPositions = this.tradingService.isLoadingPositions;\n  isLoadingOrders = this.tradingService.isLoadingOrders;\n  isLoadingBalance = this.tradingService.isLoadingBalance;\n\n  // Table columns\n  positionsColumns: TableColumn[] = [\n    { key: 'symbol', label: this.translate('trading.table.symbol'), sortable: true },\n    { key: 'side', label: this.translate('trading.table.side'), sortable: true },\n    { key: 'size', label: this.translate('trading.table.size'), sortable: true, type: 'number', align: 'right' },\n    { key: 'entryPrice', label: this.translate('trading.table.entryPrice'), sortable: true, type: 'currency', align: 'right' },\n    { key: 'markPrice', label: this.translate('trading.table.markPrice'), sortable: true, type: 'currency', align: 'right' },\n    { key: 'unrealizedPnl', label: this.translate('trading.table.unrealizedPnl'), sortable: true, type: 'currency', align: 'right' },\n    { key: 'leverage', label: this.translate('trading.table.leverage'), sortable: true, type: 'number', align: 'center' },\n    { key: 'actions', label: this.translate('trading.table.actions'), sortable: false, align: 'center' }\n  ];\n\n  ordersColumns: TableColumn[] = [\n    { key: 'symbol', label: this.translate('trading.table.symbol'), sortable: true },\n    { key: 'type', label: this.translate('trading.table.type'), sortable: true },\n    { key: 'side', label: this.translate('trading.table.side'), sortable: true },\n    { key: 'quantity', label: this.translate('trading.table.quantity'), sortable: true, type: 'number', align: 'right' },\n    { key: 'price', label: this.translate('trading.table.price'), sortable: true, type: 'currency', align: 'right' },\n    { key: 'status', label: this.translate('trading.table.status'), sortable: true },\n    { key: 'createdAt', label: this.translate('trading.table.time'), sortable: true, type: 'date' },\n    { key: 'actions', label: this.translate('trading.table.actions'), sortable: false, align: 'center' }\n  ];\n\n  // Pagination\n  currentPage = signal<number>(1);\n  pageSize = signal<number>(10);\n\n  constructor() {\n    // No form initialization needed - using OrderFormComponent\n\n    // Effect to sync computed chartSymbol to property for change detection\n    effect(() => {\n      const newSymbol = this._chartSymbol();\n      if (newSymbol && newSymbol !== this.chartSymbol) {\n        console.log('Chart symbol changed:', this.chartSymbol, '->', newSymbol);\n        this.chartSymbol = newSymbol;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    // Load credentials first\n    this.credentialsService.fetchCredentials().subscribe({\n      next: () => {\n        // Auto-select first active credential if available\n        const firstActive = this.credentialOptions()[0];\n        if (firstActive) {\n          this._selectedCredentialId.set(firstActive.value);\n          this.loadTradingSymbols();\n        }\n        this.loadMockData();\n      },\n      error: (err) => console.error('Failed to load credentials:', err)\n    });\n\n    // Subscribe to cached data from service\n    this.tradingService.positions$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(positions => this.positions.set(positions));\n\n    this.tradingService.orders$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(orders => this.orders.set(orders));\n\n    this.tradingService.balance$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(balance => this.balance.set(balance));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.stopAutoRefresh();\n  }\n\n  /**\n   * Load all trading data (positions, orders, balance)\n   */\n  loadAllData(): void {\n    const exchange = this.selectedExchange();\n    if (!exchange) return;\n\n    // For development, use mock data\n    // In production, uncomment the following:\n    // this.tradingService.getPositions(exchange).subscribe();\n    // this.tradingService.getOrders(exchange).subscribe();\n    // this.tradingService.getAccountBalance(exchange).subscribe();\n\n    this.loadMockData();\n  }\n\n  /**\n   * Load mock data for development/testing\n   */\n  private loadMockData(): void {\n    this.positions.set(this.tradingService.getMockPositions());\n    this.orders.set(this.tradingService.getMockOrders());\n    this.balance.set(this.tradingService.getMockBalance());\n  }\n\n  /**\n   * Handle order placed from OrderFormComponent\n   */\n  handleOrderPlaced(orderRequest: any): void {\n    const credential = this.selectedCredential();\n\n    if (!credential) {\n      console.error('No credential selected');\n      return;\n    }\n\n    // Add credential and exchange to order request\n    const completeOrderRequest: OrderRequest = {\n      ...orderRequest,\n      exchange: credential.exchange.toLowerCase() as Exchange,\n      credentialId: credential.id\n    };\n\n    this.tradingService.placeOrder(completeOrderRequest).subscribe({\n      next: (response) => {\n        console.log('Order placed successfully:', response);\n        this.loadAllData();\n        // TODO: Show success toast notification\n      },\n      error: (error) => {\n        console.error('Failed to place order:', error);\n        // TODO: Show error toast notification\n      }\n    });\n  }\n\n  /**\n   * Close a position\n   */\n  closePosition(position: Position): void {\n    if (confirm(this.translate('trading.confirmClosePosition'))) {\n      this.tradingService.closePosition({\n        exchange: position.exchange,\n        symbol: position.symbol,\n        side: position.side\n      }).subscribe({\n        next: () => {\n          console.log('Position closed successfully');\n          this.loadAllData();\n          // TODO: Show success toast notification\n        },\n        error: (error) => {\n          console.error('Failed to close position:', error);\n          // TODO: Show error toast notification\n        }\n      });\n    }\n  }\n\n  /**\n   * Cancel an order\n   */\n  cancelOrder(order: Order): void {\n    if (order.status !== 'New') {\n      return;\n    }\n\n    if (confirm(this.translate('trading.confirmCancelOrder'))) {\n      this.tradingService.cancelOrder({\n        exchange: order.exchange,\n        orderId: order.orderId,\n        symbol: order.symbol\n      }).subscribe({\n        next: () => {\n          console.log('Order cancelled successfully');\n          this.loadAllData();\n          // TODO: Show success toast notification\n        },\n        error: (error) => {\n          console.error('Failed to cancel order:', error);\n          // TODO: Show error toast notification\n        }\n      });\n    }\n  }\n\n  /**\n   * Refresh all data manually\n   */\n  refreshData(): void {\n    this.loadAllData();\n  }\n\n  /**\n   * Toggle auto-refresh\n   */\n  toggleAutoRefresh(): void {\n    const enabled = !this.autoRefreshEnabled();\n    this.autoRefreshEnabled.set(enabled);\n\n    if (enabled) {\n      this.startAutoRefresh();\n    } else {\n      this.stopAutoRefresh();\n    }\n  }\n\n  /**\n   * Start auto-refresh\n   */\n  private startAutoRefresh(): void {\n    const exchange = this.selectedExchange();\n    if (!exchange) return;\n\n    this.autoRefreshSubscription = this.tradingService\n      .setupAutoRefresh(exchange, 10000) // Refresh every 10 seconds\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n  }\n\n  /**\n   * Stop auto-refresh\n   */\n  private stopAutoRefresh(): void {\n    this.autoRefreshSubscription?.unsubscribe();\n  }\n\n  /**\n   * Get CSS class for PnL value (green for profit, red for loss)\n   */\n  getPnlClass(pnl: number): string {\n    return pnl >= 0 ? 'pnl-positive' : 'pnl-negative';\n  }\n\n  /**\n   * Get CSS class for order side (green for buy, red for sell)\n   */\n  getSideClass(side: OrderSide): string {\n    return side === 'Buy' ? 'side-buy' : 'side-sell';\n  }\n\n  /**\n   * Format PnL value with + or - sign\n   */\n  formatPnl(pnl: number): string {\n    const sign = pnl >= 0 ? '+' : '';\n    return `${sign}$${pnl.toFixed(2)}`;\n  }\n\n  /**\n   * Format PnL percentage\n   */\n  formatPnlPercent(percent: number): string {\n    const sign = percent >= 0 ? '+' : '';\n    return `${sign}${percent.toFixed(2)}%`;\n  }\n\n  /**\n   * Check if order can be cancelled\n   */\n  canCancelOrder(order: Order): boolean {\n    return order.status === 'New';\n  }\n\n  /**\n   * Translate a key using the translation service\n   */\n  protected translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  /**\n   * Format date for display\n   */\n  formatDate(date: Date): string {\n    return new Date(date).toLocaleString();\n  }\n\n  /**\n   * Format currency value\n   */\n  formatCurrency(value: number): string {\n    return `$${value.toFixed(2)}`;\n  }\n\n  /**\n   * Format credential label for dropdown\n   */\n  private formatCredentialLabel(credential: ExchangeCredential): string {\n    const exchangeName = getExchangeName(credential.exchange);\n    const env = credential.environment === 'TESTNET' ? '🧪 Testnet' : '🔴 Live';\n    const label = credential.label ? ` - ${credential.label}` : '';\n    return `${exchangeName} (${env})${label}`;\n  }\n\n  /**\n   * Handle credential change from dropdown\n   */\n  onCredentialChange(credentialId: string): void {\n    console.log('Credential changed to:', credentialId);\n    this._selectedCredentialId.set(credentialId);\n\n    const cred = this.selectedCredential();\n    console.log('Selected credential:', cred);\n    console.log('Chart symbol before load:', this.chartSymbol);\n\n    // Switch WebSocket environment based on credential\n    if (cred && cred.exchange.toUpperCase() === 'BYBIT') {\n      this.bybitService.setWebSocketEnvironment(cred.environment);\n      console.log(`✅ WebSocket environment switched to: ${cred.environment}`);\n    }\n\n    this.loadTradingSymbols();\n    this.loadAllData();\n\n    // Log after a brief delay to see if computed updated\n    setTimeout(() => {\n      console.log('Chart symbol after change:', this.chartSymbol);\n    }, 100);\n  }\n\n  /**\n   * Handle symbol change from dropdown\n   */\n  onSymbolChange(symbol: TradingSymbol): void {\n    this._selectedSymbol.set(symbol);\n    // Chart will update automatically via binding\n  }\n\n  /**\n   * Load trading symbols for selected exchange\n   */\n  private loadTradingSymbols(): void {\n    const exchange = this.selectedExchange();\n    if (!exchange) {\n      this.symbolOptions.set([]);\n      return;\n    }\n\n    this.isLoadingSymbols.set(true);\n\n    this.tradingService.getSymbols(exchange).subscribe({\n      next: (symbols) => {\n        const options = symbols.map(s => ({\n          value: s.symbol as TradingSymbol,\n          label: s.symbol\n        }));\n        this.symbolOptions.set(options);\n        this.isLoadingSymbols.set(false);\n\n        // Auto-select BTCUSDT if available, otherwise first symbol\n        const btcOption = options.find(opt => opt.value === 'BTCUSDT');\n        if (btcOption) {\n          this._selectedSymbol.set('BTCUSDT');\n        } else if (options.length > 0) {\n          this._selectedSymbol.set(options[0].value);\n        }\n      },\n      error: (error) => {\n        console.error('Failed to load trading symbols:', error);\n        // Fallback to default popular trading pairs\n        this.loadDefaultSymbols();\n        this.isLoadingSymbols.set(false);\n      }\n    });\n  }\n\n  /**\n   * Load default trading symbols as fallback\n   */\n  private loadDefaultSymbols(): void {\n    const defaultSymbols: SelectOption[] = [\n      { value: 'BTCUSDT', label: 'BTCUSDT' },\n      { value: 'ETHUSDT', label: 'ETHUSDT' },\n      { value: 'BNBUSDT', label: 'BNBUSDT' },\n      { value: 'SOLUSDT', label: 'SOLUSDT' },\n      { value: 'XRPUSDT', label: 'XRPUSDT' },\n      { value: 'ADAUSDT', label: 'ADAUSDT' },\n      { value: 'DOGEUSDT', label: 'DOGEUSDT' },\n      { value: 'MATICUSDT', label: 'MATICUSDT' },\n      { value: 'DOTUSDT', label: 'DOTUSDT' },\n      { value: 'AVAXUSDT', label: 'AVAXUSDT' }\n    ];\n\n    this.symbolOptions.set(defaultSymbols);\n    this._selectedSymbol.set('BTCUSDT');\n  }\n}\n","<div class=\"trading-dashboard\">\n  <!-- Header Section -->\n  <div class=\"dashboard-header\">\n    <h1 class=\"dashboard-title\">{{ translate('trading.dashboard.title') }}</h1>\n  </div>\n\n  <!-- Main Dashboard Grid with Chart and Trading Controls -->\n  <div class=\"dashboard-grid chart-trading-layout\">\n    <!-- Left Column: Chart -->\n    @if (selectedSymbol) {\n      <div class=\"dashboard-column chart-column\">\n        <app-lightweight-chart\n          [symbol]=\"chartSymbol\"\n          [chartHeight]=\"600\"\n          [showCredentialSelector]=\"true\"\n          [showSymbolSelector]=\"true\"\n          [showEnvironmentBadge]=\"true\"\n          [credentialOptions]=\"credentialOptions()\"\n          [symbolOptions]=\"symbolOptions()\"\n          [isLoadingSymbols]=\"isLoadingSymbols()\"\n          [environment]=\"selectedCredential()?.environment || 'TESTNET'\"\n          (credentialChange)=\"onCredentialChange($event)\"\n          (symbolChange)=\"onSymbolChange($event)\">\n        </app-lightweight-chart>\n      </div>\n    }\n\n    <!-- Right Column: Bybit-Style Order Form -->\n    <div class=\"dashboard-column trading-controls-column\">\n      <app-order-form\n        [selectedSymbol]=\"selectedSymbol\"\n        [currentPrice]=\"0\"\n        [balance]=\"balance()\"\n        (orderPlaced)=\"handleOrderPlaced($event)\">\n      </app-order-form>\n    </div>\n  </div>\n\n  <!-- Positions & Orders Section (Full Width) -->\n  <div class=\"positions-orders-section\">\n    <div class=\"dashboard-grid\">\n      <!-- Open Positions Card -->\n      <ui-card variant=\"elevated\" class=\"positions-card\">\n        <ui-card-header>\n          <ui-card-title>\n            {{ translate('trading.positions.title') }}\n            @if (positions().length > 0) {\n              <span class=\"badge\">{{ positions().length }}</span>\n            }\n          </ui-card-title>\n        </ui-card-header>\n        <ui-card-content>\n          @if (isLoadingPositions()) {\n            <div class=\"loading-state\">\n              <span>{{ translate('trading.loading') }}</span>\n            </div>\n          } @else if (positions().length === 0) {\n            <div class=\"empty-state\">\n              <p>{{ translate('trading.positions.empty') }}</p>\n            </div>\n          } @else {\n            <div class=\"positions-table-wrapper\">\n              <table class=\"positions-table\" role=\"table\" aria-label=\"Open positions\">\n                <thead>\n                  <tr>\n                    <th>{{ translate('trading.table.symbol') }}</th>\n                    <th>{{ translate('trading.table.side') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.size') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.entryPrice') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.markPrice') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.unrealizedPnl') }}</th>\n                    <th class=\"text-center\">{{ translate('trading.table.leverage') }}</th>\n                    <th class=\"text-center\">{{ translate('trading.table.actions') }}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  @for (position of positions(); track position.id) {\n                    <tr>\n                      <td class=\"font-semibold\">{{ position.symbol }}</td>\n                      <td>\n                        <span class=\"side-badge\" [ngClass]=\"getSideClass(position.side)\">\n                          {{ position.side }}\n                        </span>\n                      </td>\n                      <td class=\"text-right\">{{ position.size }}</td>\n                      <td class=\"text-right\">{{ formatCurrency(position.entryPrice) }}</td>\n                      <td class=\"text-right\">{{ formatCurrency(position.markPrice) }}</td>\n                      <td class=\"text-right\">\n                        <div [ngClass]=\"getPnlClass(position.unrealizedPnl)\">\n                          <div>{{ formatPnl(position.unrealizedPnl) }}</div>\n                          <div class=\"pnl-percent\">{{ formatPnlPercent(position.unrealizedPnlPercent) }}</div>\n                        </div>\n                      </td>\n                      <td class=\"text-center\">\n                        <span class=\"leverage-badge\">{{ position.leverage }}x</span>\n                      </td>\n                      <td class=\"text-center\">\n                        <ui-button\n                          variant=\"danger\"\n                          size=\"small\"\n                          (clicked)=\"closePosition(position)\"\n                          [attr.aria-label]=\"'Close position for ' + position.symbol\">\n                          {{ translate('trading.actions.close') }}\n                        </ui-button>\n                      </td>\n                    </tr>\n                  }\n                </tbody>\n              </table>\n            </div>\n\n            <!-- Total Unrealized PnL Summary -->\n            <div class=\"positions-summary\">\n              <span class=\"summary-label\">{{ translate('trading.positions.totalUnrealizedPnl') }}:</span>\n              <span class=\"summary-value\" [ngClass]=\"getPnlClass(totalUnrealizedPnl())\">\n                {{ formatPnl(totalUnrealizedPnl()) }}\n              </span>\n            </div>\n          }\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Order History Card -->\n      <ui-card variant=\"elevated\" class=\"orders-card\">\n        <ui-card-header>\n          <ui-card-title>\n            {{ translate('trading.orders.title') }}\n            @if (orders().length > 0) {\n              <span class=\"badge\">{{ orders().length }}</span>\n            }\n          </ui-card-title>\n        </ui-card-header>\n        <ui-card-content>\n          @if (isLoadingOrders()) {\n            <div class=\"loading-state\">\n              <span>{{ translate('trading.loading') }}</span>\n            </div>\n          } @else if (orders().length === 0) {\n            <div class=\"empty-state\">\n              <p>{{ translate('trading.orders.empty') }}</p>\n            </div>\n          } @else {\n            <div class=\"orders-table-wrapper\">\n              <table class=\"orders-table\" role=\"table\" aria-label=\"Order history\">\n                <thead>\n                  <tr>\n                    <th>{{ translate('trading.table.symbol') }}</th>\n                    <th>{{ translate('trading.table.type') }}</th>\n                    <th>{{ translate('trading.table.side') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.quantity') }}</th>\n                    <th class=\"text-right\">{{ translate('trading.table.price') }}</th>\n                    <th>{{ translate('trading.table.status') }}</th>\n                    <th>{{ translate('trading.table.time') }}</th>\n                    <th class=\"text-center\">{{ translate('trading.table.actions') }}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  @for (order of orders(); track order.orderId) {\n                    <tr>\n                      <td class=\"font-semibold\">{{ order.symbol }}</td>\n                      <td>{{ order.type }}</td>\n                      <td>\n                        <span class=\"side-badge\" [ngClass]=\"getSideClass(order.side)\">\n                          {{ order.side }}\n                        </span>\n                      </td>\n                      <td class=\"text-right\">{{ order.quantity }}</td>\n                      <td class=\"text-right\">\n                        {{ order.price ? formatCurrency(order.price) : '-' }}\n                      </td>\n                      <td>\n                        <span class=\"status-badge\" [attr.data-status]=\"order.status\">\n                          {{ order.status }}\n                        </span>\n                      </td>\n                      <td>{{ formatDate(order.createdAt) }}</td>\n                      <td class=\"text-center\">\n                        @if (canCancelOrder(order)) {\n                          <ui-button\n                            variant=\"warning\"\n                            size=\"small\"\n                            (clicked)=\"cancelOrder(order)\"\n                            [attr.aria-label]=\"'Cancel order for ' + order.symbol\">\n                            {{ translate('trading.actions.cancel') }}\n                          </ui-button>\n                        } @else {\n                          <span class=\"text-muted\">-</span>\n                        }\n                      </td>\n                    </tr>\n                  }\n                </tbody>\n              </table>\n            </div>\n          }\n        </ui-card-content>\n      </ui-card>\n    </div>\n  </div>\n</div>\n","import { Injectable, signal, computed } from '@angular/core';\nimport { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, BehaviorSubject, interval } from 'rxjs';\nimport { tap, catchError, map, retry, switchMap, shareReplay } from 'rxjs/operators';\nimport {\n  OrderRequest,\n  OrderResponse,\n  Position,\n  Order,\n  Balance,\n  ClosePositionRequest,\n  CancelOrderRequest,\n  SymbolInfo,\n  TradingSymbol,\n  Exchange,\n  PaginatedResponse,\n  PaginationParams\n} from '../models/trading.model';\n\n/**\n * Manual Trading Service\n *\n * Comprehensive service for manual cryptocurrency trading operations.\n * Handles order placement, position management, balance tracking, and real-time updates.\n *\n * Features:\n * - Place market and limit orders\n * - Manage open positions\n * - Track order history\n * - Monitor account balance\n * - Support for multiple exchanges\n * - Real-time data updates preparation (WebSocket-ready)\n * - Error handling with retry logic\n * - Loading state management with Angular Signals\n *\n * @example\n * ```typescript\n * // Place a limit buy order\n * const order: OrderRequest = {\n *   exchange: 'bybit',\n *   symbol: 'BTCUSDT',\n *   side: 'Buy',\n *   type: 'Limit',\n *   quantity: 0.001,\n *   price: 50000,\n *   timeInForce: 'GTC'\n * };\n * this.tradingService.placeOrder(order).subscribe(response => {\n *   console.log('Order placed:', response);\n * });\n * ```\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ManualTradingService {\n  private readonly baseUrl = 'http://localhost:3000/api';\n\n  // Loading states using Angular Signals\n  private loadingStates = {\n    placeOrder: signal<boolean>(false),\n    positions: signal<boolean>(false),\n    orders: signal<boolean>(false),\n    balance: signal<boolean>(false),\n    closePosition: signal<boolean>(false),\n    cancelOrder: signal<boolean>(false)\n  };\n\n  // Public readonly signals\n  readonly isPlacingOrder = this.loadingStates.placeOrder.asReadonly();\n  readonly isLoadingPositions = this.loadingStates.positions.asReadonly();\n  readonly isLoadingOrders = this.loadingStates.orders.asReadonly();\n  readonly isLoadingBalance = this.loadingStates.balance.asReadonly();\n  readonly isClosingPosition = this.loadingStates.closePosition.asReadonly();\n  readonly isCancellingOrder = this.loadingStates.cancelOrder.asReadonly();\n\n  // Computed signal - true if any operation is loading\n  readonly isLoading = computed(() =>\n    this.loadingStates.placeOrder() ||\n    this.loadingStates.positions() ||\n    this.loadingStates.orders() ||\n    this.loadingStates.balance() ||\n    this.loadingStates.closePosition() ||\n    this.loadingStates.cancelOrder()\n  );\n\n  // Cached data streams with auto-refresh capability\n  private positionsCache$ = new BehaviorSubject<Position[]>([]);\n  private ordersCache$ = new BehaviorSubject<Order[]>([]);\n  private balanceCache$ = new BehaviorSubject<Balance | null>(null);\n\n  // Public observables for cached data\n  readonly positions$ = this.positionsCache$.asObservable();\n  readonly orders$ = this.ordersCache$.asObservable();\n  readonly balance$ = this.balanceCache$.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Place a new order on the exchange\n   *\n   * @param order - Order request payload\n   * @returns Observable<OrderResponse> - Order confirmation from exchange\n   * @throws HttpErrorResponse if order placement fails\n   */\n  placeOrder(order: OrderRequest): Observable<OrderResponse> {\n    this.loadingStates.placeOrder.set(true);\n\n    // Validate order before sending\n    this.validateOrder(order);\n\n    const url = `${this.baseUrl}/${order.exchange}/order`;\n\n    return this.http.post<OrderResponse>(url, order).pipe(\n      tap(() => {\n        this.loadingStates.placeOrder.set(false);\n        // Refresh orders list after successful order placement\n        this.refreshOrders(order.exchange);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.placeOrder.set(false);\n        return this.handleError('Failed to place order', error);\n      })\n    );\n  }\n\n  /**\n   * Get all open positions for a specific exchange\n   *\n   * @param exchange - Exchange identifier\n   * @returns Observable<Position[]> - List of open positions\n   */\n  getPositions(exchange: Exchange): Observable<Position[]> {\n    this.loadingStates.positions.set(true);\n\n    const url = `${this.baseUrl}/${exchange}/positions`;\n\n    return this.http.get<Position[]>(url).pipe(\n      tap((positions) => {\n        this.loadingStates.positions.set(false);\n        this.positionsCache$.next(positions);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.positions.set(false);\n        this.positionsCache$.next([]);\n        return this.handleError('Failed to fetch positions', error);\n      })\n    );\n  }\n\n  /**\n   * Get order history with pagination\n   *\n   * @param exchange - Exchange identifier\n   * @param params - Pagination parameters (page, limit)\n   * @returns Observable<PaginatedResponse<Order>> - Paginated order history\n   */\n  getOrders(\n    exchange: Exchange,\n    params?: Partial<PaginationParams>\n  ): Observable<PaginatedResponse<Order>> {\n    this.loadingStates.orders.set(true);\n\n    const url = `${this.baseUrl}/${exchange}/orders`;\n    let httpParams = new HttpParams();\n\n    if (params?.page) {\n      httpParams = httpParams.set('page', params.page.toString());\n    }\n    if (params?.limit) {\n      httpParams = httpParams.set('limit', params.limit.toString());\n    }\n\n    return this.http.get<PaginatedResponse<Order>>(url, { params: httpParams }).pipe(\n      tap((response) => {\n        this.loadingStates.orders.set(false);\n        this.ordersCache$.next(response.data);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.orders.set(false);\n        this.ordersCache$.next([]);\n        return this.handleError('Failed to fetch orders', error);\n      })\n    );\n  }\n\n  /**\n   * Get account balance for a specific exchange\n   *\n   * @param exchange - Exchange identifier\n   * @returns Observable<Balance> - Account balance information\n   */\n  getAccountBalance(exchange: Exchange): Observable<Balance> {\n    this.loadingStates.balance.set(true);\n\n    const url = `${this.baseUrl}/${exchange}/balance`;\n\n    return this.http.get<Balance>(url).pipe(\n      tap((balance) => {\n        this.loadingStates.balance.set(false);\n        this.balanceCache$.next(balance);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.balance.set(false);\n        return this.handleError('Failed to fetch balance', error);\n      })\n    );\n  }\n\n  /**\n   * Close an open position (market order in opposite direction)\n   *\n   * @param request - Close position request\n   * @returns Observable<OrderResponse> - Closing order confirmation\n   */\n  closePosition(request: ClosePositionRequest): Observable<OrderResponse> {\n    this.loadingStates.closePosition.set(true);\n\n    const url = `${this.baseUrl}/${request.exchange}/position/close`;\n\n    return this.http.post<OrderResponse>(url, request).pipe(\n      tap(() => {\n        this.loadingStates.closePosition.set(false);\n        // Refresh positions and orders after closing\n        this.refreshPositions(request.exchange);\n        this.refreshOrders(request.exchange);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.closePosition.set(false);\n        return this.handleError('Failed to close position', error);\n      })\n    );\n  }\n\n  /**\n   * Cancel a pending order\n   *\n   * @param request - Cancel order request\n   * @returns Observable<void> - Confirmation of cancellation\n   */\n  cancelOrder(request: CancelOrderRequest): Observable<void> {\n    this.loadingStates.cancelOrder.set(true);\n\n    const url = `${this.baseUrl}/${request.exchange}/order/${request.orderId}`;\n    const params = new HttpParams().set('symbol', request.symbol);\n\n    return this.http.delete<void>(url, { params }).pipe(\n      tap(() => {\n        this.loadingStates.cancelOrder.set(false);\n        // Refresh orders list after cancellation\n        this.refreshOrders(request.exchange);\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.loadingStates.cancelOrder.set(false);\n        return this.handleError('Failed to cancel order', error);\n      })\n    );\n  }\n\n  /**\n   * Get available trading symbols for an exchange\n   *\n   * @param exchange - Exchange identifier\n   * @returns Observable<SymbolInfo[]> - List of available trading pairs\n   */\n  getSymbols(exchange: Exchange): Observable<SymbolInfo[]> {\n    const url = `${this.baseUrl}/trading/symbols`;\n    const params = new HttpParams().set('exchange', exchange.toUpperCase());\n\n    return this.http.get<SymbolInfo[]>(url, { params }).pipe(\n      shareReplay(1), // Cache symbols data\n      catchError((error: HttpErrorResponse) => {\n        return this.handleError('Failed to fetch symbols', error);\n      })\n    );\n  }\n\n  /**\n   * Get symbol information for a specific trading pair\n   *\n   * @param exchange - Exchange identifier\n   * @param symbol - Trading symbol\n   * @returns Observable<SymbolInfo> - Symbol details\n   */\n  getSymbolInfo(exchange: Exchange, symbol: TradingSymbol): Observable<SymbolInfo> {\n    const url = `${this.baseUrl}/${exchange}/symbols/${symbol}`;\n\n    return this.http.get<SymbolInfo>(url).pipe(\n      catchError((error: HttpErrorResponse) => {\n        return this.handleError('Failed to fetch symbol info', error);\n      })\n    );\n  }\n\n  /**\n   * Refresh positions data (manually trigger refresh)\n   *\n   * @param exchange - Exchange identifier\n   */\n  refreshPositions(exchange: Exchange): void {\n    this.getPositions(exchange).subscribe({\n      error: (error) => console.error('Failed to refresh positions:', error)\n    });\n  }\n\n  /**\n   * Refresh orders data (manually trigger refresh)\n   *\n   * @param exchange - Exchange identifier\n   */\n  refreshOrders(exchange: Exchange): void {\n    this.getOrders(exchange).subscribe({\n      error: (error) => console.error('Failed to refresh orders:', error)\n    });\n  }\n\n  /**\n   * Refresh balance data (manually trigger refresh)\n   *\n   * @param exchange - Exchange identifier\n   */\n  refreshBalance(exchange: Exchange): void {\n    this.getAccountBalance(exchange).subscribe({\n      error: (error) => console.error('Failed to refresh balance:', error)\n    });\n  }\n\n  /**\n   * Refresh all trading data\n   *\n   * @param exchange - Exchange identifier\n   */\n  refreshAll(exchange: Exchange): void {\n    this.refreshPositions(exchange);\n    this.refreshOrders(exchange);\n    this.refreshBalance(exchange);\n  }\n\n  /**\n   * Set up auto-refresh for trading data\n   * Returns an observable that emits at regular intervals\n   *\n   * @param exchange - Exchange identifier\n   * @param intervalMs - Refresh interval in milliseconds (default: 10000ms = 10s)\n   * @returns Observable that triggers data refresh\n   */\n  setupAutoRefresh(exchange: Exchange, intervalMs: number = 10000): Observable<number> {\n    return interval(intervalMs).pipe(\n      tap(() => this.refreshAll(exchange))\n    );\n  }\n\n  /**\n   * Clear all cached data\n   */\n  clearCache(): void {\n    this.positionsCache$.next([]);\n    this.ordersCache$.next([]);\n    this.balanceCache$.next(null);\n  }\n\n  /**\n   * Validate order before submission\n   * Throws error if validation fails\n   *\n   * @param order - Order to validate\n   * @private\n   */\n  private validateOrder(order: OrderRequest): void {\n    if (!order.symbol) {\n      throw new Error('Symbol is required');\n    }\n\n    if (!order.quantity || order.quantity <= 0) {\n      throw new Error('Quantity must be greater than 0');\n    }\n\n    if (order.type === 'Limit' && (!order.price || order.price <= 0)) {\n      throw new Error('Price is required for limit orders');\n    }\n\n    if (order.stopLoss && order.stopLoss <= 0) {\n      throw new Error('Stop loss must be greater than 0');\n    }\n\n    if (order.takeProfit && order.takeProfit <= 0) {\n      throw new Error('Take profit must be greater than 0');\n    }\n\n    // Validate stop loss and take profit relative to price\n    if (order.price && order.stopLoss && order.takeProfit) {\n      if (order.side === 'Buy') {\n        if (order.stopLoss >= order.price) {\n          throw new Error('Stop loss must be below entry price for buy orders');\n        }\n        if (order.takeProfit <= order.price) {\n          throw new Error('Take profit must be above entry price for buy orders');\n        }\n      } else {\n        if (order.stopLoss <= order.price) {\n          throw new Error('Stop loss must be above entry price for sell orders');\n        }\n        if (order.takeProfit >= order.price) {\n          throw new Error('Take profit must be below entry price for sell orders');\n        }\n      }\n    }\n  }\n\n  /**\n   * Centralized error handling\n   *\n   * @param message - Error message prefix\n   * @param error - HTTP error response\n   * @returns Observable that emits error\n   * @private\n   */\n  private handleError(message: string, error: HttpErrorResponse): Observable<never> {\n    let errorMessage = message;\n\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `${message}: ${error.error.message}`;\n    } else {\n      // Server-side error\n      const serverMessage = error.error?.message || error.error?.error || error.message;\n      errorMessage = `${message}: ${serverMessage}`;\n    }\n\n    console.error('Trading Service Error:', {\n      message: errorMessage,\n      status: error.status,\n      error: error.error\n    });\n\n    return throwError(() => new Error(errorMessage));\n  }\n\n  /**\n   * Generate mock data for development/testing\n   * This method provides realistic mock data when backend is not available\n   */\n  getMockPositions(): Position[] {\n    return [\n      {\n        id: '1',\n        exchange: 'bybit',\n        symbol: 'BTCUSDT',\n        side: 'Buy',\n        size: 0.1,\n        entryPrice: 50000,\n        markPrice: 51000,\n        liquidationPrice: 45000,\n        leverage: 10,\n        unrealizedPnl: 100,\n        unrealizedPnlPercent: 2,\n        marginType: 'Cross',\n        positionMargin: 500,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: '2',\n        exchange: 'bybit',\n        symbol: 'ETHUSDT',\n        side: 'Sell',\n        size: 1.5,\n        entryPrice: 3000,\n        markPrice: 2950,\n        liquidationPrice: 3200,\n        leverage: 5,\n        unrealizedPnl: 75,\n        unrealizedPnlPercent: 1.67,\n        marginType: 'Isolated',\n        positionMargin: 900,\n        createdAt: new Date(Date.now() - 3600000),\n        updatedAt: new Date()\n      }\n    ];\n  }\n\n  getMockOrders(): Order[] {\n    return [\n      {\n        orderId: 'order-1',\n        exchange: 'bybit',\n        symbol: 'BTCUSDT',\n        side: 'Buy',\n        type: 'Limit',\n        quantity: 0.1,\n        price: 49000,\n        status: 'New',\n        timeInForce: 'GTC',\n        filledQuantity: 0,\n        createdAt: new Date(Date.now() - 1800000),\n        updatedAt: new Date(Date.now() - 1800000)\n      },\n      {\n        orderId: 'order-2',\n        exchange: 'bybit',\n        symbol: 'ETHUSDT',\n        side: 'Sell',\n        type: 'Market',\n        quantity: 1.5,\n        status: 'Filled',\n        timeInForce: 'GTC',\n        filledQuantity: 1.5,\n        averagePrice: 3000,\n        commission: 4.5,\n        commissionAsset: 'USDT',\n        createdAt: new Date(Date.now() - 3600000),\n        updatedAt: new Date(Date.now() - 3600000)\n      }\n    ];\n  }\n\n  getMockBalance(): Balance {\n    return {\n      exchange: 'bybit',\n      totalBalance: 10175,\n      availableBalance: 8675,\n      usedMargin: 1400,\n      unrealizedPnl: 175,\n      walletBalance: 10000,\n      currency: 'USDT',\n      updatedAt: new Date()\n    };\n  }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n"],"names":["EventEmitter","signal","computed","effect","CommonModule","Validators","ReactiveFormsModule","FormsModule","Subject","takeUntil","ButtonComponent","SelectComponent","TabsComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","OrderFormComponent_div_31_Template_button_click_5_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","fillLastPrice","ɵɵadvance","ɵɵclassProp","hasError","ɵɵtextInterpolate","ɵɵpipeBind2","lastPrice","OrderFormComponent_div_86_Template_button_click_6_listener","_r3","fillTPSLWithLast","OrderFormComponent_div_86_Template_button_click_15_listener","OrderFormComponent","balance","value","_balance","set","marginMode","_marginMode","leverage","_leverage","orderType","_orderType","quantityUnit","_quantityUnit","quantityPercentage","_quantityPercentage","tpslEnabled","_tpslEnabled","tpslMode","_tpslMode","constructor","fb","tradingService","bybitService","destroy$","selectedSymbol","currentPrice","orderPlaced","orderValue","price","orderForm","get","quantity","orderCost","lev","liquidationPrice","marginRatio","long","short","availableBalance","marginBalance","walletBalance","marginModeOptions","label","leverageOptions","Array","from","length","_","i","quantityUnitOptions","timeInForceOptions","lastPriceOptions","orderTypeTabs","id","isPlacingOrder","isLoadingBalance","group","required","min","takeProfit","stopLoss","postOnly","reduceOnly","timeInForce","type","priceControl","clearValidators","setValue","setValidators","updateValueAndValidity","ngOnInit","loadBalance","subscribeToMarketData","balance$","pipe","subscribe","ngOnDestroy","next","complete","unsubscribeFromRealtimeTicker","getAccountBalance","error","console","subscribeToRealtimeTicker","ticker","parseFloat","onMarginModeChange","mode","onLeverageChange","onOrderTypeChange","onQuantityUnitChange","unit","convertQuantity","patchValue","onQuantityPercentageChange","event","input","target","percentage","parseInt","calculateQuantityFromPercentage","available","totalValue","roundQuantity","newUnit","currentQuantity","newQuantity","decimals","Math","round","pow","toggleTPSL","update","enabled","toggleTPSLMode","field","calculateLiquidationPrice","liq","alert","toFixed","placeLongOrder","placeOrder","placeShortOrder","side","invalid","markAllAsTouched","formValue","orderRequest","symbol","undefined","emit","resetForm","reset","getErrorMessage","controlName","control","dirty","touched","navigateToDeposit","log","navigateToConvert","navigateToTransfer","openFeeRateDialog","openCalculatorDialog","ɵɵdirectiveInject","i1","FormBuilder","i2","ManualTradingService","i3","BybitService","selectors","inputs","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","OrderFormComponent_Template","rf","ctx","ɵɵtwoWayListener","OrderFormComponent_Template_ui_select_ngModelChange_23_listener","$event","ɵɵtwoWayBindingSet","OrderFormComponent_Template_ui_select_ngModelChange_25_listener","OrderFormComponent_Template_ui_tabs_tabChange_29_listener","ɵɵtemplate","OrderFormComponent_div_31_Template","OrderFormComponent_Template_ui_select_ngModelChange_37_listener","OrderFormComponent_Template_input_input_39_listener","OrderFormComponent_Template_button_click_73_listener","OrderFormComponent_Template_input_change_78_listener","OrderFormComponent_Template_button_click_82_listener","OrderFormComponent_div_86_Template","OrderFormComponent_Template_ui_button_clicked_101_listener","OrderFormComponent_span_102_Template","OrderFormComponent_span_103_Template","OrderFormComponent_Template_ui_button_clicked_104_listener","OrderFormComponent_span_105_Template","OrderFormComponent_span_106_Template","OrderFormComponent_Template_button_click_108_listener","OrderFormComponent_Template_button_click_114_listener","OrderFormComponent_Template_ui_button_clicked_172_listener","OrderFormComponent_Template_ui_button_clicked_174_listener","OrderFormComponent_Template_ui_button_clicked_176_listener","ɵɵproperty","ɵɵtwoWayProperty","ɵɵtextInterpolate1","ɵɵpureFunction0","_c0","i4","NgIf","DecimalPipe","ɵNgNoValidate","DefaultValueAccessor","NumberValueAccessor","CheckboxControlValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","NgModel","styles","inject","HttpClient","CardComponent","CardHeaderComponent","CardTitleComponent","CardContentComponent","LightweightChartComponent","TranslationService","ExchangeCredentialsService","getExchangeName","TradingDashboardComponent_Conditional_5_Template_app_lightweight_chart_credentialChange_1_listener","onCredentialChange","TradingDashboardComponent_Conditional_5_Template_app_lightweight_chart_symbolChange_1_listener","onSymbolChange","chartSymbol","credentialOptions","symbolOptions","isLoadingSymbols","tmp_9_0","selectedCredential","environment","positions","translate","TradingDashboardComponent_Conditional_18_For_22_Template_ui_button_clicked_22_listener","position_r4","$implicit","closePosition","getSideClass","size","formatCurrency","entryPrice","markPrice","getPnlClass","unrealizedPnl","formatPnl","formatPnlPercent","unrealizedPnlPercent","ɵɵrepeaterCreate","TradingDashboardComponent_Conditional_18_For_22_Template","_forTrack0","ɵɵrepeater","totalUnrealizedPnl","orders","TradingDashboardComponent_Conditional_27_For_22_Conditional_18_Template_ui_button_clicked_0_listener","_r5","order_r6","cancelOrder","TradingDashboardComponent_Conditional_27_For_22_Conditional_18_Template","TradingDashboardComponent_Conditional_27_For_22_Conditional_19_Template","status","formatDate","createdAt","ɵɵconditional","canCancelOrder","TradingDashboardComponent_Conditional_27_For_22_Template","_forTrack1","TradingDashboardComponent","selectedCredentialId","_selectedCredentialId","_selectedSymbol","http","translationService","credentialsService","autoRefreshEnabled","credentials","isLoadingCredentials","loading","reduce","sum","pos","hasOpenPositions","hasPendingOrders","some","o","filter","cred","isActive","map","formatCredentialLabel","credId","find","c","selectedExchange","exchange","toLowerCase","_chartSymbol","exchangeMap","exchangeCode","toUpperCase","isLoadingPositions","isLoadingOrders","positionsColumns","key","sortable","align","ordersColumns","currentPage","pageSize","newSymbol","fetchCredentials","firstActive","loadTradingSymbols","loadMockData","err","positions$","orders$","stopAutoRefresh","loadAllData","getMockPositions","getMockOrders","getMockBalance","handleOrderPlaced","credential","completeOrderRequest","credentialId","response","position","confirm","order","orderId","refreshData","toggleAutoRefresh","startAutoRefresh","autoRefreshSubscription","setupAutoRefresh","unsubscribe","pnl","sign","percent","date","Date","toLocaleString","exchangeName","env","setWebSocketEnvironment","setTimeout","getSymbols","symbols","options","s","btcOption","opt","loadDefaultSymbols","defaultSymbols","TradingDashboardComponent_Template","TradingDashboardComponent_Conditional_5_Template","TradingDashboardComponent_Template_app_order_form_orderPlaced_7_listener","TradingDashboardComponent_Conditional_14_Template","TradingDashboardComponent_Conditional_16_Template","TradingDashboardComponent_Conditional_17_Template","TradingDashboardComponent_Conditional_18_Template","TradingDashboardComponent_Conditional_23_Template","TradingDashboardComponent_Conditional_25_Template","TradingDashboardComponent_Conditional_26_Template","TradingDashboardComponent_Conditional_27_Template","NgClass","HttpParams","throwError","BehaviorSubject","interval","tap","catchError","shareReplay","baseUrl","loadingStates","asReadonly","isClosingPosition","isCancellingOrder","isLoading","positionsCache$","ordersCache$","balanceCache$","asObservable","validateOrder","url","post","refreshOrders","handleError","getPositions","getOrders","params","httpParams","page","toString","limit","data","request","refreshPositions","delete","getSymbolInfo","refreshBalance","refreshAll","intervalMs","clearCache","Error","message","errorMessage","ErrorEvent","serverMessage","marginType","positionMargin","updatedAt","now","filledQuantity","averagePrice","commission","commissionAsset","totalBalance","usedMargin","currency","ɵɵinject","factory","ɵfac","providedIn","innerFrom","SafeSubscriber","operate","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","source","subscriber","dest","add","handleReset","on","args","onSubscriber","ReplaySubject","configOrBufferSize","windowTime","scheduler","bufferSize","Infinity"],"sourceRoot":"webpack:///","x_google_ignoreList":[5,6]}