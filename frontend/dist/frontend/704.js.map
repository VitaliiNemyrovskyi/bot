{"version":3,"file":"704.js","mappings":"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","sources":["./src/app/models/exchange-credentials.model.ts","./src/app/services/exchange-credentials.service.ts","./src/app/services/exchange-environment.service.ts","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["/**\n * Exchange Credentials Type Definitions\n *\n * Complete type system for exchange credentials management with testnet/mainnet support.\n */\n\n// ============================================================================\n// ENUMS\n// ============================================================================\n\n/**\n * Supported cryptocurrency exchange platforms\n */\nexport enum ExchangeType {\n  BYBIT = 'BYBIT',\n  BINANCE = 'BINANCE',\n  OKX = 'OKX',\n  COINBASE = 'COINBASE',\n  KRAKEN = 'KRAKEN',\n  BINGX = 'BINGX'\n}\n\n/**\n * Exchange environment types\n * TESTNET: Demo/testing environment with fake money\n * MAINNET: Production environment with real money\n */\nexport enum EnvironmentType {\n  TESTNET = 'TESTNET',\n  MAINNET = 'MAINNET'\n}\n\n/**\n * Credential status\n */\nexport enum CredentialStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n  ERROR = 'ERROR',\n  EXPIRED = 'EXPIRED',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'\n}\n\n// ============================================================================\n// CORE DOMAIN MODELS\n// ============================================================================\n\n/**\n * Exchange Credential Entity\n * Represents a single API credential for an exchange in a specific environment\n */\nexport interface ExchangeCredential {\n  id: string;\n  userId: string;\n  exchange: ExchangeType;\n  environment: EnvironmentType;\n  apiKeyPreview: string;\n  label?: string;\n  isActive: boolean;\n  status?: CredentialStatus;\n  createdAt: string;\n  updatedAt: string;\n  lastConnectedAt?: string;\n  metadata?: Record<string, any>;\n}\n\n// ============================================================================\n// REQUEST/RESPONSE MODELS\n// ============================================================================\n\n/**\n * Request to create a new exchange credential\n */\nexport interface CreateExchangeCredentialRequest {\n  exchange: ExchangeType;\n  environment: EnvironmentType;\n  apiKey: string;\n  apiSecret: string;\n  label?: string;\n  isActive?: boolean; // Optional flag to set credential as active (defaults to true)\n}\n\n/**\n * Request to update an existing credential\n * All fields are optional - only provided fields will be updated\n */\nexport interface UpdateExchangeCredentialRequest {\n  label?: string;\n  apiKey?: string;\n  apiSecret?: string;\n  isActive?: boolean;  // Set active status (true/false) - no automatic deactivation of others\n}\n\n/**\n * Response for single credential operations\n */\nexport interface ExchangeCredentialResponse {\n  success: boolean;\n  data: ExchangeCredential;\n  message?: string;\n  timestamp: string;\n}\n\n/**\n * Response for list operations\n */\nexport interface ExchangeCredentialsListResponse {\n  success: boolean;\n  data: {\n    credentials: ExchangeCredential[];\n    totalCount: number;\n    activeCredentials?: Record<ExchangeType, ExchangeCredential>;\n  };\n  timestamp: string;\n}\n\n/**\n * Request to test credential connection\n */\nexport interface TestConnectionRequest {\n  exchange: ExchangeType;\n  environment: EnvironmentType;\n  apiKey: string;\n  apiSecret: string;\n}\n\n/**\n * Response for connection test\n */\nexport interface TestConnectionResponse {\n  success: boolean;\n  message: string;\n  testnet: boolean;\n  accountPreview?: {\n    accountId?: string;\n    totalEquity?: string;\n    totalBalance?: string;\n    currency?: string;\n    accountType?: string;\n    [key: string]: any;\n  };\n  permissions?: string[];\n  warnings?: string[];\n  timestamp: string;\n}\n\n/**\n * Request to activate a credential\n */\nexport interface ActivateCredentialRequest {\n  credentialId: string;\n}\n\n/**\n * Response for delete operation\n */\nexport interface DeleteCredentialResponse {\n  success: boolean;\n  message: string;\n  timestamp: string;\n}\n\n// ============================================================================\n// ERROR MODELS\n// ============================================================================\n\n/**\n * Generic error response from API\n */\nexport interface ExchangeCredentialError {\n  success: false;\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n    fieldErrors?: Record<string, string[]>;\n  };\n  timestamp: string;\n}\n\n/**\n * Error codes that can be returned from the API\n */\nexport enum ExchangeCredentialErrorCode {\n  INVALID_API_KEY = 'INVALID_API_KEY',\n  INVALID_API_SECRET = 'INVALID_API_SECRET',\n  INVALID_EXCHANGE = 'INVALID_EXCHANGE',\n  INVALID_ENVIRONMENT = 'INVALID_ENVIRONMENT',\n  DUPLICATE_CREDENTIAL = 'DUPLICATE_CREDENTIAL',\n  CREDENTIAL_NOT_FOUND = 'CREDENTIAL_NOT_FOUND',\n  CANNOT_DELETE_ACTIVE_CREDENTIAL = 'CANNOT_DELETE_ACTIVE_CREDENTIAL',\n  EXCHANGE_API_ERROR = 'EXCHANGE_API_ERROR',\n  EXCHANGE_CONNECTION_FAILED = 'EXCHANGE_CONNECTION_FAILED',\n  EXCHANGE_RATE_LIMITED = 'EXCHANGE_RATE_LIMITED',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',\n  DATABASE_ERROR = 'DATABASE_ERROR',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  FORBIDDEN = 'FORBIDDEN'\n}\n\n// ============================================================================\n// UI-SPECIFIC MODELS\n// ============================================================================\n\n/**\n * Credential display model with computed properties\n */\nexport interface CredentialDisplayModel extends ExchangeCredential {\n  exchangeName: string;\n  exchangeLogo: string;\n  environmentName: string;\n  environmentColor: string;\n  statusColor: string;\n  createdAtFormatted: string;\n  updatedAtFormatted: string;\n}\n\n/**\n * Form model for credential creation/editing\n */\nexport interface CredentialFormModel {\n  exchange: ExchangeType | null;\n  environment: EnvironmentType | null;\n  apiKey: string;\n  apiSecret: string;\n  label: string;\n}\n\n/**\n * Filter options for credential list\n */\nexport interface CredentialFilterOptions {\n  exchange?: ExchangeType;\n  environment?: EnvironmentType;\n  isActive?: boolean;\n  searchQuery?: string;\n  sortBy?: 'createdAt' | 'updatedAt' | 'exchange' | 'label';\n  sortDirection?: 'asc' | 'desc';\n}\n\n/**\n * Grouped credentials by exchange\n */\nexport interface GroupedCredentials {\n  exchange: ExchangeType;\n  exchangeName: string;\n  exchangeLogo: string;\n  credentials: ExchangeCredential[];\n  activeCredential: ExchangeCredential | null;\n  count: number;\n}\n\n// ============================================================================\n// TYPE GUARDS\n// ============================================================================\n\n/**\n * Type guard to check if object is ExchangeCredential\n */\nexport function isExchangeCredential(obj: any): obj is ExchangeCredential {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof obj.id === 'string' &&\n    typeof obj.userId === 'string' &&\n    Object.values(ExchangeType).includes(obj.exchange) &&\n    Object.values(EnvironmentType).includes(obj.environment) &&\n    typeof obj.apiKeyPreview === 'string' &&\n    typeof obj.isActive === 'boolean'\n  );\n}\n\n/**\n * Type guard to check if response is an error\n */\nexport function isExchangeCredentialError(response: any): response is ExchangeCredentialError {\n  return (\n    typeof response === 'object' &&\n    response !== null &&\n    response.success === false &&\n    typeof response.error === 'object' &&\n    typeof response.error.code === 'string' &&\n    typeof response.error.message === 'string'\n  );\n}\n\n/**\n * Type guard to check if string is valid ExchangeType\n */\nexport function isValidExchangeType(value: string): value is ExchangeType {\n  return Object.values(ExchangeType).includes(value as ExchangeType);\n}\n\n/**\n * Type guard to check if string is valid EnvironmentType\n */\nexport function isValidEnvironmentType(value: string): value is EnvironmentType {\n  return Object.values(EnvironmentType).includes(value as EnvironmentType);\n}\n\n// ============================================================================\n// CONSTANTS\n// ============================================================================\n\n/**\n * Exchange metadata - display names, logos, colors, etc.\n */\nexport const EXCHANGE_METADATA: Record<ExchangeType, {\n  name: string;\n  logo: string;\n  color: string;\n  website: string;\n  supportsTestnet: boolean;\n}> = {\n  [ExchangeType.BYBIT]: {\n    name: 'Bybit',\n    logo: '/assets/images/exchanges/bybit.svg',\n    color: '#F7A600',\n    website: 'https://www.bybit.com',\n    supportsTestnet: true\n  },\n  [ExchangeType.BINANCE]: {\n    name: 'Binance',\n    logo: '/assets/images/exchanges/binance.svg',\n    color: '#F3BA2F',\n    website: 'https://www.binance.com',\n    supportsTestnet: true\n  },\n  [ExchangeType.OKX]: {\n    name: 'OKX',\n    logo: '/assets/images/exchanges/okx.svg',\n    color: '#000000',\n    website: 'https://www.okx.com',\n    supportsTestnet: true\n  },\n  [ExchangeType.COINBASE]: {\n    name: 'Coinbase',\n    logo: '/assets/images/exchanges/coinbase.svg',\n    color: '#0052FF',\n    website: 'https://www.coinbase.com',\n    supportsTestnet: false\n  },\n  [ExchangeType.KRAKEN]: {\n    name: 'Kraken',\n    logo: '/assets/images/exchanges/kraken.svg',\n    color: '#5741D9',\n    website: 'https://www.kraken.com',\n    supportsTestnet: false\n  },\n  [ExchangeType.BINGX]: {\n    name: 'BingX',\n    logo: '/assets/images/exchanges/bingx.svg',\n    color: '#1E73FA',\n    website: 'https://www.bingx.com',\n    supportsTestnet: true\n  }\n};\n\n/**\n * Environment metadata\n */\nexport const ENVIRONMENT_METADATA: Record<EnvironmentType, {\n  name: string;\n  color: string;\n  icon: string;\n  description: string;\n}> = {\n  [EnvironmentType.TESTNET]: {\n    name: 'Testnet',\n    color: '#FF9800',\n    icon: 'science',\n    description: 'Test environment with fake money for safe experimentation'\n  },\n  [EnvironmentType.MAINNET]: {\n    name: 'Mainnet',\n    color: '#2196F3',\n    icon: 'verified_user',\n    description: 'Production environment with real money'\n  }\n};\n\n/**\n * Status metadata\n */\nexport const STATUS_METADATA: Record<CredentialStatus, {\n  name: string;\n  color: string;\n  icon: string;\n}> = {\n  [CredentialStatus.ACTIVE]: {\n    name: 'Active',\n    color: '#4CAF50',\n    icon: 'check_circle'\n  },\n  [CredentialStatus.INACTIVE]: {\n    name: 'Inactive',\n    color: '#9E9E9E',\n    icon: 'radio_button_unchecked'\n  },\n  [CredentialStatus.ERROR]: {\n    name: 'Error',\n    color: '#F44336',\n    icon: 'error'\n  },\n  [CredentialStatus.EXPIRED]: {\n    name: 'Expired',\n    color: '#FF9800',\n    icon: 'schedule'\n  },\n  [CredentialStatus.INSUFFICIENT_PERMISSIONS]: {\n    name: 'Insufficient Permissions',\n    color: '#FFC107',\n    icon: 'warning'\n  }\n};\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Get exchange display name\n */\nexport function getExchangeName(exchange: ExchangeType): string {\n  return EXCHANGE_METADATA[exchange]?.name ?? exchange;\n}\n\n/**\n * Get exchange logo URL\n */\nexport function getExchangeLogo(exchange: ExchangeType): string {\n  return EXCHANGE_METADATA[exchange]?.logo ?? '/assets/images/exchanges/default.svg';\n}\n\n/**\n * Get exchange color\n */\nexport function getExchangeColor(exchange: ExchangeType): string {\n  return EXCHANGE_METADATA[exchange]?.color ?? '#000000';\n}\n\n/**\n * Get environment display name\n */\nexport function getEnvironmentName(environment: EnvironmentType): string {\n  return ENVIRONMENT_METADATA[environment]?.name ?? environment;\n}\n\n/**\n * Get environment color\n */\nexport function getEnvironmentColor(environment: EnvironmentType): string {\n  return ENVIRONMENT_METADATA[environment]?.color ?? '#000000';\n}\n\n/**\n * Get status display name\n */\nexport function getStatusName(status: CredentialStatus): string {\n  return STATUS_METADATA[status]?.name ?? status;\n}\n\n/**\n * Get status color\n */\nexport function getStatusColor(status: CredentialStatus): string {\n  return STATUS_METADATA[status]?.color ?? '#000000';\n}\n\n/**\n * Check if exchange supports testnet\n */\nexport function exchangeSupportsTestnet(exchange: ExchangeType): boolean {\n  return EXCHANGE_METADATA[exchange]?.supportsTestnet ?? false;\n}\n\n/**\n * Mask API key for display - shows only last 4 characters\n */\nexport function maskApiKey(apiKey: string): string {\n  if (!apiKey || apiKey.length <= 4) {\n    return '****';\n  }\n  return '****' + apiKey.slice(-4);\n}\n\n/**\n * Convert credential to display model\n */\nexport function toDisplayModel(credential: ExchangeCredential): CredentialDisplayModel {\n  return {\n    ...credential,\n    exchangeName: getExchangeName(credential.exchange),\n    exchangeLogo: getExchangeLogo(credential.exchange),\n    environmentName: getEnvironmentName(credential.environment),\n    environmentColor: getEnvironmentColor(credential.environment),\n    statusColor: credential.status ? getStatusColor(credential.status) : '#9E9E9E',\n    createdAtFormatted: formatRelativeTime(credential.createdAt),\n    updatedAtFormatted: formatRelativeTime(credential.updatedAt)\n  };\n}\n\n/**\n * Format date as relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(dateString: string): string {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffSec = Math.floor(diffMs / 1000);\n  const diffMin = Math.floor(diffSec / 60);\n  const diffHour = Math.floor(diffMin / 60);\n  const diffDay = Math.floor(diffHour / 24);\n\n  if (diffSec < 60) return 'just now';\n  if (diffMin < 60) return `${diffMin} minute${diffMin !== 1 ? 's' : ''} ago`;\n  if (diffHour < 24) return `${diffHour} hour${diffHour !== 1 ? 's' : ''} ago`;\n  if (diffDay < 30) return `${diffDay} day${diffDay !== 1 ? 's' : ''} ago`;\n\n  return date.toLocaleDateString();\n}\n\n/**\n * Group credentials by exchange\n */\nexport function groupCredentialsByExchange(credentials: ExchangeCredential[]): GroupedCredentials[] {\n  const grouped = new Map<ExchangeType, ExchangeCredential[]>();\n\n  credentials.forEach(cred => {\n    const existing = grouped.get(cred.exchange) ?? [];\n    grouped.set(cred.exchange, [...existing, cred]);\n  });\n\n  return Array.from(grouped.entries()).map(([exchange, creds]) => ({\n    exchange,\n    exchangeName: getExchangeName(exchange),\n    exchangeLogo: getExchangeLogo(exchange),\n    credentials: creds,\n    activeCredential: creds.find(c => c.isActive) ?? null,\n    count: creds.length\n  }));\n}\n\n/**\n * Filter credentials based on options\n */\nexport function filterCredentials(\n  credentials: ExchangeCredential[],\n  options: CredentialFilterOptions\n): ExchangeCredential[] {\n  let filtered = [...credentials];\n\n  if (options.exchange) {\n    filtered = filtered.filter(c => c.exchange === options.exchange);\n  }\n\n  if (options.environment) {\n    filtered = filtered.filter(c => c.environment === options.environment);\n  }\n\n  if (options.isActive !== undefined) {\n    filtered = filtered.filter(c => c.isActive === options.isActive);\n  }\n\n  if (options.searchQuery) {\n    const query = options.searchQuery.toLowerCase();\n    filtered = filtered.filter(c =>\n      c.label?.toLowerCase().includes(query) ||\n      c.apiKeyPreview.toLowerCase().includes(query) ||\n      getExchangeName(c.exchange).toLowerCase().includes(query)\n    );\n  }\n\n  // Sort\n  if (options.sortBy) {\n    filtered.sort((a, b) => {\n      let aVal: any;\n      let bVal: any;\n\n      switch (options.sortBy) {\n        case 'createdAt':\n          aVal = new Date(a.createdAt).getTime();\n          bVal = new Date(b.createdAt).getTime();\n          break;\n        case 'updatedAt':\n          aVal = new Date(a.updatedAt).getTime();\n          bVal = new Date(b.updatedAt).getTime();\n          break;\n        case 'exchange':\n          aVal = a.exchange;\n          bVal = b.exchange;\n          break;\n        case 'label':\n          aVal = a.label ?? '';\n          bVal = b.label ?? '';\n          break;\n        default:\n          return 0;\n      }\n\n      if (aVal < bVal) return options.sortDirection === 'asc' ? -1 : 1;\n      if (aVal > bVal) return options.sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }\n\n  return filtered;\n}\n","import { Injectable, Signal, WritableSignal, signal, computed, effect } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, take, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { getEndpointUrl, getParameterizedUrl } from '../config/app.config';\nimport { ExchangeEnvironmentService } from './exchange-environment.service';\nimport {\n  ExchangeCredential,\n  ExchangeType,\n  CreateExchangeCredentialRequest,\n  UpdateExchangeCredentialRequest,\n  ExchangeCredentialResponse,\n  ExchangeCredentialsListResponse,\n  TestConnectionRequest,\n  TestConnectionResponse\n} from '../models/exchange-credentials.model';\n\n/**\n * Service to manage exchange credentials for multiple exchanges and environments.\n *\n * This service provides:\n * - CRUD operations for exchange credentials\n * - Connection testing\n * - Active credential management\n * - Environment-aware state synchronization\n * - Reactive state via Angular signals\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangeCredentialsService {\n  // ============================================================================\n  // SIGNALS - State Management\n  // ============================================================================\n\n  private readonly _credentials = signal<ExchangeCredential[]>([]);\n  public readonly credentials = this._credentials.asReadonly();\n\n  private readonly _activeCredential = signal<ExchangeCredential | null>(null);\n  public readonly activeCredential = this._activeCredential.asReadonly();\n\n  private readonly _loading = signal<boolean>(false);\n  public readonly loading = this._loading.asReadonly();\n\n  private readonly _error = signal<string | null>(null);\n  public readonly error = this._error.asReadonly();\n\n  // ============================================================================\n  // COMPUTED SIGNALS - Derived State\n  // ============================================================================\n\n  public readonly hasCredentials = computed(() => this.credentials().length > 0);\n\n  public readonly activeExchange = computed(() =>\n    this.activeCredential()?.exchange ?? null\n  );\n\n  public readonly credentialsByExchange = computed(() =>\n    this.groupByExchange(this.credentials())\n  );\n\n  public readonly credentialCountByExchange = computed(() => {\n    const grouped = this.credentialsByExchange();\n    const counts = new Map<ExchangeType, number>();\n\n    grouped.forEach((creds, exchange) => {\n      counts.set(exchange, creds.length);\n    });\n\n    return counts;\n  });\n\n  public readonly availableExchanges = computed(() =>\n    Array.from(this.credentialsByExchange().keys())\n  );\n\n  // ============================================================================\n  // CONSTRUCTOR\n  // ============================================================================\n\n  constructor(\n    private http: HttpClient,\n    private environmentService: ExchangeEnvironmentService\n  ) {\n    // Note: We no longer filter credentials by environment\n    // The Profile -> Trading Platforms tab shows all credentials for all environments\n  }\n\n  // ============================================================================\n  // PUBLIC METHODS - CRUD Operations\n  // ============================================================================\n\n  /**\n   * Fetch all credentials from the backend\n   * Returns credentials for all environments\n   */\n  public fetchCredentials(): Observable<ExchangeCredential[]> {\n    this._loading.set(true);\n    this._error.set(null);\n\n    const url = getEndpointUrl('exchangeCredentials', 'list');\n\n    return this.http.get<ExchangeCredentialsListResponse>(url).pipe(\n      tap(response => {\n        console.log('[ExchangeCredentialsService] Fetched credentials:', response.data.credentials.length);\n        this.updateCredentialsState(response.data.credentials);\n        this._loading.set(false);\n      }),\n      map(response => response.data.credentials),\n      catchError(error => {\n        this._loading.set(false);\n        return this.handleError(error, 'Failed to fetch credentials');\n      })\n    );\n  }\n\n  /**\n   * Get a single credential by ID\n   */\n  public getCredentialById(id: string): Observable<ExchangeCredential> {\n    this._error.set(null);\n\n    const url = getParameterizedUrl('exchangeCredentials', 'getById', { id });\n\n    return this.http.get<ExchangeCredentialResponse>(url).pipe(\n      map(response => response.data),\n      catchError(error => {\n        return this.handleError(error, 'Failed to fetch credential');\n      })\n    );\n  }\n\n  /**\n   * Create a new exchange credential\n   */\n  public createCredential(data: CreateExchangeCredentialRequest): Observable<ExchangeCredential> {\n    this._error.set(null);\n\n    const url = getEndpointUrl('exchangeCredentials', 'create');\n\n    return this.http.post<ExchangeCredentialResponse>(url, data).pipe(\n      tap(response => {\n        console.log('[ExchangeCredentialsService] Created credential:', response.data.id);\n\n        // Add new credential to existing list\n        const updatedCredentials = [...this.credentials(), response.data];\n        this._credentials.set(updatedCredentials);\n      }),\n      map(response => response.data),\n      catchError(error => {\n        return this.handleError(error, 'Failed to create credential');\n      })\n    );\n  }\n\n  /**\n   * Update an existing credential (label, apiKey, apiSecret, isActive)\n   * Note: isActive is just a boolean flag - no automatic deactivation of other credentials\n   */\n  public updateCredential(\n    id: string,\n    data: UpdateExchangeCredentialRequest\n  ): Observable<ExchangeCredential> {\n    this._error.set(null);\n\n    const url = getParameterizedUrl('exchangeCredentials', 'update', { id });\n\n    return this.http.patch<ExchangeCredentialResponse>(url, data).pipe(\n      tap(response => {\n        console.log('[ExchangeCredentialsService] Updated credential:', id);\n\n        // Update the specific credential in the list\n        const currentCredentials = this.credentials();\n        const index = currentCredentials.findIndex(cred => cred.id === id);\n\n        if (index !== -1) {\n          const updatedCredentials = [...currentCredentials];\n          updatedCredentials[index] = response.data;\n          this._credentials.set(updatedCredentials);\n        }\n\n        // Update active credential reference if needed\n        if (this.activeCredential()?.id === id) {\n          this._activeCredential.set(response.data);\n        }\n      }),\n      map(response => response.data),\n      catchError(error => {\n        return this.handleError(error, 'Failed to update credential');\n      })\n    );\n  }\n\n  /**\n   * Delete a credential\n   */\n  public deleteCredential(id: string): Observable<void> {\n    this._error.set(null);\n\n    const url = getParameterizedUrl('exchangeCredentials', 'delete', { id });\n\n    return this.http.delete<{ success: boolean }>(url).pipe(\n      tap(() => {\n        console.log('[ExchangeCredentialsService] Deleted credential:', id);\n\n        // Remove credential from list\n        const updatedCredentials = this.credentials().filter(cred => cred.id !== id);\n        this._credentials.set(updatedCredentials);\n\n        // Clear active credential if it was deleted\n        if (this.activeCredential()?.id === id) {\n          this._activeCredential.set(null);\n        }\n      }),\n      map(() => undefined),\n      catchError(error => {\n        return this.handleError(error, 'Failed to delete credential');\n      })\n    );\n  }\n\n  /**\n   * Activate a credential (set as active for its exchange and environment)\n   * This now uses updateCredential with isActive: true\n   */\n  public activateCredential(id: string): Observable<ExchangeCredential> {\n    return this.updateCredential(id, { isActive: true });\n  }\n\n  // ============================================================================\n  // PUBLIC METHODS - Utility Functions\n  // ============================================================================\n\n  /**\n   * Test credential connection before saving\n   */\n  public testConnection(data: TestConnectionRequest): Observable<TestConnectionResponse> {\n    this._error.set(null);\n\n    const url = getEndpointUrl('exchangeCredentials', 'testConnection');\n\n    return this.http.post<TestConnectionResponse>(url, data).pipe(\n      tap(response => {\n        console.log('[ExchangeCredentialsService] Connection test result:', response.success);\n      }),\n      catchError(error => {\n        return this.handleError(error, 'Failed to test connection');\n      })\n    );\n  }\n\n  /**\n   * Get all credentials for a specific exchange\n   */\n  public getCredentialsForExchange(exchange: ExchangeType): ExchangeCredential[] {\n    return this.credentials().filter(cred => cred.exchange === exchange);\n  }\n\n  /**\n   * Get active credential for a specific exchange\n   */\n  public getActiveCredentialForExchange(exchange: ExchangeType): ExchangeCredential | null {\n    return this.credentials().find(cred => cred.exchange === exchange && cred.isActive) ?? null;\n  }\n\n  /**\n   * Check if user has credentials for a specific exchange\n   */\n  public hasCredentialsForExchange(exchange: ExchangeType): boolean {\n    return this.credentials().some(cred => cred.exchange === exchange);\n  }\n\n  /**\n   * Refresh credentials (re-fetch from backend)\n   */\n  public refreshCredentials(): void {\n    this.fetchCredentials().subscribe({\n      error: (err) => console.error('Failed to refresh credentials:', err)\n    });\n  }\n\n  /**\n   * Clear error state\n   */\n  public clearError(): void {\n    this._error.set(null);\n  }\n\n  /**\n   * Clear all state (useful for logout)\n   */\n  public clearState(): void {\n    this._credentials.set([]);\n    this._activeCredential.set(null);\n    this._loading.set(false);\n    this._error.set(null);\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS - Internal Helpers\n  // ============================================================================\n\n  /**\n   * Group credentials by exchange\n   */\n  private groupByExchange(credentials: ExchangeCredential[]): Map<ExchangeType, ExchangeCredential[]> {\n    const grouped = new Map<ExchangeType, ExchangeCredential[]>();\n\n    credentials.forEach(cred => {\n      const existing = grouped.get(cred.exchange) ?? [];\n      grouped.set(cred.exchange, [...existing, cred]);\n    });\n\n    return grouped;\n  }\n\n  /**\n   * Update internal state with new credentials\n   */\n  private updateCredentialsState(credentials: ExchangeCredential[]): void {\n    this._credentials.set(credentials);\n\n    // Find and set active credential (if any)\n    const active = credentials.find(cred => cred.isActive) ?? null;\n    this._activeCredential.set(active);\n  }\n\n  /**\n   * Centralized error handling\n   */\n  private handleError(error: HttpErrorResponse, context: string): Observable<never> {\n    console.error(`[ExchangeCredentialsService] ${context}:`, error);\n\n    let errorMessage = 'An unexpected error occurred';\n\n    if (error.error?.error?.message) {\n      errorMessage = error.error.error.message;\n    } else if (error.error?.message) {\n      errorMessage = error.error.message;\n    } else if (error.status === 0) {\n      errorMessage = 'Unable to connect to server. Please check your internet connection.';\n    } else if (error.status === 401) {\n      errorMessage = 'Authentication failed. Please log in again.';\n    } else if (error.status === 403) {\n      errorMessage = 'You do not have permission to perform this action.';\n    } else if (error.status === 404) {\n      errorMessage = 'The requested credential was not found.';\n    } else if (error.status === 409) {\n      errorMessage = 'A credential for this exchange and environment already exists.';\n    } else if (error.status === 422) {\n      errorMessage = 'Invalid data provided. Please check your input.';\n    } else if (error.status >= 500) {\n      errorMessage = 'Server error. Please try again later.';\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n\n    this._error.set(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n}\n","import { Injectable, Signal, WritableSignal, signal, computed } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport { EnvironmentType } from '../models/exchange-credentials.model';\n\n/**\n * Local storage key for persisting environment preference\n */\nconst STORAGE_KEY_ENVIRONMENT = 'exchange_environment';\n\n/**\n * Service to manage global exchange environment selection (testnet/mainnet).\n *\n * This service provides:\n * - Single source of truth for environment selection\n * - Persistence via localStorage\n * - Reactive updates via Angular signals\n * - RxJS observable compatibility\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangeEnvironmentService {\n  // ============================================================================\n  // SIGNALS - State Management\n  // ============================================================================\n\n  /**\n   * Internal writable signal for current environment\n   */\n  private readonly _currentEnvironment: WritableSignal<EnvironmentType>;\n\n  /**\n   * Public readonly signal exposing current environment\n   * Components should use this to react to environment changes\n   */\n  public readonly currentEnvironment: Signal<EnvironmentType>;\n\n  /**\n   * Computed signal indicating if current environment is testnet\n   */\n  public readonly isTestnet: Signal<boolean>;\n\n  /**\n   * Computed signal indicating if current environment is mainnet\n   */\n  public readonly isMainnet: Signal<boolean>;\n\n  /**\n   * Observable version of currentEnvironment for RxJS interoperability\n   */\n  public readonly currentEnvironment$: Observable<EnvironmentType>;\n\n  // ============================================================================\n  // CONSTRUCTOR\n  // ============================================================================\n\n  constructor() {\n    // Initialize from localStorage or default to TESTNET\n    const storedEnvironment = this.getStoredEnvironment();\n    const initialEnvironment = storedEnvironment ?? EnvironmentType.TESTNET;\n\n    // Initialize signals\n    this._currentEnvironment = signal(initialEnvironment);\n    this.currentEnvironment = this._currentEnvironment.asReadonly();\n\n    // Initialize computed signals\n    this.isTestnet = computed(() => this.currentEnvironment() === EnvironmentType.TESTNET);\n    this.isMainnet = computed(() => this.currentEnvironment() === EnvironmentType.MAINNET);\n\n    // Create observable from signal for RxJS compatibility\n    this.currentEnvironment$ = toObservable(this.currentEnvironment);\n\n    console.log('[ExchangeEnvironmentService] Initialized with environment:', initialEnvironment);\n  }\n\n  // ============================================================================\n  // PUBLIC METHODS - Environment Management\n  // ============================================================================\n\n  /**\n   * Set the current exchange environment\n   * Updates signal and persists to localStorage\n   */\n  public setEnvironment(env: EnvironmentType): void {\n    if (env !== this.currentEnvironment()) {\n      console.log('[ExchangeEnvironmentService] Changing environment:',\n        this.currentEnvironment(), '→', env);\n\n      this._currentEnvironment.set(env);\n      this.persistEnvironment(env);\n    }\n  }\n\n  /**\n   * Toggle between TESTNET and MAINNET\n   */\n  public toggleEnvironment(): void {\n    const newEnv = this.isTestnet()\n      ? EnvironmentType.MAINNET\n      : EnvironmentType.TESTNET;\n\n    this.setEnvironment(newEnv);\n  }\n\n  /**\n   * Get the display name for an environment\n   */\n  public getEnvironmentDisplayName(env: EnvironmentType): string {\n    const displayNames: Record<EnvironmentType, string> = {\n      [EnvironmentType.TESTNET]: 'Testnet',\n      [EnvironmentType.MAINNET]: 'Mainnet'\n    };\n    return displayNames[env];\n  }\n\n  /**\n   * Get the color associated with an environment (for UI styling)\n   */\n  public getEnvironmentColor(env: EnvironmentType): string {\n    const colors: Record<EnvironmentType, string> = {\n      [EnvironmentType.TESTNET]: '#FF9800',  // Orange\n      [EnvironmentType.MAINNET]: '#2196F3'   // Blue\n    };\n    return colors[env];\n  }\n\n  /**\n   * Get the icon name for an environment\n   */\n  public getEnvironmentIcon(env: EnvironmentType): string {\n    const icons: Record<EnvironmentType, string> = {\n      [EnvironmentType.TESTNET]: 'science',\n      [EnvironmentType.MAINNET]: 'verified_user'\n    };\n    return icons[env];\n  }\n\n  /**\n   * Clear stored environment preference\n   * Resets to default (TESTNET)\n   */\n  public clearEnvironment(): void {\n    console.log('[ExchangeEnvironmentService] Clearing environment preference');\n    localStorage.removeItem(STORAGE_KEY_ENVIRONMENT);\n    this._currentEnvironment.set(EnvironmentType.TESTNET);\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS - Persistence\n  // ============================================================================\n\n  /**\n   * Retrieve stored environment from localStorage\n   */\n  private getStoredEnvironment(): EnvironmentType | null {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY_ENVIRONMENT);\n\n      if (stored && this.isValidEnvironment(stored)) {\n        return stored as EnvironmentType;\n      }\n\n      return null;\n    } catch (error) {\n      console.warn('[ExchangeEnvironmentService] Failed to read from localStorage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Persist environment to localStorage\n   */\n  private persistEnvironment(env: EnvironmentType): void {\n    try {\n      localStorage.setItem(STORAGE_KEY_ENVIRONMENT, env);\n      console.log('[ExchangeEnvironmentService] Persisted environment:', env);\n    } catch (error) {\n      console.error('[ExchangeEnvironmentService] Failed to persist to localStorage:', error);\n    }\n  }\n\n  /**\n   * Validate if a string is a valid EnvironmentType\n   */\n  private isValidEnvironment(value: string): value is EnvironmentType {\n    return Object.values(EnvironmentType).includes(value as EnvironmentType);\n  }\n}\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","/**\n * @license Angular v18.0.1\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/di/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable((observer) => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: (value) => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable((observer) => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe((v) => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](guide/di/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup\n        ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef)\n        : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: (value) => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: (error) => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"names":["ExchangeType","EnvironmentType","CredentialStatus","ExchangeCredentialErrorCode","isExchangeCredential","obj","id","userId","Object","values","includes","exchange","environment","apiKeyPreview","isActive","isExchangeCredentialError","response","success","error","code","message","isValidExchangeType","value","isValidEnvironmentType","EXCHANGE_METADATA","BYBIT","name","logo","color","website","supportsTestnet","BINANCE","OKX","COINBASE","KRAKEN","BINGX","ENVIRONMENT_METADATA","TESTNET","icon","description","MAINNET","STATUS_METADATA","ACTIVE","INACTIVE","ERROR","EXPIRED","INSUFFICIENT_PERMISSIONS","getExchangeName","getExchangeLogo","getExchangeColor","getEnvironmentName","getEnvironmentColor","getStatusName","status","getStatusColor","exchangeSupportsTestnet","maskApiKey","apiKey","length","slice","toDisplayModel","credential","exchangeName","exchangeLogo","environmentName","environmentColor","statusColor","createdAtFormatted","formatRelativeTime","createdAt","updatedAtFormatted","updatedAt","dateString","date","Date","now","diffMs","getTime","diffSec","Math","floor","diffMin","diffHour","diffDay","toLocaleDateString","groupCredentialsByExchange","credentials","grouped","Map","forEach","cred","existing","get","set","Array","from","entries","map","creds","activeCredential","find","c","count","filterCredentials","options","filtered","filter","undefined","searchQuery","query","toLowerCase","label","sortBy","sort","a","b","aVal","bVal","sortDirection","signal","computed","throwError","catchError","tap","getEndpointUrl","getParameterizedUrl","ExchangeCredentialsService","constructor","http","environmentService","_credentials","asReadonly","_activeCredential","_loading","loading","_error","hasCredentials","activeExchange","credentialsByExchange","groupByExchange","credentialCountByExchange","counts","availableExchanges","keys","fetchCredentials","url","pipe","console","log","data","updateCredentialsState","handleError","getCredentialById","createCredential","post","updatedCredentials","updateCredential","patch","currentCredentials","index","findIndex","deleteCredential","delete","activateCredential","testConnection","getCredentialsForExchange","getActiveCredentialForExchange","hasCredentialsForExchange","some","refreshCredentials","subscribe","err","clearError","clearState","active","context","errorMessage","Error","i0","ɵɵinject","i1","HttpClient","i2","ExchangeEnvironmentService","factory","ɵfac","providedIn","toObservable","STORAGE_KEY_ENVIRONMENT","storedEnvironment","getStoredEnvironment","initialEnvironment","_currentEnvironment","currentEnvironment","isTestnet","isMainnet","currentEnvironment$","setEnvironment","env","persistEnvironment","toggleEnvironment","newEnv","getEnvironmentDisplayName","displayNames","colors","getEnvironmentIcon","icons","clearEnvironment","localStorage","removeItem","stored","getItem","isValidEnvironment","warn","setItem","Subject","dateTimestampProvider","ReplaySubject","_bufferSize","Infinity","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","max","next","isStopped","push","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","i","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","delegate","assertInInjectionContext","inject","DestroyRef","ɵRuntimeError","ɵgetOutputDestroyRef","Injector","effect","untracked","assertNotInReactiveContext","Observable","takeUntil","takeUntilDestroyed","destroyRef","destroyed$","observer","unregisterFn","onDestroy","bind","source","OutputFromObservableRef","destroyed","callbackFn","ngDevMode","unsubscribe","outputFromObservable","observable","opts","outputToObservable","ref","complete","v","injector","subject","watcher","manualCleanup","destroy","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","rejectErrors","current"],"sourceRoot":"webpack:///","x_google_ignoreList":[3,4,5]}