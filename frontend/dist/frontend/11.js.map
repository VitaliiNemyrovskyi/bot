{"version":3,"file":"11.js","mappings":"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","sources":["./src/app/components/trading/funding-revenue/funding-revenue.component.ts","./src/app/components/trading/funding-revenue/funding-revenue.component.html","./src/app/services/funding-arbitrage.service.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy, inject, signal, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport {\n  FundingArbitrageService,\n  FundingArbitrageRevenueResponse,\n  FundingArbitrageDeal,\n  RevenueBySymbol,\n  RevenueByExchange\n} from '../../../services/funding-arbitrage.service';\nimport { TranslationService } from '../../../services/translation.service';\nimport { CardComponent, CardHeaderComponent, CardTitleComponent, CardContentComponent } from '../../ui/card/card.component';\nimport { ButtonComponent } from '../../ui/button/button.component';\n\n/**\n * Funding Revenue Component\n *\n * Displays comprehensive revenue statistics for funding arbitrage deals:\n * - Summary metrics (total revenue, deals, win rate, etc.)\n * - Revenue breakdown by symbol\n * - Revenue breakdown by exchange\n * - Individual deal list\n * - Date range filtering\n */\n@Component({\n  selector: 'app-funding-revenue',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    CardComponent,\n    CardHeaderComponent,\n    CardTitleComponent,\n    CardContentComponent,\n    ButtonComponent\n  ],\n  templateUrl: './funding-revenue.component.html',\n  styleUrl: './funding-revenue.component.scss'\n})\nexport class FundingRevenueComponent implements OnInit, OnDestroy {\n  private fundingArbitrageService = inject(FundingArbitrageService);\n  private translationService = inject(TranslationService);\n\n  // Expose utilities to template\n  Math = Math;\n\n  // State signals\n  revenueData = signal<FundingArbitrageRevenueResponse | null>(null);\n  isLoading = signal<boolean>(false);\n  error = signal<string | null>(null);\n\n  // Filter signals\n  startDate = signal<string>(this.getDefaultStartDate());\n  endDate = signal<string>(this.getDefaultEndDate());\n  selectedExchange = signal<string>('');\n  selectedSymbol = signal<string>('');\n\n  // UI state\n  showFilters = signal<boolean>(true);\n  expandedDealId = signal<string | null>(null);\n\n  // Computed signals\n  summary = computed(() => this.revenueData()?.data?.summary);\n  bySymbol = computed(() => this.revenueData()?.data?.bySymbol || []);\n  byExchange = computed(() => this.revenueData()?.data?.byExchange || []);\n  deals = computed(() => this.revenueData()?.data?.deals || []);\n  timeline = computed(() => this.revenueData()?.data?.timeline || []);\n\n  // Computed metrics\n  totalFees = computed(() => {\n    const dealsData = this.deals();\n    return dealsData.reduce(\n      (sum, deal) => sum + deal.primaryTradingFees + deal.hedgeTradingFees,\n      0\n    );\n  });\n\n  netProfit = computed(() => {\n    const summaryData = this.summary();\n    const fees = this.totalFees();\n    return summaryData ? summaryData.totalRevenue - fees : 0;\n  });\n\n  // Unique exchanges and symbols for filters\n  availableExchanges = computed(() => {\n    const exchanges = new Set<string>();\n    this.byExchange().forEach(item => exchanges.add(item.exchange));\n    return Array.from(exchanges).sort();\n  });\n\n  availableSymbols = computed(() => {\n    const symbols = new Set<string>();\n    this.bySymbol().forEach(item => symbols.add(item.symbol));\n    return Array.from(symbols).sort();\n  });\n\n  private subscription?: Subscription;\n\n  ngOnInit(): void {\n    this.loadRevenue();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  translate(key: string): string {\n    return this.translationService.translate(key);\n  }\n\n  /**\n   * Load revenue data with current filters\n   */\n  loadRevenue(): void {\n    this.isLoading.set(true);\n    this.error.set(null);\n\n    const startDateValue = this.startDate() || undefined;\n    const endDateValue = this.endDate() || undefined;\n    const exchangeValue = this.selectedExchange() || undefined;\n    const symbolValue = this.selectedSymbol() || undefined;\n\n    this.subscription = this.fundingArbitrageService\n      .getRevenue(startDateValue, endDateValue, exchangeValue, symbolValue)\n      .subscribe({\n        next: (response) => {\n          this.revenueData.set(response);\n          this.isLoading.set(false);\n        },\n        error: (err) => {\n          this.error.set(err.message || 'Failed to load revenue data');\n          this.isLoading.set(false);\n        }\n      });\n  }\n\n  /**\n   * Refresh revenue data\n   */\n  refreshRevenue(): void {\n    this.loadRevenue();\n  }\n\n  /**\n   * Apply filters and reload data\n   */\n  applyFilters(): void {\n    this.loadRevenue();\n  }\n\n  /**\n   * Clear all filters and reload\n   */\n  clearFilters(): void {\n    this.startDate.set(this.getDefaultStartDate());\n    this.endDate.set(this.getDefaultEndDate());\n    this.selectedExchange.set('');\n    this.selectedSymbol.set('');\n    this.loadRevenue();\n  }\n\n  /**\n   * Toggle filters panel\n   */\n  toggleFilters(): void {\n    this.showFilters.update(value => !value);\n  }\n\n  /**\n   * Toggle deal expansion\n   */\n  toggleDealExpansion(dealId: string): void {\n    const current = this.expandedDealId();\n    this.expandedDealId.set(current === dealId ? null : dealId);\n  }\n\n  /**\n   * Check if deal is expanded\n   */\n  isDealExpanded(dealId: string): boolean {\n    return this.expandedDealId() === dealId;\n  }\n\n  /**\n   * Format currency value\n   */\n  formatCurrency(value: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4\n    }).format(value);\n  }\n\n  /**\n   * Format percentage value\n   */\n  formatPercent(value: number): string {\n    return `${value.toFixed(2)}%`;\n  }\n\n  /**\n   * Format date\n   */\n  formatDate(dateString: string | null): string {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  /**\n   * Format duration in seconds\n   */\n  formatDuration(seconds: number | null): string {\n    if (seconds === null) return 'N/A';\n\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  }\n\n  /**\n   * Get CSS class for positive/negative values\n   */\n  getValueClass(value: number): string {\n    if (value > 0) return 'positive';\n    if (value < 0) return 'negative';\n    return 'neutral';\n  }\n\n  /**\n   * Get default start date (30 days ago)\n   */\n  private getDefaultStartDate(): string {\n    const date = new Date();\n    date.setDate(date.getDate() - 30);\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\n   * Get default end date (today)\n   */\n  private getDefaultEndDate(): string {\n    const date = new Date();\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\n   * Calculate win rate color class\n   */\n  getWinRateClass(winRate: number): string {\n    if (winRate >= 70) return 'excellent';\n    if (winRate >= 50) return 'good';\n    if (winRate >= 30) return 'average';\n    return 'poor';\n  }\n\n  /**\n   * Format number with thousands separator\n   */\n  formatNumber(value: number, decimals: number = 0): string {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(value);\n  }\n}\n","<div class=\"funding-revenue-container\">\n  <!-- Header -->\n  <div class=\"funding-revenue-header\">\n    <h2 class=\"funding-revenue-title\">Funding Arbitrage Revenue</h2>\n    <div class=\"funding-revenue-actions\">\n      <ui-button\n        variant=\"ghost\"\n        size=\"small\"\n        (clicked)=\"toggleFilters()\"\n        [attr.aria-expanded]=\"showFilters()\">\n        <span>{{ showFilters() ? 'Hide Filters' : 'Show Filters' }}</span>\n      </ui-button>\n      <ui-button\n        variant=\"primary\"\n        size=\"small\"\n        (clicked)=\"refreshRevenue()\"\n        [loading]=\"isLoading()\">\n        <span>Refresh</span>\n      </ui-button>\n    </div>\n  </div>\n\n  <!-- Filters Panel -->\n  @if (showFilters()) {\n    <ui-card variant=\"outlined\" class=\"filters-card\">\n      <ui-card-content>\n        <div class=\"filters-container\">\n          <div class=\"filter-group\">\n            <label class=\"filter-label\">Start Date</label>\n            <input\n              type=\"date\"\n              class=\"filter-input\"\n              [(ngModel)]=\"startDate\"\n            />\n          </div>\n\n          <div class=\"filter-group\">\n            <label class=\"filter-label\">End Date</label>\n            <input\n              type=\"date\"\n              class=\"filter-input\"\n              [(ngModel)]=\"endDate\"\n            />\n          </div>\n\n          <div class=\"filter-group\">\n            <label class=\"filter-label\">Exchange</label>\n            <select class=\"filter-input filter-select\" [(ngModel)]=\"selectedExchange\">\n              <option value=\"\">All Exchanges</option>\n              @for (exchange of availableExchanges(); track exchange) {\n                <option [value]=\"exchange\">{{ exchange }}</option>\n              }\n            </select>\n          </div>\n\n          <div class=\"filter-group\">\n            <label class=\"filter-label\">Symbol</label>\n            <select class=\"filter-input filter-select\" [(ngModel)]=\"selectedSymbol\">\n              <option value=\"\">All Symbols</option>\n              @for (symbol of availableSymbols(); track symbol) {\n                <option [value]=\"symbol\">{{ symbol }}</option>\n              }\n            </select>\n          </div>\n\n          <div class=\"filter-actions\">\n            <ui-button variant=\"primary\" size=\"small\" (clicked)=\"applyFilters()\">\n              Apply Filters\n            </ui-button>\n            <ui-button variant=\"ghost\" size=\"small\" (clicked)=\"clearFilters()\">\n              Clear\n            </ui-button>\n          </div>\n        </div>\n      </ui-card-content>\n    </ui-card>\n  }\n\n  <!-- Loading State -->\n  @if (isLoading()) {\n    <div class=\"loading-state\">\n      <p>Loading revenue data...</p>\n    </div>\n  }\n\n  <!-- Error State -->\n  @if (error() && !isLoading()) {\n    <div class=\"error-state\">\n      <p>{{ error() }}</p>\n      <ui-button variant=\"primary\" size=\"small\" (clicked)=\"refreshRevenue()\">\n        Retry\n      </ui-button>\n    </div>\n  }\n\n  <!-- Revenue Data -->\n  @if (revenueData() && !isLoading() && !error()) {\n    <!-- Summary Cards -->\n    <div class=\"summary-grid\">\n      <!-- Total Revenue -->\n      <ui-card variant=\"elevated\" class=\"metric-card revenue-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">💰</span>\n            <span class=\"metric-label\">Total Revenue</span>\n          </div>\n          <div class=\"metric-value\" [class]=\"getValueClass(summary()!.totalRevenue)\">\n            {{ formatCurrency(summary()!.totalRevenue) }}\n          </div>\n          <div class=\"metric-subtext\">\n            Net: {{ formatCurrency(netProfit()) }}\n          </div>\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Total Deals -->\n      <ui-card variant=\"elevated\" class=\"metric-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">📊</span>\n            <span class=\"metric-label\">Total Deals</span>\n          </div>\n          <div class=\"metric-value\">\n            {{ summary()!.totalDeals }}\n          </div>\n          <div class=\"metric-subtext\">\n            Profitable: {{ summary()!.profitableDeals }} | Losing: {{ summary()!.losingDeals }}\n          </div>\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Win Rate -->\n      <ui-card variant=\"elevated\" class=\"metric-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">🎯</span>\n            <span class=\"metric-label\">Win Rate</span>\n          </div>\n          <div class=\"metric-value\" [class]=\"getWinRateClass(summary()!.winRate)\">\n            {{ formatPercent(summary()!.winRate) }}\n          </div>\n          <div class=\"metric-subtext\">\n            {{ summary()!.profitableDeals }} / {{ summary()!.totalDeals }} trades\n          </div>\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Total Funding Earned -->\n      <ui-card variant=\"elevated\" class=\"metric-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">💵</span>\n            <span class=\"metric-label\">Funding Earned</span>\n          </div>\n          <div class=\"metric-value positive\">\n            {{ formatCurrency(summary()!.totalFundingEarned) }}\n          </div>\n          <div class=\"metric-subtext\">\n            From funding payments\n          </div>\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Total Trading P&L -->\n      <ui-card variant=\"elevated\" class=\"metric-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">📈</span>\n            <span class=\"metric-label\">Trading P&L</span>\n          </div>\n          <div class=\"metric-value\" [class]=\"getValueClass(summary()!.totalTradingPnl)\">\n            {{ formatCurrency(summary()!.totalTradingPnl) }}\n          </div>\n          <div class=\"metric-subtext\">\n            Price movement impact\n          </div>\n        </ui-card-content>\n      </ui-card>\n\n      <!-- Average Revenue Per Deal -->\n      <ui-card variant=\"elevated\" class=\"metric-card\">\n        <ui-card-content>\n          <div class=\"metric-header\">\n            <span class=\"metric-icon\">📊</span>\n            <span class=\"metric-label\">Avg per Deal</span>\n          </div>\n          <div class=\"metric-value\" [class]=\"getValueClass(summary()!.avgRevenuePerDeal)\">\n            {{ formatCurrency(summary()!.avgRevenuePerDeal) }}\n          </div>\n          <div class=\"metric-subtext\">\n            Average profit per trade\n          </div>\n        </ui-card-content>\n      </ui-card>\n    </div>\n\n    <!-- Best and Worst Deals -->\n    @if (summary()!.bestDeal || summary()!.worstDeal) {\n      <div class=\"best-worst-grid\">\n        <!-- Best Deal -->\n        @if (summary()!.bestDeal) {\n          <ui-card variant=\"elevated\" class=\"deal-highlight-card best-deal-card\">\n            <ui-card-header>\n              <ui-card-title>Best Deal 🏆</ui-card-title>\n            </ui-card-header>\n            <ui-card-content>\n              <div class=\"deal-highlight-info\">\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Symbol:</span>\n                  <span class=\"deal-value\">{{ summary()!.bestDeal!.symbol }}</span>\n                </div>\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Revenue:</span>\n                  <span class=\"deal-value positive\">{{ formatCurrency(summary()!.bestDeal!.revenue) }}</span>\n                </div>\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Date:</span>\n                  <span class=\"deal-value\">{{ formatDate(summary()!.bestDeal!.date) }}</span>\n                </div>\n              </div>\n            </ui-card-content>\n          </ui-card>\n        }\n\n        <!-- Worst Deal -->\n        @if (summary()!.worstDeal) {\n          <ui-card variant=\"elevated\" class=\"deal-highlight-card worst-deal-card\">\n            <ui-card-header>\n              <ui-card-title>Worst Deal 📉</ui-card-title>\n            </ui-card-header>\n            <ui-card-content>\n              <div class=\"deal-highlight-info\">\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Symbol:</span>\n                  <span class=\"deal-value\">{{ summary()!.worstDeal!.symbol }}</span>\n                </div>\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Revenue:</span>\n                  <span class=\"deal-value negative\">{{ formatCurrency(summary()!.worstDeal!.revenue) }}</span>\n                </div>\n                <div class=\"deal-highlight-row\">\n                  <span class=\"deal-label\">Date:</span>\n                  <span class=\"deal-value\">{{ formatDate(summary()!.worstDeal!.date) }}</span>\n                </div>\n              </div>\n            </ui-card-content>\n          </ui-card>\n        }\n      </div>\n    }\n\n    <!-- Revenue by Symbol -->\n    @if (bySymbol().length > 0) {\n      <ui-card variant=\"outlined\" class=\"data-table-card\">\n        <ui-card-header>\n          <ui-card-title>Revenue by Symbol</ui-card-title>\n        </ui-card-header>\n        <ui-card-content>\n          <div class=\"table-wrapper\">\n            <table class=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Symbol</th>\n                  <th class=\"text-right\">Deals</th>\n                  <th class=\"text-right\">Total Revenue</th>\n                  <th class=\"text-right\">Avg Revenue</th>\n                  <th class=\"text-right\">Funding Earned</th>\n                </tr>\n              </thead>\n              <tbody>\n                @for (item of bySymbol(); track item.symbol) {\n                  <tr>\n                    <td class=\"symbol-cell\">{{ item.symbol }}</td>\n                    <td class=\"text-right\">{{ item.deals }}</td>\n                    <td class=\"text-right\" [class]=\"getValueClass(item.revenue)\">\n                      {{ formatCurrency(item.revenue) }}\n                    </td>\n                    <td class=\"text-right\" [class]=\"getValueClass(item.avgRevenue)\">\n                      {{ formatCurrency(item.avgRevenue) }}\n                    </td>\n                    <td class=\"text-right positive\">\n                      {{ formatCurrency(item.fundingEarned) }}\n                    </td>\n                  </tr>\n                }\n              </tbody>\n            </table>\n          </div>\n        </ui-card-content>\n      </ui-card>\n    }\n\n    <!-- Revenue by Exchange -->\n    @if (byExchange().length > 0) {\n      <ui-card variant=\"outlined\" class=\"data-table-card\">\n        <ui-card-header>\n          <ui-card-title>Revenue by Exchange</ui-card-title>\n        </ui-card-header>\n        <ui-card-content>\n          <div class=\"table-wrapper\">\n            <table class=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Exchange</th>\n                  <th class=\"text-right\">Deals</th>\n                  <th class=\"text-right\">Total Revenue</th>\n                  <th class=\"text-right\">Avg Revenue</th>\n                </tr>\n              </thead>\n              <tbody>\n                @for (item of byExchange(); track item.exchange) {\n                  <tr>\n                    <td class=\"exchange-cell\">\n                      <span class=\"exchange-badge\" [class]=\"'badge-' + item.exchange.toLowerCase()\">\n                        {{ item.exchange }}\n                      </span>\n                    </td>\n                    <td class=\"text-right\">{{ item.deals }}</td>\n                    <td class=\"text-right\" [class]=\"getValueClass(item.revenue)\">\n                      {{ formatCurrency(item.revenue) }}\n                    </td>\n                    <td class=\"text-right\" [class]=\"getValueClass(item.avgRevenue)\">\n                      {{ formatCurrency(item.avgRevenue) }}\n                    </td>\n                  </tr>\n                }\n              </tbody>\n            </table>\n          </div>\n        </ui-card-content>\n      </ui-card>\n    }\n\n    <!-- Individual Deals -->\n    @if (deals().length > 0) {\n      <ui-card variant=\"outlined\" class=\"deals-card\">\n        <ui-card-header>\n          <ui-card-title>Completed Deals ({{ deals().length }})</ui-card-title>\n        </ui-card-header>\n        <ui-card-content>\n          <div class=\"deals-list\">\n            @for (deal of deals(); track deal.id) {\n              <div class=\"deal-item\" [class.expanded]=\"isDealExpanded(deal.id)\">\n                <!-- Deal Header (always visible) -->\n                <div class=\"deal-header\" (click)=\"toggleDealExpansion(deal.id)\">\n                  <div class=\"deal-main-info\">\n                    <span class=\"deal-symbol\">{{ deal.symbol }}</span>\n                    <span class=\"deal-exchanges\">\n                      {{ deal.primaryExchange }} ↔ {{ deal.hedgeExchange }}\n                    </span>\n                    <span class=\"deal-position-type\" [class]=\"deal.positionType\">\n                      {{ deal.positionType.toUpperCase() }}\n                    </span>\n                  </div>\n                  <div class=\"deal-summary-info\">\n                    <span class=\"deal-pnl\" [class]=\"getValueClass(deal.realizedPnl)\">\n                      {{ formatCurrency(deal.realizedPnl) }}\n                    </span>\n                    <span class=\"deal-expand-icon\">\n                      {{ isDealExpanded(deal.id) ? '▲' : '▼' }}\n                    </span>\n                  </div>\n                </div>\n\n                <!-- Deal Details (expandable) -->\n                @if (isDealExpanded(deal.id)) {\n                  <div class=\"deal-details\">\n                    <div class=\"deal-details-grid\">\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Quantity:</span>\n                        <span class=\"detail-value\">{{ formatNumber(deal.quantity, 6) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Funding Rate:</span>\n                        <span class=\"detail-value\">{{ formatPercent(deal.fundingRate * 100) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Entry Price:</span>\n                        <span class=\"detail-value\">{{ formatCurrency(deal.entryPrice) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Hedge Entry:</span>\n                        <span class=\"detail-value\">{{ formatCurrency(deal.hedgeEntryPrice) }}</span>\n                      </div>\n                      @if (deal.primaryExitPrice !== null) {\n                        <div class=\"detail-row\">\n                          <span class=\"detail-label\">Exit Price:</span>\n                          <span class=\"detail-value\">{{ formatCurrency(deal.primaryExitPrice) }}</span>\n                        </div>\n                      }\n                      @if (deal.hedgeExitPrice !== null) {\n                        <div class=\"detail-row\">\n                          <span class=\"detail-label\">Hedge Exit:</span>\n                          <span class=\"detail-value\">{{ formatCurrency(deal.hedgeExitPrice) }}</span>\n                        </div>\n                      }\n                      <div class=\"detail-row highlight\">\n                        <span class=\"detail-label\">Funding Earned:</span>\n                        <span class=\"detail-value positive\">{{ formatCurrency(deal.fundingEarned) }}</span>\n                      </div>\n                      <div class=\"detail-row highlight\">\n                        <span class=\"detail-label\">Realized P&L:</span>\n                        <span class=\"detail-value\" [class]=\"getValueClass(deal.realizedPnl)\">\n                          {{ formatCurrency(deal.realizedPnl) }}\n                        </span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Primary Fees:</span>\n                        <span class=\"detail-value\">{{ formatCurrency(deal.primaryTradingFees) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Hedge Fees:</span>\n                        <span class=\"detail-value\">{{ formatCurrency(deal.hedgeTradingFees) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Executed At:</span>\n                        <span class=\"detail-value\">{{ formatDate(deal.executedAt) }}</span>\n                      </div>\n                      <div class=\"detail-row\">\n                        <span class=\"detail-label\">Closed At:</span>\n                        <span class=\"detail-value\">{{ formatDate(deal.closedAt) }}</span>\n                      </div>\n                      @if (deal.duration !== null) {\n                        <div class=\"detail-row\">\n                          <span class=\"detail-label\">Duration:</span>\n                          <span class=\"detail-value\">{{ formatDuration(deal.duration) }}</span>\n                        </div>\n                      }\n                    </div>\n                  </div>\n                }\n              </div>\n            }\n          </div>\n        </ui-card-content>\n      </ui-card>\n    }\n\n    <!-- Empty State -->\n    @if (deals().length === 0) {\n      <div class=\"empty-state\">\n        <p>No completed deals found for the selected filters.</p>\n        <p class=\"help-text\">Try adjusting your date range or clearing filters.</p>\n      </div>\n    }\n  }\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { getEndpointUrl, buildUrlWithQuery } from '../config/app.config';\n\n/**\n * Individual Deal Information\n */\nexport interface FundingArbitrageDeal {\n  id: string;\n  symbol: string;\n  primaryExchange: string;\n  hedgeExchange: string;\n  fundingRate: number;\n  positionType: 'long' | 'short';\n  quantity: number;\n  entryPrice: number;\n  hedgeEntryPrice: number;\n  primaryExitPrice: number | null;\n  hedgeExitPrice: number | null;\n  fundingEarned: number;\n  realizedPnl: number;\n  primaryTradingFees: number;\n  hedgeTradingFees: number;\n  executedAt: string | null;\n  closedAt: string | null;\n  duration: number | null; // in seconds\n}\n\n/**\n * Best/Worst Deal Summary\n */\nexport interface DealSummary {\n  symbol: string;\n  revenue: number;\n  date: string | null;\n}\n\n/**\n * Revenue Summary Statistics\n */\nexport interface RevenueSummary {\n  totalDeals: number;\n  totalRevenue: number;\n  totalFundingEarned: number;\n  totalTradingPnl: number;\n  avgRevenuePerDeal: number;\n  winRate: number;\n  profitableDeals: number;\n  losingDeals: number;\n  bestDeal: DealSummary | null;\n  worstDeal: DealSummary | null;\n}\n\n/**\n * Revenue By Symbol\n */\nexport interface RevenueBySymbol {\n  symbol: string;\n  deals: number;\n  revenue: number;\n  avgRevenue: number;\n  fundingEarned: number;\n}\n\n/**\n * Revenue By Exchange\n */\nexport interface RevenueByExchange {\n  exchange: string;\n  deals: number;\n  revenue: number;\n  avgRevenue: number;\n}\n\n/**\n * Daily Revenue Timeline\n */\nexport interface RevenueTimeline {\n  date: string; // YYYY-MM-DD\n  deals: number;\n  revenue: number;\n  fundingEarned: number;\n}\n\n/**\n * Applied Filters\n */\nexport interface RevenueFilters {\n  startDate: string;\n  endDate: string;\n  exchange: string | null;\n  symbol: string | null;\n}\n\n/**\n * Complete Revenue Response\n */\nexport interface FundingArbitrageRevenueResponse {\n  success: boolean;\n  data: {\n    summary: RevenueSummary;\n    bySymbol: RevenueBySymbol[];\n    byExchange: RevenueByExchange[];\n    deals: FundingArbitrageDeal[];\n    timeline: RevenueTimeline[];\n  };\n  filters: RevenueFilters;\n  timestamp: string;\n}\n\n/**\n * Funding Arbitrage Service\n *\n * Handles all funding arbitrage revenue operations including:\n * - Fetching revenue statistics\n * - Filtering by date range, exchange, and symbol\n * - Managing revenue state with reactive BehaviorSubjects\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FundingArbitrageService {\n  private revenueSubject = new BehaviorSubject<FundingArbitrageRevenueResponse | null>(null);\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  private errorSubject = new BehaviorSubject<string | null>(null);\n\n  public readonly revenue$ = this.revenueSubject.asObservable();\n  public readonly loading$ = this.loadingSubject.asObservable();\n  public readonly error$ = this.errorSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Get comprehensive revenue statistics for funding arbitrage\n   * @param startDate - Optional start date (ISO string)\n   * @param endDate - Optional end date (ISO string)\n   * @param exchange - Optional exchange filter\n   * @param symbol - Optional symbol filter\n   * @returns Observable<FundingArbitrageRevenueResponse>\n   */\n  getRevenue(\n    startDate?: string,\n    endDate?: string,\n    exchange?: string,\n    symbol?: string\n  ): Observable<FundingArbitrageRevenueResponse> {\n    this.loadingSubject.next(true);\n    this.errorSubject.next(null);\n\n    const baseUrl = getEndpointUrl('fundingArbitrage', 'revenue');\n    const params: Record<string, string> = {};\n\n    if (startDate) params['startDate'] = startDate;\n    if (endDate) params['endDate'] = endDate;\n    if (exchange) params['exchange'] = exchange;\n    if (symbol) params['symbol'] = symbol;\n\n    const url = Object.keys(params).length > 0 ? buildUrlWithQuery(baseUrl, params) : baseUrl;\n\n    return this.http.get<FundingArbitrageRevenueResponse>(url).pipe(\n      tap(response => {\n        this.revenueSubject.next(response);\n        this.loadingSubject.next(false);\n      }),\n      catchError(error => {\n        this.loadingSubject.next(false);\n        const errorMessage = this.handleError(error);\n        this.errorSubject.next(errorMessage);\n        return throwError(() => new Error(errorMessage));\n      })\n    );\n  }\n\n  /**\n   * Refresh revenue data with current filters\n   */\n  refreshRevenue(): Observable<FundingArbitrageRevenueResponse> {\n    const currentRevenue = this.revenueSubject.value;\n    if (!currentRevenue) {\n      return this.getRevenue();\n    }\n\n    const filters = currentRevenue.filters;\n    return this.getRevenue(\n      filters.startDate,\n      filters.endDate,\n      filters.exchange || undefined,\n      filters.symbol || undefined\n    );\n  }\n\n  /**\n   * Get current revenue data from cache (if available)\n   */\n  getCurrentRevenue(): FundingArbitrageRevenueResponse | null {\n    return this.revenueSubject.value;\n  }\n\n  /**\n   * Clear cached revenue data\n   */\n  clearRevenue(): void {\n    this.revenueSubject.next(null);\n    this.errorSubject.next(null);\n  }\n\n  /**\n   * Check if revenue data is currently loading\n   */\n  isLoading(): boolean {\n    return this.loadingSubject.value;\n  }\n\n  /**\n   * Get current error (if any)\n   */\n  getCurrentError(): string | null {\n    return this.errorSubject.value;\n  }\n\n  /**\n   * Calculate total fees from deals\n   */\n  calculateTotalFees(deals: FundingArbitrageDeal[]): number {\n    return deals.reduce(\n      (total, deal) => total + deal.primaryTradingFees + deal.hedgeTradingFees,\n      0\n    );\n  }\n\n  /**\n   * Calculate net profit (revenue - fees)\n   */\n  calculateNetProfit(totalRevenue: number, totalFees: number): number {\n    return totalRevenue - totalFees;\n  }\n\n  /**\n   * Format duration in seconds to human-readable string\n   */\n  formatDuration(seconds: number): string {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  }\n\n  /**\n   * Handle HTTP errors and return user-friendly messages\n   */\n  private handleError(error: HttpErrorResponse): string {\n    console.error('Funding Arbitrage Service Error:', error);\n\n    if (error.error?.message) {\n      return error.error.message;\n    }\n\n    if (error.status === 0) {\n      return 'Unable to connect to the server. Please check your internet connection.';\n    }\n\n    if (error.status === 401) {\n      return 'Unauthorized. Please log in again.';\n    }\n\n    if (error.status === 403) {\n      return 'Access forbidden. You do not have permission to view this data.';\n    }\n\n    if (error.status === 400) {\n      return error.error?.message || 'Invalid request parameters.';\n    }\n\n    if (error.status >= 500) {\n      return 'Server error. Please try again later.';\n    }\n\n    return error.message || 'An unexpected error occurred. Please try again.';\n  }\n}\n"],"names":["inject","signal","computed","CommonModule","FormsModule","FundingArbitrageService","TranslationService","CardComponent","CardHeaderComponent","CardTitleComponent","CardContentComponent","ButtonComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","exchange_r3","ɵɵadvance","ɵɵtextInterpolate","symbol_r4","ɵɵtwoWayListener","FundingRevenueComponent_Conditional_11_Template_input_ngModelChange_6_listener","$event","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵtwoWayBindingSet","startDate","ɵɵresetView","FundingRevenueComponent_Conditional_11_Template_input_ngModelChange_10_listener","endDate","FundingRevenueComponent_Conditional_11_Template_select_ngModelChange_14_listener","selectedExchange","ɵɵrepeaterCreate","FundingRevenueComponent_Conditional_11_For_18_Template","ɵɵrepeaterTrackByIdentity","FundingRevenueComponent_Conditional_11_Template_select_ngModelChange_22_listener","selectedSymbol","FundingRevenueComponent_Conditional_11_For_26_Template","ɵɵlistener","FundingRevenueComponent_Conditional_11_Template_ui_button_clicked_28_listener","applyFilters","FundingRevenueComponent_Conditional_11_Template_ui_button_clicked_30_listener","clearFilters","ɵɵtwoWayProperty","ɵɵrepeater","availableExchanges","availableSymbols","FundingRevenueComponent_Conditional_13_Template_ui_button_clicked_3_listener","_r5","refreshRevenue","error","summary","bestDeal","symbol","formatCurrency","revenue","formatDate","date","worstDeal","ɵɵtemplate","FundingRevenueComponent_Conditional_14_Conditional_67_Conditional_1_Template","FundingRevenueComponent_Conditional_14_Conditional_67_Conditional_2_Template","ɵɵconditional","item_r6","deals","ɵɵclassMap","getValueClass","ɵɵtextInterpolate1","avgRevenue","fundingEarned","FundingRevenueComponent_Conditional_14_Conditional_68_For_21_Template","_forTrack0","bySymbol","item_r7","exchange","toLowerCase","FundingRevenueComponent_Conditional_14_Conditional_69_For_19_Template","_forTrack1","byExchange","deal_r9","primaryExitPrice","hedgeExitPrice","formatDuration","duration","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Conditional_14_Conditional_22_Template","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Conditional_14_Conditional_23_Template","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Conditional_14_Conditional_54_Template","formatNumber","quantity","formatPercent","fundingRate","entryPrice","hedgeEntryPrice","realizedPnl","primaryTradingFees","hedgeTradingFees","executedAt","closedAt","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Template_div_click_1_listener","_r8","$implicit","toggleDealExpansion","id","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Conditional_14_Template","ɵɵclassProp","isDealExpanded","ɵɵtextInterpolate2","primaryExchange","hedgeExchange","positionType","toUpperCase","FundingRevenueComponent_Conditional_14_Conditional_70_For_7_Template","_forTrack2","length","FundingRevenueComponent_Conditional_14_Conditional_67_Template","FundingRevenueComponent_Conditional_14_Conditional_68_Template","FundingRevenueComponent_Conditional_14_Conditional_69_Template","FundingRevenueComponent_Conditional_14_Conditional_70_Template","FundingRevenueComponent_Conditional_14_Conditional_71_Template","totalRevenue","netProfit","totalDeals","profitableDeals","losingDeals","getWinRateClass","winRate","totalFundingEarned","totalTradingPnl","avgRevenuePerDeal","FundingRevenueComponent","constructor","fundingArbitrageService","translationService","Math","revenueData","isLoading","getDefaultStartDate","getDefaultEndDate","showFilters","expandedDealId","data","timeline","totalFees","dealsData","reduce","sum","deal","summaryData","fees","exchanges","Set","forEach","item","add","Array","from","sort","symbols","ngOnInit","loadRevenue","ngOnDestroy","subscription","unsubscribe","translate","key","set","startDateValue","undefined","endDateValue","exchangeValue","symbolValue","getRevenue","subscribe","next","response","err","message","toggleFilters","update","value","dealId","current","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","toFixed","dateString","Date","toLocaleString","year","month","day","hour","minute","seconds","hours","floor","minutes","secs","setDate","getDate","toISOString","split","decimals","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","FundingRevenueComponent_Template","rf","ctx","FundingRevenueComponent_Template_ui_button_clicked_5_listener","FundingRevenueComponent_Template_ui_button_clicked_8_listener","FundingRevenueComponent_Conditional_11_Template","FundingRevenueComponent_Conditional_12_Template","FundingRevenueComponent_Conditional_13_Template","FundingRevenueComponent_Conditional_14_Template","i1","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgModel","styles","throwError","BehaviorSubject","catchError","tap","getEndpointUrl","buildUrlWithQuery","http","revenueSubject","loadingSubject","errorSubject","revenue$","asObservable","loading$","error$","baseUrl","params","url","Object","keys","get","pipe","errorMessage","handleError","Error","currentRevenue","filters","getCurrentRevenue","clearRevenue","getCurrentError","calculateTotalFees","total","calculateNetProfit","console","status","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}